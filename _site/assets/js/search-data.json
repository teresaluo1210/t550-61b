{"0": {
    "doc": "404 Error",
    "title": "404",
    "content": ". naurrrrrrrrr go back ",
    "url": "/404.html#404",
    
    "relUrl": "/404.html#404"
  },"1": {
    "doc": "404 Error",
    "title": "404 Error",
    "content": " ",
    "url": "/404.html",
    
    "relUrl": "/404.html"
  },"2": {
    "doc": "BYOW Ambition Features",
    "title": "Deadlines",
    "content": "Warning: There are 3 deadlines for this project, and some deadlines require you to submit multiple deliverables. Please double-check that you submitted everything! | Assignment | Tasks | Deliverable | Points | Due Date | . | Team Formation | - Task 0: Partnerships | Pre-Project Google Form | 2.5 | Wed, Apr 911:59pm PT | . | Project 3A | - Task 1: Setup- Task 2: Design Document- Task 3: World Generation | World Screenshots on Gradescope | 10 | Fri, Apr 1811:59pm PT | . | Design Document | 7.5 | . | Mid-Project Google Form | 2.5 | . | Project 3B | - Task 4: Main Menu- Task 5: Interactivity- Task 6: HUD- Task 7: Saving and Loading- Task 8: Ambition Features | Code on Gradescope(0 pts, but required for checkoff) | 0 | Tue, Apr 2911:59pm PT | . | Live Checkoff with TA(Checkoffs will happen 4/28 – 5/2) | 100 | . | Post-Project Google Form | 2.5 | . To request extensions on Project 3, both partners need to submit separate extension requests on Beacon. ",
    "url": "/projects/proj3/ambition/#deadlines",
    
    "relUrl": "/projects/proj3/ambition/#deadlines"
  },"3": {
    "doc": "BYOW Ambition Features",
    "title": "Ambition Features",
    "content": "30 points of your project score will be based on features of your choosing, which we call your “ambition score”. The big idea is that beyond the base requirements of this project, we want you to try to polish your product a bit more and add some cool features. Below is a list of features worth either 22 points (primary feature) or 8 points (secondary feature). From these two categories, you need to implement 30 points of features, and at least one of your features must be a primary feature. Here are some ways to achieve this: . | One primary feature and one secondary feature. This is the most common way. | Two primary features. | . This “ambition” category is only worth 30 points. For example, if you implement 38 points of features, you do not get extra credit. However, feel free to add as many features as you’d like if you have the time and inclination. Your project must still meet the basic requirements described earlier in the spec! For example, if you allow the user to use mouse clicks, the project should still allow keyboard based movement! . Under the description of some primary features, we’ve provided some GIFS that would score full points on their respective ambition point items to help clear any confusions. Yours do not need to look exactly like the examples given. You are not restricted to the features we list below! We strongly encourage you to come up with your own. We have an Ed megathread (Feature Request Ed thread) where you can run your ideas by us to confirm that it meets our standards. If you’re participating in the LLM pilot project, your features are only worth half credit each, i.e. you might implement e.g. two primary features (11 points each) and two secondary features (4 points each) to reach 30 points. Files . For some ambition features, you might customize your world through custom images, audios, and other assets. Make sure to upload these files into your project and organize them accordingly. In addition, use relative file paths instead of absolute file paths. For instance, if you have your music file menu_music.wav under a separate package called music underneath src, you can reference it as music/menu_music.wav. Doing both of these steps will allow anyone who has your project on their laptop to be able to view and use your files. ",
    "url": "/projects/proj3/ambition/#ambition-features",
    
    "relUrl": "/projects/proj3/ambition/#ambition-features"
  },"4": {
    "doc": "BYOW Ambition Features",
    "title": "Primary Features (22 points)",
    "content": ". | Line of Sight: Create a system so that the tile renderer only displays tiles on the screen that are within the line of sight of the avatar. The line of sight must be able to be toggled on and off with a keypress. | Light Sources: Add the ability for light sources to affect how the world is rendered, with at least one light source that can be turned on and off with a keypress. The intensity of the light must diminish in a gradient as the distance from the source increases. Light sources should fill a majority of the room it belongs to, and light should not pass through walls. | Pathfinder: Add entities which chase the avatar/other entities by use of a search algorithm from class, with a toggle to display their projected path. Implementing more than one pathfinding algorithm will NOT count as a second primary feature. | Encounters: Create a system for “encounters”, where a new interface appears when the avatar interacts with entities in the world, returning the avatar to the original interface when the encounter ends (e.g. Pokémon). It’s okay if save/load is not available during encounters. | Perspective: Add the ability for the user to change the perspective of their view (first-person, isometric 2.5D, 3D, etc.) (We’ve never seen anyone do isometric 2.5D or full 3D before! The Nintendo 64 game ‘Kirby 64 - The Crystal Shards’ is an example of what an isometric 2.5D world looks like). One particularly interesting example is Dorottya Urmossy and David Yang’s Fall 2022 submission, which is a 2.5D first-person view, i.e. the world is 3D but the entities are 2D. | Battle System: Implement a battle system that allows players to interact with moving enemies and obstacles. Assign the player a health value, place collectibles that restore health around the map, and create randomly-moving enemies/objects that inflict damage on and receive damage from the player. | Explorer: Make your world larger than the preset display size such that the player can “explore” beyond the starting world. The rendered world should move with the player beyond a certain point and be scrollable. | Warp: Make your world “wrap” around the border of the rendered world, where the player should be able to enter from one side of the screen and exit from the opposite side interchangeably. In order to wrap, you must have rooms on the edge of the world that clip off such that the opposite side also has a room that is clipped off, allowing the player to continue traveling on the floor tiles. The world should still follow the World Requirements from Part A excluding requirement #10. | Online Multiplayer: Add online multiplayer where other users can join and leave the current game. java.net.Socket might be useful here. | NPCs: Add NPC interaction and dialogue with the player. Allow the player to choose different response options depending on the NPC and/or game state. Let us know if you do any cool realtime API calls to an LLM service. | Levels: Implement elevators/navigable floors with a toggleable multi-floor view or with a significantly different interface with the ability to go back to the main world. | Altered Terrain: Implement the ability for the avatar to significantly alter the landscape of the world, e.g. digging, triggering traps that cause parts of the world to become dangerous or impassible, solving puzzles that make some rooms accessible only after fulfilling some objective. | . ",
    "url": "/projects/proj3/ambition/#primary-features-22-points",
    
    "relUrl": "/projects/proj3/ambition/#primary-features-22-points"
  },"5": {
    "doc": "BYOW Ambition Features",
    "title": "Secondary Features (8 points)",
    "content": ". | Replay: Add the ability for the user to “replay” their most recent save, visually displaying all the actions taken since the last time a new world was created. This must result in the same final state as would occur if the user had loaded the most recent save. This means that the game should be playable once the replay is complete. | Save Slots: Add multiple save slots that can be accessed with a new menu option, and a new keyboard shortcut to save to a slot other than slot 1. You should be careful to still support the default behavior of saving and loading in order to be consistent with the replay string requirements. | New World: Add the ability to create a new world without closing and reopening the project, either as a special option you can press while exploring, or when you reach a “game over” state if you’ve turned your world into a game. | Custom Avatar: Add a menu option to change your avatar’s appearance to a custom image created by you (e.g. a non-Tileset image). | Theme: Add a menu option or randomly determine what the environment/theme of the world will be. | Landscape: Add a menu option or randomly determine what the landscape of the world will be (e.g, dungeons, islands, plains, etc.). | Language: Add a menu option to change all text in the interface to a different language. English should be the default and there should be a way to switch it back to English. | Mouse Support: Add support for mouse clicks on the main menu for anything that can be done with a keypress on the main menu. You do not have to implement this for typed user input (e.g. seed generation). | Image Renderer: Make your engine render images instead of unicode characters. | Audio: Add cool music to both your menu and exploration interface, as well as sound effects for interactions the avatar makes with the world. | Minimap: Add a minimap somewhere which shows the entire map and the current avatar location. This feature is a lot more interesting if you also implement a map which is larger than the screen so that you are unable to see the entire map normally. | Rotate: Add ability to rotate the world, i.e. turn the board 90 degrees and adjust movement keys accordingly. | Mouse Movement: Add support for movement with mouse clicks on any visible square. You’ll need to implement some sort of algorithm for pathfinding. | Local Multiplayer: Add support for 2 users to interact at the same time. This will require that you have two avatars on screen which can move around, and they should have separate control schemes. | Moveable Blocks: Add ability for the player to place and remove blocks based on a sequence of keypresses. | Coins: Add the ability for the user to collect coins. Once all coins are collected, the user should be returned to the main menu, where they are given the option to either start a new game, load a previous world, or quit. | . ",
    "url": "/projects/proj3/ambition/#secondary-features-8-points",
    
    "relUrl": "/projects/proj3/ambition/#secondary-features-8-points"
  },"6": {
    "doc": "BYOW Ambition Features",
    "title": "BYOW Ambition Features",
    "content": " ",
    "url": "/projects/proj3/ambition/",
    
    "relUrl": "/projects/proj3/ambition/"
  },"7": {
    "doc": "Announcements",
    "title": "Announcements",
    "content": " ",
    "url": "/announcements/",
    
    "relUrl": "/announcements/"
  },"8": {
    "doc": "Asymptotics Problems Solutions",
    "title": "Asymptotics Problems Solutions",
    "content": ". | False. Worst case is $\\Theta(N)$, for a spindly BST | False. Worst case is $\\Theta(N)$ | False. Best case is $\\Theta(\\log(N))$, for a bushy BST | True | True (remember that big-O need not be tight unless otherwise specified!) | False. In the best case, these nodes are near the root. Note that if C and K are randomly chosen, then this is True in the amortized case, since the depth of the average node in the tree is given by the sum \\(\\sum_{h=1}^{\\lg n} \\frac{h2^h}{N} \\in \\Theta(\\log N)\\) | mystery finds the zth largest element in the BST (indexed from 1). It does this by calculating the number of elements in the left subtree, then going to the right or left subtree depending on whether we have too many elements in the left subtree or not enough. Note that numLeft will take proportional time to the number of nodes in the left subtree, so the amount of work in one recursive subcall is $\\Theta(\\text{number of nodes in left subtree})$. | . There are no conditions on the tree, so we must consider when the tree is bushy, left-spindly, and right-spindly. The best-case will be when the root of the tree is exactly the zth largest element, in which case it will take $\\Theta(\\text{number of nodes in left subtree})$ time (because there is no recursive call). | Bushy Tree: There are $\\frac{N}{2} - 1$ nodes in the left subtree, so the runtime is $\\Theta(N)$ in the best case (when z == N / 2). | Spindly Tree (Left): There are $N - 1$ nodes in the left subtree, so the runtime is $\\Theta(N)$ in the best case (when z == N). | Spindly Tree (Right): There are $0$ nodes in the left subtree, so the runtime is $\\Theta(1)$ in the best case (when z == 1). | . Hence the best-case runtime is $\\Theta(1)$. The worst case occurs when we have to traverse all the way down to the leaves of the tree. | Bushy Tree: For the first recursive call, there are about $\\frac{N}{2}$ nodes in the left subtree, then there will be about $\\frac{N}{4}$ nodes in the left subtree of the second recursive call, and so on, until we hit a leaf. This means that the worst-case runtime is $\\frac{N}{2} + \\frac{N}{4} + \\frac{N}{8} + \\dots + 1 \\in \\Theta(N)$ (when z == 1). | Spindly Tree (Left): In this case, each recursive call will have one less node in the left subtree as the parent node. This yields a sum of $N + (N-1) + (N-2) + \\dots + 1 \\in \\Theta(N^2)$ (when z == 1). | Spindly Tree (Right): There are $0$ nodes in the left subtree at each recursive call, and the height of the tree is $N$, so the worst-case runtime is $\\Theta(N)$ (when z == N). | . From the above cases, we see that the worst-case runtime is $\\Theta(N^2)$. Summary: Best-case: $\\Theta(1)$. Worst-case: $\\Theta(N^2)$. ",
    "url": "/labs/lab06/asymptotics-soln/",
    
    "relUrl": "/labs/lab06/asymptotics-soln/"
  },"9": {
    "doc": "BYOW Checkoff Script",
    "title": "Deadlines",
    "content": "Warning: There are 3 deadlines for this project, and some deadlines require you to submit multiple deliverables. Please double-check that you submitted everything! | Assignment | Tasks | Deliverable | Points | Due Date | . | Team Formation | - Task 0: Partnerships | Pre-Project Google Form | 2.5 | Wed, Apr 911:59pm PT | . | Project 3A | - Task 1: Setup- Task 2: Design Document- Task 3: World Generation | World Screenshots on Gradescope | 10 | Fri, Apr 1811:59pm PT | . | Design Document | 7.5 | . | Mid-Project Google Form | 2.5 | . | Project 3B | - Task 4: Main Menu- Task 5: Interactivity- Task 6: HUD- Task 7: Saving and Loading- Task 8: Ambition Features | Code on Gradescope(0 pts, but required for checkoff) | 0 | Tue, Apr 2911:59pm PT | . | Live Checkoff with TA(Checkoffs will happen 4/28 – 5/2) | 100 | . | Post-Project Google Form | 2.5 | . To request extensions on Project 3, both partners need to submit separate extension requests on Beacon. ",
    "url": "/projects/proj3/checkoff/#deadlines",
    
    "relUrl": "/projects/proj3/checkoff/#deadlines"
  },"10": {
    "doc": "BYOW Checkoff Script",
    "title": "Checkoff Policies",
    "content": "Project 3 Demos will be conducted during lab sections. Information about how to sign up for a checkoff time will be posted on Ed. Sign up for a check off slot in a lab section and complete it at your assigned time. Make sure to prepare accordingly to avoid any last-minute emergencies! . The code that you present during your demo should be the code that you submitted to the Project 3B assignment on Gradescope. In other words, the Project 3B due date (plus any extensions you requested) is the deadline for making any changes to your code. Even if your checkoff doesn’t happen until later, you can’t make any changes after your Project 3B due date. The following is what the TA will exactly do when checking you off: we recommend you do a dry-run of this to ensure you didn’t miss anything. You can clone your repository in some random destination on your computer (like your home directory) if you want to follow along and simulate your checkoff. ",
    "url": "/projects/proj3/checkoff/#checkoff-policies",
    
    "relUrl": "/projects/proj3/checkoff/#checkoff-policies"
  },"11": {
    "doc": "BYOW Checkoff Script",
    "title": "Attendance",
    "content": "Both partners should be present in-person for the checkoff. If one partner is sick, traveling, or has some other documented excuse, please fill out the Project 3 Checkoff Extenuating Circumstances Form before the time of your checkoff slot. Once completed, proceed with the checkoff as normal with your partner on a Zoom hosted by you. It’s your responsibility to make sure that the remote partner is on call before the checkoff starts. We can’t wait for you to open a Zoom call after the checkoff slot has already started. ",
    "url": "/projects/proj3/checkoff/#attendance",
    
    "relUrl": "/projects/proj3/checkoff/#attendance"
  },"12": {
    "doc": "BYOW Checkoff Script",
    "title": "Setup",
    "content": "Designate one partner to be the presenter; this should be the partner who signed up for the demo slot. They should make sure to already have the following set up: . | IntelliJ open with your Project 3 code (doesn’t matter what class) | The program running with the BYOW main menu displayed | The state of your repo should be the commit containing the version of your project you want to demo. The code you demo should be the same as the code you submitted to Gradescope. If this is your most recent commit, just make sure your Git status is clean. If it is a past commit, you can get to this state by running git switch --detach &lt;commit id&gt;. (To get your repo back to normal, run git switch main.) | If you choose to demo a version of your project that is past the deadline (for a percentage penalty, per the syllabus), make sure to let the TA know. | Your Git status should be clean (no changes to commit) | . ",
    "url": "/projects/proj3/checkoff/#setup",
    
    "relUrl": "/projects/proj3/checkoff/#setup"
  },"13": {
    "doc": "BYOW Checkoff Script",
    "title": "Checkoff Script",
    "content": ". | The grader will ask for everyone’s class ID (sp25-s***) | One partner should designate their laptop as the “check-in laptop”, and already have a terminal window in their sp25-proj3-g***/proj3. Their Git should be in a clean state (git status should be clean), IntelliJ should be open, and the Project 3 main menu should be running. | If any of these requirements are not fulfilled, you may not receive a grade for Proj3 checkoff. | . | Run “git log” and make sure that the HEAD commit is a commit from before the deadline. Run “pwd”. Make sure the path matches that of the open IntelliJ window. The students may choose to demo a late commit for partial credit. | Check for main menu with New Game/World, Load, and Quit options. | Check that hitting “n” on the main menu lets player type in a seed. | Check that typing numbers and hitting “s” starts the world. | Check that the floor and walls are distinguishable. | Check that there are at least 2 structures which can be considered hallways. (1 wide, kinda long) | Check that the world contains a turning hallway. If the current world doesn’t have a turning hallway, ask the students to generate a world that has a turning hallway. | Check that there are a few rectangular structures which can be considered rooms, which are connected via hallways | Check WASD moves the player up, left, down, right. | Check that hovering over three tiles displays three different names (it is OK if a key press is needed for the mouse hover text to update). | Check that the HUD does not flicker. | Check that moving into walls stops the player without errors. | Check that typing in “:Q” in “world mode” stops the game. At this point, memorize how the state of the world looks like. You can ask the student to take a screenshot or take one yourself. | After restarting the program, test the load/save feature: Check that pressing “L” on the main menu starts a world with no additional input. | Check that the world layout is exactly the same as it was before closing the world. | Check that the basic commands (WASD, etc.) still work. | Quit the world by typing in “:Q” and reload the world again using “L” on the main menu. Make sure basic commands still work. | Check that “q” alone in “world mode” doesn’t terminate the game. | Generate 3-5 worlds and look for how varied they are. Select one tier based on how much variety you feel their worlds have. | Full credit - each world generated looks significantly different and you feel like you’d see something new when you generate a new world | 50% credit - the worlds are not identical, but there are only small shifts or changes which do not really change the experience of moving around the world (e.g. rooms are always in the same spot but just slightly different size) | No credit - Worlds are identical most of the time or the changes in the room have no effect on the player experience/how they explore the world. (e.g. the world is the same each time, with only changes in the color of the floor) | . | The grader will then ask you to show all the ambition points you’ve attempted, and will determine whether you receive full or half credit for those items. | The grader will tell you which items you received/did not receive credit for. They will ask if you agree with your score: if you do not, you will be given the opportunity to request a regrade. | . ",
    "url": "/projects/proj3/checkoff/#checkoff-script",
    
    "relUrl": "/projects/proj3/checkoff/#checkoff-script"
  },"14": {
    "doc": "BYOW Checkoff Script",
    "title": "Point Allocation",
    "content": "They will then grade each requirement of the game. Each requirement can either be evaluated as full points, half points, or zero points. Basic World Functionality (50 points total) . The TA will run your project and will check for the following features: . | The world has a main menu screen with a New World, Load, and Quit option (2 points) | The TA will hit “n” or “N” (they may do either) and check that the world prompts for a seed (2 points) | The TA should type in a few random numbers and hit “s” or “S” (they may do either) which should immediately start the world. The TA should also be able to see the numbers you are typing on the screen. (3 points) | . At this point, the program should be running and there should be a visible world. | World has visually distinct walls and floors (4 points) | World has at least two hallways which are 1 tile wide (1 point) | World has at least 1 hallway containing a turn in it. If current world doesn’t, ask students to generate a world that has a turning hallway. (3 points) | World has some number of rooms that are connected via hallways (7 points) | . The TA will now try the basic commands that should be available during gameplay. | TA should hit the W, A, S, and D keys randomly and check the player movement is consistent with the key pressed (4 points) | TA should hover over 3 different tiles and make sure their names show up somewhere on screen and that the names make sense (4 points) | TA should verify that the HUD does not flicker (3 points) | TA should move into a wall and make sure the player stops at the wall instead of moving into it (1 points) | TA should type “:q” or “:Q” (they may do either) in “world mode” which should quit the world and close the program. TA should remember the world layout at this point (3 points) | . The program is now closed, and we will test the load feature. The TA will run the world again after it has been closed and the main menu should appear again. | TA should hit “l” or “L” and the world should immediately start (3 points) | TA should check that the world layout is exactly as it was before closing the world (3 points) | TA will run through the basic commands again (listed above) to make sure the world still works (3 points) | TA will quit and load again and make sure that the basic commands work (3 points). | TA will check that “q” or “Q” alone in “world mode” does not quit the game (1 points). | . Randomness (20 points total) . | The TA should close the world again and will begin testing to see if worlds are randomly generated. | The student pair should’ve explained to the TA where they are making use of randomness and make mention of any pieces of their world which is consistent across all seeds | TA should check that the use of randomness does not lead to a severe limitation on the variety of worlds (ie. randomly choosing a world layout from a finite set of worlds) | The TA should open the world 3-5 times, making sure to use a different seed each time | The TA will be looking for your world’s ability to generate variety in both world structure and player experience while exploring that world. What this means is when two different seeds are used to generate new worlds, these worlds should not feel identical (or close to identical). | . The grading breakdown is as follows: . | 20 points: The worlds are mainly random, as described by the above section. | 10 points: The worlds exhibit a few random elements, but generally look the same | 0 points: The worlds contain no random elements. | . Ambition Points (30 points total) . | The student should state and demonstrate the features that are in the Ambition category. You should be very explicit about how to “activate” or use that feature. | The TA will write in the features the student successfully demonstrated and their point values based on the spec, awarding either Full, Half, or Zero credit for each item. | For students participating in the LLM pilot project, each point counts for half, i.e. they’ll need 60 ambition points to get full credit on this part of the project. | . ",
    "url": "/projects/proj3/checkoff/#point-allocation",
    
    "relUrl": "/projects/proj3/checkoff/#point-allocation"
  },"15": {
    "doc": "BYOW Checkoff Script",
    "title": "BYOW Checkoff Script",
    "content": " ",
    "url": "/projects/proj3/checkoff/",
    
    "relUrl": "/projects/proj3/checkoff/"
  },"16": {
    "doc": "BYOW Common Bugs",
    "title": "Deadlines",
    "content": "Warning: There are 3 deadlines for this project, and some deadlines require you to submit multiple deliverables. Please double-check that you submitted everything! | Assignment | Tasks | Deliverable | Points | Due Date | . | Team Formation | - Task 0: Partnerships | Pre-Project Google Form | 2.5 | Wed, Apr 911:59pm PT | . | Project 3A | - Task 1: Setup- Task 2: Design Document- Task 3: World Generation | World Screenshots on Gradescope | 10 | Fri, Apr 1811:59pm PT | . | Design Document | 7.5 | . | Mid-Project Google Form | 2.5 | . | Project 3B | - Task 4: Main Menu- Task 5: Interactivity- Task 6: HUD- Task 7: Saving and Loading- Task 8: Ambition Features | Code on Gradescope(0 pts, but required for checkoff) | 0 | Tue, Apr 2911:59pm PT | . | Live Checkoff with TA(Checkoffs will happen 4/28 – 5/2) | 100 | . | Post-Project Google Form | 2.5 | . To request extensions on Project 3, both partners need to submit separate extension requests on Beacon. ",
    "url": "/projects/proj3/common-bugs/#deadlines",
    
    "relUrl": "/projects/proj3/common-bugs/#deadlines"
  },"17": {
    "doc": "BYOW Common Bugs",
    "title": "Common Bugs",
    "content": "Overriding Equals . The Problem: Two instances of my class are saying they are not equal when they should be. Also, I set the instance of my class to be the key in a HashMap, but I can’t find it when I try to access that key. The Solution: Make sure that if you create any classes, override the .equals() method AND the .hashcode() method. This will guarantee that two instances that are equal will have the same hashcode . ",
    "url": "/projects/proj3/common-bugs/#common-bugs",
    
    "relUrl": "/projects/proj3/common-bugs/#common-bugs"
  },"18": {
    "doc": "BYOW Common Bugs",
    "title": "Common UI Bugs",
    "content": "Invisible Text . Getting text to show up on screen can be somewhat tricky. Several things need to go right: . | the font color needs to be set to something visible (i.e. white) | the location of the text needs to be in bounds | you need to call StdDraw.show() after the text is drawn so it shows up on screen | you need to make sure that your text does not get drawn over or cleared right after it is drawn (for example, TERenderer.renderTiles clears the entire screen) | . Here’s some code that should correctly draw text: . TERenderer ter = new TERenderer(); ter.initialize(80, 40, 0, 0); StdDraw.setPenColor(Color.WHITE); StdDraw.text(40, 30, \"I like cheese\"); StdDraw.show(); . Strange Tiles . The Problem: . One common glitch is that after implementing other parts of the UI, the tile characters will suddenly misbehave. Here’s a program that demonstrates the problem. package core; import edu.princeton.cs.algs4.StdDraw; import tileengine.TERenderer; import tileengine.TETile; import tileengine.Tileset; import java.awt.*; import java.util.Arrays; public class FlowerWorld { public static final int WORLD_WIDTH = 80; public static final int WORLD_HEIGHT = 40; public static void main(String[] args) { // create renderer TERenderer ter = new TERenderer(); ter.initialize(WORLD_WIDTH, WORLD_HEIGHT, 0, 0); // draw main menu StdDraw.setFont(new Font(\"Monaco\", Font.BOLD, 50)); StdDraw.setPenColor(Color.WHITE); StdDraw.text(WORLD_WIDTH * 0.5, WORLD_HEIGHT * 0.75, \"Press any key to continue\"); StdDraw.show(); while (!StdDraw.hasNextKeyTyped()) { StdDraw.pause(10); } // create flower world TETile[][] tiles = new TETile[WORLD_WIDTH][WORLD_HEIGHT]; for (TETile[] ar : tiles) { Arrays.fill(ar, Tileset.NOTHING); } for (int x = WORLD_WIDTH / 4; x &lt; WORLD_WIDTH * 3 / 4; x++) { for (int y = WORLD_HEIGHT / 4; y &lt; WORLD_HEIGHT * 3 / 4; y++) { tiles[x][y] = Tileset.FLOWER; } } // render frame ter.renderFrame(tiles); } } . You’ll notice that the flowers no longer look like flowers anymore. This is because the font size is much too large, so the characters for each tile are spilling into the other tiles. The Solution: . The problem is that the tiles are being drawn with too large a font size, so we’ll use a method that resets the font size. Call the resetFont method in your TERenderer class: . /** Sets the font to the correct font for drawing tiles */ public void resetFont() { Font font = new Font(\"Monaco\", Font.BOLD, TILE_SIZE - 2); StdDraw.setFont(font); } . Then, call the method before you draw the tiles: . | Before | After | | // render frame ter.renderFrame(tiles); . | // render frame ter.resetFont(); ter.renderFrame(tiles); . | . Now, when you run FlowerWorld the tiles should be drawn correctly. Flickering UI . The Problem: . One common glitch is a flickering UI. Here’s a program that demonstrates the problem. package core; import edu.princeton.cs.algs4.StdDraw; import tileengine.TERenderer; import tileengine.TETile; import tileengine.Tileset; import java.awt.*; import java.util.Arrays; public class WaterWorld { public static final int WORLD_WIDTH = 80; public static final int WORLD_HEIGHT = 40; public static void main(String[] args) { // create a world that is just water TETile[][] tiles = new TETile[WORLD_WIDTH][WORLD_HEIGHT]; for (TETile[] ar : tiles) { Arrays.fill(ar, Tileset.WATER); } // create a renderer, leaving 2 tiles of space at the bottom for the HUD TERenderer ter = new TERenderer(); ter.initialize(WORLD_WIDTH, WORLD_HEIGHT + 2, 0, 2); // main game loop while (true) { ter.renderFrame(tiles); StdDraw.setPenColor(Color.WHITE); StdDraw.text(4, 1, \"HUD goes here\"); StdDraw.show(); StdDraw.pause(10); // optional, just keeps your computer from overheating } } } . You’ll notice the text “HUD goes here” should flicker. The reason why is because there are multiple StdDraw.show() calls per frame - one inside the renderFrame call, and one on line 31. This means that there are actually two frames being drawn on screen every loop: one without the text, and one with the text. It’s somewhat random which frame you see, which is why the UI flickers between the two. The Solution: . The problem is that there’s an extra StdDraw.show() call inside renderFrame, so we’ll create a version of that method without it. Instead, use the drawTiles method in your TERenderer class: . /** * Like renderFrame, but does not clear the screen or show the tiles */ public void drawTiles(TETile[][] world) { for (int x = 0; x &lt; world.length; x += 1) { for (int y = 0; y &lt; world[x].length; y += 1) { world[x][y].draw(x + xOffset, y + yOffset); } } } . Replace the renderFrame call in the main game loop: . | Before | After | | // main game loop while (true) { ter.renderFrame(tiles); ... } . | // main game loop while (true) { StdDraw.clear(Color.BLACK); ter.drawTiles(tiles); ... } . | . Now, when you run WaterWorld the text should no longer flicker. Custom image not rendering . The Problem: . If you are creating custom images for your game, then you may run into a bug where your images aren’t rendering even after you have created a custom TETile with the correct filepath. The Solution: . Make sure that your images are 16x16 pixels and stored as PNGs. ",
    "url": "/projects/proj3/common-bugs/#common-ui-bugs",
    
    "relUrl": "/projects/proj3/common-bugs/#common-ui-bugs"
  },"19": {
    "doc": "BYOW Common Bugs",
    "title": "BYOW Common Bugs",
    "content": " ",
    "url": "/projects/proj3/common-bugs/",
    
    "relUrl": "/projects/proj3/common-bugs/"
  },"20": {
    "doc": "Asymptotics 1",
    "title": "Asymptotics 1",
    "content": "&lt;!DOCTYPE html&gt; . Asymptotics Demo | CS 61B Spring 2017 | | . Main Course Info Staff Assignments Resources Piazza | R(N): | | f(N): | | . | k1: | | k2: | | . | maxN: | | maxY: | | . Plot library: https://github.com/maurizzzio/function-plot . &lt;/html&gt; . ",
    "url": "/resources/guides/asymptotics/demo1/",
    
    "relUrl": "/resources/guides/asymptotics/demo1/"
  },"21": {
    "doc": "Asymptotics Demo 2",
    "title": "Asymptotics Demo 2",
    "content": "Asymptotics Demo . | R(N): | | f(N): | | . | k1: | | k2: | | . | maxN: | | maxY: | | . Plot library: https://github.com/maurizzzio/function-plot . ",
    "url": "/resources/guides/asymptotics/demo2/",
    
    "relUrl": "/resources/guides/asymptotics/demo2/"
  },"22": {
    "doc": "An Ed Guide for New Users",
    "title": "Landing Page",
    "content": "When you first visit Ed, you’ll see a bunch of posts on the left side of your screen. All important announcements and index posts will be pinned so that you don’t need to spend too much time looking for them. That little blue dot on the left side of the post means that you haven’t viewed that post, so if you see that next to a pinned post you should definitely read it thoroughly. Here is what the landing page of CS 61BL looks like (the summer version of the course). Remember that Ed is the primary point of contact between us, so make sure you read it every day, and pay special attention to it during and around due dates in the case that any deadlines change or we have any important announcements. Now we’ll dive into the specifics of how Ed works, starting with Questions. Question . You can create a question or note (called a “post” on Ed) by clicking the big blue ‘New Thread’ button in the top left corner and then selecting what you want to create. Here is what an unanswered question on Ed looks like: . You’ll see that Omar has posted a question that he wants help with. In Ed, there is more distinction between follow-ups under a thread. If I had a clarification on the question, I can comment on the question. This is not answering the question, so instructors and TAs will still see the question as unanswered. You can see that Allyson has asked for the worksheet Omar’s question is from. Instructors and course staff can endorse questions and answers. Only staff and instructors can endorse, so you can have more confidence that the answer is correct on this one. If you see an endorsed question, you may want to check it out as it may be particularly insightful! . Answers . You can see that Akshit has answered Omar’s question and has even gotten his answer endorsed, liked, and has a green check mark. We’ve already talked about endorsement, it just means that an instructor or TA has verified this answer is trustworthy. Everyone can like a post, comment, or an answer, both students and staff. You can think of likes as +1s or a thank you! . Resolving Posts . The green checkmark next to an answer indicates that it has resolved the question. Only one answer can receive the green checkmark, so it will be given to the best answer on the post. When a staff member answers a question, it is automatically marked with a green checkmark. The person that made the post can also toggle the checkmarks. If you post a question on Ed, and get an answer from one of your fellow students, be sure to mark it with the green checkmark! Some student answers are just as good as ours! . On the other hand, if an answer does not fully resolve your question, feel free to unmark it! Staff filters for unresolved posts when answering Ed questions, so this will allow your question to be discovered again. Follow-ups and Comments . You can also create a follow-up on an answer in a hierarchical form. With these hierarchical comments, it is much easier to track what’s going on and answer individual follow-up questions. You can see that Omar has asked a follow-up question on Akshit’s answer. You can use “Reply” to follow up with a nested, hierarchical comment, or “Comment” to start a different comment chain. Summary of Icons . Here is a reference table if you get confused. | Icon | Meaning | . | | Given to just one answer on a Question, usually the best answer. | . | | Only given by a TA or instructor that thinks the post/answer is trustworthy. | . | | Given by students or staff, not significant of anything but makes you feel better. | . | | Sets this post to be watched by you. You’ll receive email updates on any activity on this post. | . | | Stars this post on your account. Allows you to use a filter to see your starred post for quick access. You might consider starring helpful posts so you can easily and quickly find them. | . ",
    "url": "/resources/guides/ed/ed-guide/#landing-page",
    
    "relUrl": "/resources/guides/ed/ed-guide/#landing-page"
  },"23": {
    "doc": "An Ed Guide for New Users",
    "title": "Creating an Ed question",
    "content": "Now that we’ve talked about how to “read” an Ed post, we’ll talk about how to write one. Categories . Categories help the forum stay organized. By adding a category to your post, you are helping TAs find your post and answer it quicker, and also helping other students find your post and learn from the answers. The first thing you’ll do when you create a post is to select the right category for it and, if applicable, the right subcategory and subsubcategory. Here is an example where I will ask a question about Pset (problem set) 2: . To view only posts in a specific category, subcategory, or subsubcategory, click on the category in the left sidebar. Meta Options . You’ll have some options under your post if you want to ask anonymously or make your question private where all staff members can see. Feel free to ask anonymously. We do discourage asking private questions, as collective knowledge is helpful, but won’t stop you. Formatting Options . You’ve probably already noticed the generous formatting options on Ed. This includes adding pictures, using markdown, using LaTeX, and more traditional formatting like bolding/underlining. This makes the question much nicer to read, which makes it more obvious and clear what you are trying to ask. Here is the bar where all the formatting options are located: . And here is a table describing how to use each formatting option. | Icon | Meaning | . | | Select this to get a drop-down menu of different text types, including code. There isn’t an explicit markdown option, just use the backticks ` as you normally would. | . | | These are your typical bold, italics, and underline options. | . | | This is a shortcut to the code text type. Instead of using this, you should use the interactive code block. | . | | You can use this to hyperlink text in your post. Highlight the word or words you want to hyperlink, click this button, and paste the link. | . | | Bulleted lists and numbered lists. | . | | Inserts an image into the post. | . | | Embeds a video, you shouldn’t ever have to do this. | . | | Attaches a file to the post. You shouldn’t ever have to do this. | . | | Click this to insert LaTeX formatted math into your post. Unfortunately, this will create its own line. Luckily, if you know LaTeX, you can just insert your single $ signs and go for it. If you don’t, it’s really simple to learn since the only thing you’ll ever do in LaTeX is easy asymptotics stuff. You can learn this within 20 minutes. | . | | Insert an interactive code block. Nicer than the normal code block since this has better syntax highlighting and things like automatic curly brace insertions, which is nice for Java. The language (on the right side) should be set to Java by default, but if it isn’t go ahead and change it. You’ll see 2 checkboxes for “Line Numbers” and “Runnable”. There isn’t any reason to not have line numbers, so keep those on. The runnable option allows us to run your code, but unfortunately it really doesn’t work well with Java (you need to define a class with main), so uncheck this box. | . | | Not useful for this class. Allows you to display basic website stuff. | . | | You can draw things with this. | . | | Used to preview your post to make sure all your fancy elements render properly. | . In the following example, you can see that Omar has asked a question about a specific problem from a specific Problem Set and has categorized it properly. Now, in the future, if another student is going through Pset 2 and has some questions they can simply use the filter to see questions in that subcategory and not have to ask duplicate questions. ",
    "url": "/resources/guides/ed/ed-guide/#creating-an-ed-question",
    
    "relUrl": "/resources/guides/ed/ed-guide/#creating-an-ed-question"
  },"24": {
    "doc": "An Ed Guide for New Users",
    "title": "Ed Megathreads",
    "content": "We typically have very long threads (that we called “megathreads”) to aggregate all questions and clarifications for a specific topic. Megathreads are nice because you can browse through questions other students had on the assignment to get a good “birds eye view” of the specific parts your fellow students were getting stuck on. There is a megathread for each assignment and thus all questions about that assignment exist in one place, and you can then use your browser’s search (CMD + F) to find something more specific. Each follow-up can be marked as Resolved or Unresolved to alert the TAs that a question needs answering. This way, your question won’t get lost and we’ll always know if the megathread needs our attention. In CS61B, we will have a megathread for each assignment; you’re to post any and all questions you have about the assignment there. These megathreads will be monitored closely by staff to ensure that all questions are answered and nobody’s question got “lost” in the sea of other student questions. But we ask that you please search for your question before asking to reduce the clutter and make Ed as effective as possible for your fellow students and TAs. Here is what a megathread looks like in Ed: . You’ll see that the top-level comments have a special flag that says Resolved or Unresolved: this lets the TA know whether or not this comment needs attention. It’s important to mark your comment as Unresolved after you add to an existing comment, otherwise TAs won’t know that you want that question answered! You can mark a comment as Unresolved/Resolved by clicking the Unresolved/Resolved button which will mark it as the opposite thing. To add a new comment here, just start typing in the text-box right under the post that says “Add comment”: . You have the ability to ask your question anonymously: if you do, you’ll be given an anonymous animal as your pseudonym (you can see that a student asked anonymously and was donned the name “Anonymous Okapi”) that we can use to reference you in follow-ups. By default, when you post your comment it’ll be marked as Unresolved. We’ll have our megathreads pinned, so you can find them under the “Pinned Posts” section that we talked about above. You can also sort the comments on a megathread: . If you sort by “Top”, you’l get the comments in order of most liked to least liked. This will help you find comments that fellow students found most helpful in completing the assignment. Don’t forget to like comments you find helpful to make this sort even better! . If you sort by “Unresolved”, you’ll get the unresolved comments first and then the resolved comments afterwards. This mainly helps TAs answer all the comments that need attention, but if you like to help answer questions too you’re more than welcome to help us out :) . ",
    "url": "/resources/guides/ed/ed-guide/#ed-megathreads",
    
    "relUrl": "/resources/guides/ed/ed-guide/#ed-megathreads"
  },"25": {
    "doc": "An Ed Guide for New Users",
    "title": "Search",
    "content": "Remember how we said Ed search was great? Let’s go over how to use all the search features as well as good search strategies. Here is what the results look like for a good search: . Let’s go over how to use all the search features as well as good search strategies: . Using Keywords . This is the red (top-left) box on the image above. Ed search is a lot like Google search. If you had a general question on how to do recursive runtime analysis, you could search “How do I calculate runtime on recursive functions?”. Instead, you could also search for the key words in this well formatted question, so something like “recursive runtime analysis”, which would give you even better results. When you write a well formatted question like before, Google actually extracts the keywords for you. While we can’t write natural language questions into Ed, given the right keywords it does a very good job. Ed is able to search not only for post/question titles, but also down to sub comments level. As you type a new post title, it will also show you related posts according to what you type. Make sure to check them out, as a question you have in mind may have already been posed! . These next two features will definitely help you search, but often times the right key words will make the right post jump to the top of the results. Search Filters . This is the green (top-right) box on the image above. If you’re looking for a question with an answer you can trust, you might want to filter for only endorsed posts. This will limit your search to only posts that have been endorsed by staff. Similarly, if you are a helpful student and like to answer other student’s questions, you can search for unanswered or unresolved questions and help them. Thanks in advance! . Search Categories . This is the purple (center-right) box on the image above. Like previously mentioned, you can limit your search to just posts in particular categories. So if there was an inheritance question on midterm 1 that you had questions about you can filter your search to posts with that subcategory. Search Date Ranges . This is the blue (lower-right) box on the image above. You can also specify a range of dates that you want to search for. Less useful, but it exists if you need it. ",
    "url": "/resources/guides/ed/ed-guide/#search",
    
    "relUrl": "/resources/guides/ed/ed-guide/#search"
  },"26": {
    "doc": "An Ed Guide for New Users",
    "title": "Closing",
    "content": "The guide is good for letting you know what things Ed offers, but the best way to learn it is to just use the thing! Remember to keep up the Ed etiquette so that all students can benefit from the wonderful questions you all ask :) . Ed has some official resources that are subsets of what’s covered in this page: . | https://edstem.org/us/help/student-discussion | https://edstem.org/quickstart/ed-discussion.pdf | . ",
    "url": "/resources/guides/ed/ed-guide/#closing",
    
    "relUrl": "/resources/guides/ed/ed-guide/#closing"
  },"27": {
    "doc": "An Ed Guide for New Users",
    "title": "An Ed Guide for New Users",
    "content": "This is a guide for students new to the course forum Ed. It’ll cover how to effectively ask questions and how to efficiently search for what you want. At a high level, Ed is an education-centric forum that allows you to asynchronously collaborate with other students and receive guidance from staff. Ed takes some elements from StackOverflow. For those who are unfamiliar, StackOverflow is a public forum where people ask questions related to programming and software engineering. Full time software engineers use this all the time to get quick and reliable answers, so you should feel free to as well! Check out this link for an example question posted to StackOverflow. Now let’s get into Ed. After reading this guide, you should feel familiar with Ed and able to make the most out of it. Let’s get into Ed specifics. ",
    "url": "/resources/guides/ed/ed-guide/",
    
    "relUrl": "/resources/guides/ed/ed-guide/"
  },"28": {
    "doc": "Exam Logistics",
    "title": "Exam Logistics",
    "content": "The final exam is on Friday, May 12, 11:30am–2:30pm PT. If you need to take the exam remotely at that time, or if you need to take the alternate exam (2:30–5:30pm PT, in-person only), or if you have another exam at the same time, or if you need DSP accommodations, please fill out this form by Monday, May 1, 11:59 PM PT. We will respond to all form submissions after the form closes. The final exam will be closed-book, closed-notes, and closed-Internet. No calculators are allowed (no questions should require a calculator). However, you may use four cheat sheets (each two-sided) of your own design (handwritten and typed both allowed). ",
    "url": "/exam/",
    
    "relUrl": "/exam/"
  },"29": {
    "doc": "Exam Logistics",
    "title": "In-Person Logistics",
    "content": ". | We’ll email you an exam location a day or two before the exam. | Please try to arrive early, so that we can start on time. | . ",
    "url": "/exam/#in-person-logistics",
    
    "relUrl": "/exam/#in-person-logistics"
  },"30": {
    "doc": "Exam Logistics",
    "title": "Remote Logistics",
    "content": ". | Before the exam: . | We’ll email you a Zoom link a day or two before the exam. | . | On the day of the exam: . | Join the Zoom meeting on the computer you will be using and share your entire screen. | Set up a camera showing your workspace (e.g. join Zoom on your phone, or turn on a webcam feed). You don’t need to share audio. | At 11:40 AM, you will be emailed a PDF of the exam, and an answer sheet assignment will appear on Gradescope. (Here’s a demo.) | You should only have the exam PDF and the Gradescope answer sheet on your screen during the exam. | If you have clarification questions, DM a proctor using the Zoom chat. The top of your answer sheet has a link to the clarifications. | When you’re done, you can just leave the call. The Gradescope answer sheet will close at 2:30 PM PT. | . | Technical difficulties: . | Don’t worry if your video feed disconnects briefly during the exam. | If you encounter any logistics problems during the exam, email cs188@berkeley.edu. | If you need to use the bathroom, leave your phone in camera view, and leave the video feed on while you’re away. | . | . ",
    "url": "/exam/#remote-logistics",
    
    "relUrl": "/exam/#remote-logistics"
  },"31": {
    "doc": "Exam Logistics",
    "title": "Academic Integrity",
    "content": ". | Any form of communication or collaboration is cheating. Providing answers, receiving answers, and even just talking with others about course material during the exam windows are all violations of the Berkeley honor code. | Please be mindful to not discuss the exam until solutions are released. Keep in mind that we still have alternates and DSP exams after the normal exam ends. | . ",
    "url": "/exam/#academic-integrity",
    
    "relUrl": "/exam/#academic-integrity"
  },"32": {
    "doc": "External Proctoring",
    "title": "For Students: Requesting External Proctoring",
    "content": "Before each exam, we will release an exam logistics form. (You will receive an email announcement through Ed when this form is released). To officially request external proctoring, you must fill out the exam logistics form before the deadline. Other requests (e.g. emailing individual instructors, posting on Ed) will get lost and won’t be considered. Late requests submitted after the form closes won’t be considered. In the form, indicate that you cannot take the exam at the scheduled time or the alternate time. There should be a box asking you to elaborate on the reason. In this box, indicate that you’ll be proctored externally by athletics staff, and include the email and phone number of your proctor. If your request is approved, we will send a confirmation email to you and your proctor (usually 2-3 days before the exam). Your request is not officially approved until you receive this confirmation email. ",
    "url": "/policies/exams/external-proctor/#for-students-requesting-external-proctoring",
    
    "relUrl": "/policies/exams/external-proctor/#for-students-requesting-external-proctoring"
  },"33": {
    "doc": "External Proctoring",
    "title": "For Proctors: Proctoring Instructions",
    "content": "Students may use: . | Unlimited scratch paper. These must be fully-blank sheets. | A printed copy of a reference sheet. This will be emailed to you along with the exam. | Double-sided, handwritten cheat sheet(s) - one for Midterm 1, two for Midterm 2, and three for the final exam. No typed materials on the cheat sheet. No printed tablet notes allowed. | . Students may not use any other materials, including but not limited to: calculators, phones, computers, smart watches, collaboration with other students, etc. Students have 110 minutes to complete a midterm, and 170 minutes to complete a final exam. Adjust accordingly if the student has DSP accommodations. A few hours before the exam: . | Print out a copy of the Exam Integrity Agreement. You and and your student(s) should sign this. | . Exam start: . | Give the student several sheets of fully-blank scratch paper. | Check that the student has the correct number of cheat sheet(s). Check that nothing on the cheat sheet is printed. If any part of the cheat sheet is printed, you should confiscate it, and the student cannot use it during the exam. | At the official exam start time, you will receive an email from cs61b@berkeley.edu, with a PDF of the exam and a PDF of the reference card. | Print out the exam and the reference card, and give them to the student. | Give the student a minute or two to write their name and sign the honor code on the front of the exam. The student should not open the exam during this time. | When the student is ready, start a timer, and they can open the exam. | . Note: The official exam start time is on the course homepage. For exam security reasons, we cannot send you the exam PDF before the official exam start time. During the exam: . | If the student needs to use the bathroom, collect their phone and their exam and hold on to them while the student is using the bathroom. | . Exam end: . | Scan the student’s exam. The scanned PDF should be formatted exactly the same (e.g. exactly the same number of pages) as the original PDF we sent to you. | Email the scanned exam and the signed integrity agreement to cs61b@berkeley.edu. This should be done within 12 hours of the student finishing the exam (ideally, immediately afterwards). | You do not need to scan the student’s cheat sheet or scratch paper. | Please keep a copy of the student’s exam for at least one week after the exam, in case we need to you to take clearer pictures of any specific page. | . ",
    "url": "/policies/exams/external-proctor/#for-proctors-proctoring-instructions",
    
    "relUrl": "/policies/exams/external-proctor/#for-proctors-proctoring-instructions"
  },"34": {
    "doc": "External Proctoring",
    "title": "For Students: Clarifications",
    "content": "If you are taking the exam with an external proctor, we can’t offer clarifications. ",
    "url": "/policies/exams/external-proctor/#for-students-clarifications",
    
    "relUrl": "/policies/exams/external-proctor/#for-students-clarifications"
  },"35": {
    "doc": "External Proctoring",
    "title": "External Proctoring",
    "content": "This page is for students who need to take an exam away from campus, with an official university-approved proctor. This is usually because of a conflict with a university-approved athletic competition. If this doesn’t apply to you, please disregard this page. For university-level guidelines, including a list of approved proctors, please see the university’s page on Traveling &amp; Exam Proctoring. ",
    "url": "/policies/exams/external-proctor/",
    
    "relUrl": "/policies/exams/external-proctor/"
  },"36": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": "IllegalArgumentException: Could not open ...txt in AdventureGameTests. Be sure that you’ve opened the project with the lab03 folder as the parent directory. ",
    "url": "/labs/lab03/faq/",
    
    "relUrl": "/labs/lab03/faq/"
  },"37": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": " ",
    "url": "/labs/lab04/faq/",
    
    "relUrl": "/labs/lab04/faq/"
  },"38": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": "I can’t physically attend lab this week . If you are physically unable to attend any lab at all, please fill out this exemption form by Friday, February 28th (2/28). If you have approved extensions for Project 1A/1B that extend past the Lab 5 deadline, please also fill out the form. Do NOT fill out the form unless you have approved extensions. We will be verifying each form submission manually, and those with invalid submissions will not be checked off. We will not be accepting any new form submissions after 2/28, and will be emailing checkoff instructions during the weekend of March 1st (3/1). I’ve filled out the form, now what? . We’ll be emailing checkoff instructions during the weekend of March 1st (3/1) to those who submitted the form with a valid reason for not being able to attend any lab or with approved Project 1 extensions past 2/28. ",
    "url": "/labs/lab05/faq/",
    
    "relUrl": "/labs/lab05/faq/"
  },"39": {
    "doc": "FAQ",
    "title": "I’m getting merge conflicts after re-pulling the skeleton",
    "content": "First, add and commit your local changes so that git status reads that your working tree is clean. Then, refer to the Git WTFs section on resolving merge conflicts. You’ll need to incorporate both your local changes (this likely includes your BombMain passwords) and the bug fixes from the skeleton. After you’ve resolved the merge conflicts in the files, you’ll need to re-add and commit them to complete the merge. Come into office hours or lab if you’re unsure on what to do! . ",
    "url": "/labs/lab02/faq/#im-getting-merge-conflicts-after-re-pulling-the-skeleton",
    
    "relUrl": "/labs/lab02/faq/#im-getting-merge-conflicts-after-re-pulling-the-skeleton"
  },"40": {
    "doc": "FAQ",
    "title": "There’s a lot of red in my IntelliJ",
    "content": "First, be sure you’ve imported the libraries correctly. Refer back to step 5 of the Assignment Workflow if you need a refresher on how to do this. If that doesn’t work, be sure that src is blue and tests is green. Refer to the IntelliJ WTFS to mark your src and tests folders appropriately. ",
    "url": "/labs/lab02/faq/#theres-a-lot-of-red-in-my-intellij",
    
    "relUrl": "/labs/lab02/faq/#theres-a-lot-of-red-in-my-intellij"
  },"41": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": " ",
    "url": "/labs/lab02/faq/",
    
    "relUrl": "/labs/lab02/faq/"
  },"42": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": "Where can I find all of the videos? . Insertion Sort Wrap-up: https://youtu.be/JtS5yGftYZ8 . Selection Sort Wrap-up: https://youtu.be/yZtvSYeTQi4 . HeapSort Introduction: https://www.youtube.com/watch?v=H5kAcmGOn4Q . HeapSort Wrap-up: https://youtu.be/WuuQqsDftGU . ",
    "url": "/labs/lab11/faq/",
    
    "relUrl": "/labs/lab11/faq/"
  },"43": {
    "doc": "FAQ - Lab10",
    "title": "FAQ - Lab10",
    "content": "I’m getting the error below, what should I do? . Test Failed! ------------ java.awt.HeadlessException: No X11 DISPLAY variable was set, or no headful library support was found, but this program performed an operation which requires it, . If you’re getting the error above in your testClearLines method, make sure that you’re not calling on renderBoard in the method or any method that uses the StdDraw library. The autograder does not have the capacity to render or display, so using the StdDraw library will cause an issue on the autograder. I’m trying to play the game, but the board shows up as black a screen. A common problem results from how runGame is structured. It might help to revisit the spec, where it goes over the details of runGame, specifically this portion: . | If the current tetromino is unable to move down or can no longer move from its current position, it is set to null. The logic for setting it to null has been taken care of for you and you do not need to work with it. | . In what instance would you want to spawn a piece? . Another issue is to ensure that you’re not clearing the board each time you render it in renderScore or any other parts of your implementation. For example, calling on StdDraw.clear in renderScore might clear the screen with a specific color each time the game tries to render the score. My game runs and my clear lines appears to work, but it doesn’t pass the autograder test. Instead of using the board instance variable, you’ll want to use the tiles variable/object that is passed into the clearLines method. The autograder is constructing its own kind of board and passing it in to test your clearLines method, so make sure that you’re referring to the correct variable! . ",
    "url": "/labs/lab10/faq/",
    
    "relUrl": "/labs/lab10/faq/"
  },"44": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": "I’m getting a “Generic array creation” error. Be sure to instantiate your buckets table with new Collection[size] or (Collection&lt;Node&gt;[]) new Object[size]! . Failing edge cases . The Bee class has some strange equals() and hashCode() implementations. If you’re stuck on this test, use the debugger to see what values are expected from the reference map, which is Java’s built-in HashMap. Walking through the expected behavior by hand may help as well. Some things to think about: . The reference map has some (maybe) unexpected behaviors. Why does the reference map behave the way it does (remember equals() and hashCode()!)? Does your map behave the same way? . I’m running into issues with resizing and getting “expected to be greater than [this value], but was [this value]”. For example, you might be seeing this error message: . expected to be greater than: 16 but was : 16 . If you’re running into this issue, a common problem is how the load factor is being calculated. The load factor can be calculated by dividing the total number of elements in the hashmap by the total number of buckets - both values are commonly stored as integers, but remember, the load factor is a double. How might Java’s integer division cause an issue? . ",
    "url": "/labs/lab07/faq/",
    
    "relUrl": "/labs/lab07/faq/"
  },"45": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": "Why does the root of an LLRB tree always need to be black (note: this only applies if we use colored nodes as our representation instead of links)? . Check out the LLRB Properties section in the spec. The root node could technically be colored red and considered to be a special case, but for consistency with the other nodes and LLRB tree properties, we choose to require that it is colored black. ",
    "url": "/labs/lab08/faq/",
    
    "relUrl": "/labs/lab08/faq/"
  },"46": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": "Student-Facing Setup FAQ Doc . Please take a look at the setup FAQ doc for additional setup assistance! . I can’t find the plugins for IntelliJ! . You likely installed the ultimate edition instead of the community edition. Make sure you have the community edition installed! . When I try to push, I get the error “failed to push some refs” . If you see a hint that says “Updates were rejected because the tip of your current branch was behind its remote counterpart”, then read this section of the Git WTFS. I set up SSH for GitHub, but I get the error “Connection timed out” . SSH only works on secure (password-protected) networks. If you’re connected to CalVisitor or another an insecure network, git commands that try to talk to GitHub will fail. To fix this, connect to eduroam or a secure WiFi network. Some students ran into an issue with “Support with password authentication was removed…” when cloning their personal repository. If cloning with https doesn’t work, please try using the ssh to clone instead: . git clone git@github.com:Berkeley-CS61B-Student/sp25-s***.git . curl: (35) schannel: next InitializeSecurityContext failed: Unknown error (0x80092012) - The revocation function was unable to check revocation for the certificate. Add the --ssl-no-revoke flag to the curl command (e.g. if the command was previously curl https://www.google.com, change it to curl --ssl-no-revoke https://www.google.com). WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED . At the bottom of the error, it should say Host key for [something] has changed.... If something is github.com or any of the instructional machines, then continue with this guide. Otherwise, please make a private question on Ed. To fix this error, run ssh-keygen -R [something], and replace [something] with what the error message contained. This generally means that the remote machine has changed its host keys. Please verify that the new host keys are correct if you do not trust the machine (GitHub host keys are available (here)[https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints]). On Gradescope, I’m missing required files . First, make sure that you’ve pushed your code! You can check this by viewing your repository on GitHub. Secondly, the expected file structure is . sp25-*** └── lab01 ├── src │ └── Arithmetic.java └── tests └── ArithmeticTest.java . Note that the files are inside the lab01 directory. If the files aren’t inside lab01, then the autograder won’t be able to find them. If you’re sure you’ve done the above correctly, you may have two copies of your sp25-s* folder (with differing locations on your computer). Be sure that the one in your terminal and the one in IntelliJ match, otherwise your changes won’t be recorded! You can see the current working directory of your terminal by running pwd. I’m using Mac, and I get “Unable to load Java Runtime Environment” . Run brew reinstall java, and look for the command that starts sudo ln, right under “For the system wrappers to find this JDK…”. Copy-paste and run that command. After this, your newly installed Java should appear in IntelliJ. In IntelliJ, when I open up Arithmetic.java, my import is grayed out at the top. In some cases, you might get something like this: . IntelliJ can be very weird - if you’ve already ensured that your library-sp25 is there (navigate to File –&gt; Project Structure –&gt; Libraries) to check everything seems okay), then try deleting the library, reimporting it and clicking “Apply”. Make sure to hit “OK” before exiting the window. ",
    "url": "/labs/lab01/faq/",
    
    "relUrl": "/labs/lab01/faq/"
  },"47": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": "Error relating to iterator . If you get this error: . java: bstmap.BSTMap is not abstract and does not override abstract method iterator() in java.lang.Iterable . You need to put the following method in your BSTMap: . public Iterator&lt;K&gt; iterator() { throw new UnsupportedOperationException(); } . Why does the BSTMap need this? It’s because the Map61B interface extends Iterable, which means that anything that implements Map61B must have the Iterable methods as well. Wrong size in treeTest . If you’re erroring on this line in treeTest: . assertThat(b.size()).isEqualTo(5) . Keep in mind that put doesn’t always add a new value to the tree. If put is called with an existing key, it should just update the value, which shouldn’t change the size. ",
    "url": "/labs/lab06/faq/",
    
    "relUrl": "/labs/lab06/faq/"
  },"48": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": "I’m running into StackOverFlowError, OutOfMemoryError or seeing that my assessment timed out on one of the tests. If you’re receiving a StackOverFlowError, it might imply that there is an infinite recursion happening somewhere in your implementation. Double check that you’re accounting for different cases correctly - for example, what should happen if you try to union two vertices within the same set? . ",
    "url": "/labs/disjoint-sets/faq/",
    
    "relUrl": "/labs/disjoint-sets/faq/"
  },"49": {
    "doc": "FAQ - Project 2A",
    "title": "Setup",
    "content": "I’m getting errors with imports e.g. Cannot resolve symbol 'spark', but already selected the library-fa24 files in IntelliJ. Per the spec: You should also go to the library-fa24 folder and run git pull to make sure you have all the library files you’ll need for this project. When adding libraries to your project, select ALL libraries in the library-fa24 directory (or, just import the directory as a whole). You may need to select all the .jar files individually when importing (don’t just select the entire folder). When I run main, I get a bunch of red lines as output, is something wrong? . Probably not—as long as the output says you successfully started the server, everything is working as expected. ",
    "url": "/projects/proj2a/faq/#setup",
    
    "relUrl": "/projects/proj2a/faq/#setup"
  },"50": {
    "doc": "FAQ - Project 2A",
    "title": "Getting Started",
    "content": "How can I test the server component? . The best way is to simply make a small change, load the server, and see what happens when you press the button on the website. If you have having issues with making the strings, consider printing them out in your “handle” methods. How should I account for if one year is absent in plus and divide? . For plus, just keep the fist year (basically add 0 to it). For divide, ignore the year (it should not be in your output). All my methods in NGramMap are getting really long and tough to debug, what should I do? . According to the spec, most of the work in this class should be done in the constructor. That means your job in the constructor is to parse the datafiles and get them into a nice form such that completing all the other methods will be easy. This class should remind you of PercolationStats in hw2. The constructor does a lot of work and the methods are relatively simple in comparison. Also, don’t forget to take advantage of abstractions. Remember the plus and divide methods you wrote for a TimeSeries? You might find some use for them here. If you ever find yourself iterating through the entries of a TimeSeries, ask youself if there is an easier way. ",
    "url": "/projects/proj2a/faq/#getting-started",
    
    "relUrl": "/projects/proj2a/faq/#getting-started"
  },"51": {
    "doc": "FAQ - Project 2A",
    "title": "Common Exceptions",
    "content": "Why do I receive a NumberFormatException when parsing a string to an int? . Integers can only be so large/small in Java due to their underlying bit representation (you’ll learn more about this in 61C!) If your string represents a number outside the valid integer range, a NumberFormatException is thrown. If you anticipate storing large numbers, it may be better to use a Double instead, which can store a wider range of values. Replication of AG Test manually do not give the same results/expectations as AG gives, what is the problem? . This might be related to edge cases or using the wrong datasets. Why do I get randomizedTest timeout errors while everything looks right? . Check your plus and divideBy methods. See if you have a nested for loop. You don’t need to have 2 for statements to have a nested for loop. Think about how you get years (by using which method) and see if you are calling any method on top of that method to get the specific year. ",
    "url": "/projects/proj2a/faq/#common-exceptions",
    
    "relUrl": "/projects/proj2a/faq/#common-exceptions"
  },"52": {
    "doc": "FAQ - Project 2A",
    "title": "Some other possible errors and reminders:",
    "content": ". | Bear in mind there is no complexity in handler methods. The complexity relis on NGramMap. Also remember to use correct method on your NGramMap. | If you are seeing issues in handler methods, check formatting! | Timeout might also be related to making many calls to weightHistory which is an expensive operation. You can take advantage of weightHistory(word, startYear, endYear). | . ",
    "url": "/projects/proj2a/faq/#some-other-possible-errors-and-reminders",
    
    "relUrl": "/projects/proj2a/faq/#some-other-possible-errors-and-reminders"
  },"53": {
    "doc": "FAQ - Project 2A",
    "title": "Getting “Your submission failed to complete on the test suite [TEST NAME]. You’re most likely using too much memory” in Gradescope.",
    "content": "This might be related to a glitch on Gradescope’s backend. Please post on Ed if that happens. ",
    "url": "/projects/proj2a/faq/#getting-your-submission-failed-to-complete-on-the-test-suite-test-name-youre-most-likely-using-too-much-memory-in-gradescope",
    
    "relUrl": "/projects/proj2a/faq/#getting-your-submission-failed-to-complete-on-the-test-suite-test-name-youre-most-likely-using-too-much-memory-in-gradescope"
  },"54": {
    "doc": "FAQ - Project 2A",
    "title": "Failing locally, passing on Gradescope",
    "content": "It might be related to how you implement your while loop when you are reading the file. Consider using isEmpty() instead of hasNextLine() for your check. ",
    "url": "/projects/proj2a/faq/#failing-locally-passing-on-gradescope",
    
    "relUrl": "/projects/proj2a/faq/#failing-locally-passing-on-gradescope"
  },"55": {
    "doc": "FAQ - Project 2A",
    "title": "FAQ - Project 2A",
    "content": "Course staff will continuously add to this page as you all ask questions about the project! If you have a question that isn’t answered here, ask in lab, OH, or on Ed! . Why are my results not the same as the staff solution? . Make sure you are using TOP_49887_WORDS_FILE and TOTAL_COUNTS_FILE. If you are using these files and you still don’t have the same output, then you likely have a logical error. Calling .years() in a loop . This might cause errors, please considner not calling .years() in a loop. I’m getting SLF4J: No SLF4J providers were found. error, what should I do? . It is fine if you get this error. Your code will still run but if they want to make the error disappear then you should pull in library-fa24 and reimport libraries. ",
    "url": "/projects/proj2a/faq/",
    
    "relUrl": "/projects/proj2a/faq/"
  },"56": {
    "doc": "FAQ - Project 1A: Linked List Deque 61B",
    "title": "FAQ - Project 1A: Linked List Deque 61B",
    "content": "I’m getting a “Required Type is Deque61B but provided is …” . There are two possible issues. Make sure you haven’t accidentally imported java.util.* (or java.util.LinkedList or java.util.ArrayList). The other possible issue comes with an issue in your class signature. Intellij is telling me “The method … of type LinkedListDeque61B has the same erasure as … of type Deque61B but does not override it.” . You probably forgot the generic T in the implements line of your class signature (i.e. you wrote implements Deque61B instead of implements Deque61B&lt;T&gt;). If you used something other than T for your generic type parameter, use that instead. Q: How do I make my arrows point to particular fields of a data structure? . In your diagram from lecture it looked like the arrows were able to point to the middle of an array or at specific fields of a node. A: Any time I drew an arrow in class that pointed at an object, the pointer was to the ENTIRE object, not a particular field of an object. In fact it is impossible for a reference to point to the fields of an object in Java. Q: What does OOB stand for? . Out of bounds. Q: My tests pass locally but Gradescope is telling me “NullPointerException: Cannot invoke java.lang.Iterable.iterator() because this.actual is null” . This may be caused by returning null in your toList method. Make sure that toList always returns an ArrayList, even if the Deque is empty. Q: I am receiving style error saying: “Class member field ‘val’ may not be public” . Try using class ClassName instead of public class ClassName . Make sure to use your Deque61B interface rather than java.util.Deque . Be sure to check that your keep package deque; when you are copying files. ",
    "url": "/projects/proj1a/faq/",
    
    "relUrl": "/projects/proj1a/faq/"
  },"57": {
    "doc": "FAQ",
    "title": "Setup",
    "content": "In IntelliJ, I get “release version 18 not supported” . Go into File &gt; Project Structure &gt; Project Settings &gt; Project, and make sure that your Language level is set to 17. Additionally, head over to Modules and make sure that the proj0 Language level is 17. ",
    "url": "/projects/proj0/faq/#setup",
    
    "relUrl": "/projects/proj0/faq/#setup"
  },"58": {
    "doc": "FAQ",
    "title": "Getting Started",
    "content": "This seems like a lot of code to write. How do we check along the way if we’re doing it correctly? . This is called testing! There are 2 main ways we can test our code: unit testing and acceptance / integration testing. Unit testing aims to test the individual pieces of code of your program—generally, individual methods. Acceptance / integration testing tests how your program as a whole works, including how classes interface with each other and how user input is handled. Here’s the section about testing in the spec. For this project, we have provided you all the tests we’ll use to grade the assignment. You’ll run these tests via JUnit. You can run each of the test classes in IntelliJ, and it will show you which tests pass or fail, including expected values vs. your actual output. This is very, very useful for debugging. A general workflow would be to take a look at the tests you’re failing, understand the expected values, compare them with your actual output, and use the debugger to walk through the test case if you’re stuck. You can even write your own tests, following the format of the provided ones! This is good practice as we’ll expect you to do this in later assignments (and you’ll have to write your own tests in the real world). Paraphrased from Shreyas Kallingal. ",
    "url": "/projects/proj0/faq/#getting-started",
    
    "relUrl": "/projects/proj0/faq/#getting-started"
  },"59": {
    "doc": "FAQ",
    "title": "TestAtLeastOneMoveExists",
    "content": "I pass everything in TestAtLeastOneMoveExists except for testAnyDir. If my code works for each direction, why would it break for any direction? . In this test, the relevant moves are on the border (specifically, the upper-right corner). If you are looping over the coordinates in the board, make sure that you are considering every possible comparison. For example, your boundary condition in the for loop may be off by one. ",
    "url": "/projects/proj0/faq/#testatleastonemoveexists",
    
    "relUrl": "/projects/proj0/faq/#testatleastonemoveexists"
  },"60": {
    "doc": "FAQ",
    "title": "tilt",
    "content": "I don’t know how to get started on tilt. Please watch Josh’s intro video to this method! However, the methods in the intro video might be different that current skeleton code since a lot changed. ",
    "url": "/projects/proj0/faq/#tilt",
    
    "relUrl": "/projects/proj0/faq/#tilt"
  },"61": {
    "doc": "FAQ",
    "title": "FAQ",
    "content": "Course staff will continuously add to this page as you all ask questions about the project! If you have a question that isn’t answered here, ask in lab, OH, or on Ed! . ",
    "url": "/projects/proj0/faq/",
    
    "relUrl": "/projects/proj0/faq/"
  },"62": {
    "doc": "FAQ - Project 2B",
    "title": "Setup",
    "content": "I’m getting an error that spark failed to ignite. This may indicate that some other process is already using Spark and hasn’t been terminated. Restarting your computer should fix this. I have a divergent branches error after trying the command git pull. Run git config pull.rebase false and pull again. I’m getting ‘Cannot invoke “ngordnet.ngrams.TimeSeries.years()” because “ILILILILIILILIILILIILIL” is null’ . Re-pull the libraries in library-fa24. I tried running git pull from library-fa24 but am still getting the above exception. Be sure you’ve re-imported the libraries in IntelliJ after getting the new library files. No matter what I do, the libraries still aren’t working! . Try deleting the library-fa24 entirely and re-cloning it. I’m getting Failed to bind to /0.0.0.0:4567 when running Main.java. Save your code and restart IntelliJ. If this doesn’t work, try restarting your computer as well. ",
    "url": "/projects/proj2b/faq/#setup",
    
    "relUrl": "/projects/proj2b/faq/#setup"
  },"63": {
    "doc": "FAQ - Project 2B",
    "title": "HyponymsHandler - Basic Case",
    "content": "I’m getting NullPointerException because object is null when iterator() is called. This is a really common issue. Whenever you are trying to iterate through an object with an enhanced-for loop, like this: for (&lt;Type&gt; element : elements){...} . If elements is null, you’ll get this error, because we can’t call iterator() on null. We recommend you check elements to ensure it isn’t null before iterating. I’m getting NullPointerException because the output of get is null. Recall that if the requested key is not found in the map, then get will return null. Another cause of this issue may be exploring the children of “sink” nodes (which don’t have any children). If k = 0, do I need to worry about startYear and endYear or whether the word exists in the ngrams dataset? . No, when k = 0, we don’t care at all about the ngrams data or the years provided. ",
    "url": "/projects/proj2b/faq/#hyponymshandler---basic-case",
    
    "relUrl": "/projects/proj2b/faq/#hyponymshandler---basic-case"
  },"64": {
    "doc": "FAQ - Project 2B",
    "title": "HyponymsHandler - Lists of Words",
    "content": "I’m getting timeout issues after 60000 ms, or the autograder tells me that I should make sure my code terminates on all inputs. Be sure you’re using the appropriate data structures - do we have to output duplicate words? Everywhere you can reasonably use a Set instead of a List, you’ll save some runtime. You should consider the runtime of List and Set functions as you use them. Also, make sure you have some way of accessing synsets associated with a given word in constant time. You also shouldn’t reconstruct the graph in each call to handle. My test is returning an empty list. If you’re using List.of() to build a list, make sure that your comma separations are outside quotes. List.of(\"one, two\") is a single element list with the word “one, two”. List.of(\"one\", \"two\") is a two element list with “one” and “two” separated. How do I tiebreak words with the same counts? . It doesn’t matter for this project - any behavior is acceptable. This means you can break ties alphabetically, or randomly, or not at all! . How should I store total popularity of words? . Think about what you have implemented in Proj 2A. TimeSeries values are doubles, not ints. If you store the integer counts, you might get integer overflow. ",
    "url": "/projects/proj2b/faq/#hyponymshandler---lists-of-words",
    
    "relUrl": "/projects/proj2b/faq/#hyponymshandler---lists-of-words"
  },"65": {
    "doc": "FAQ - Project 2B",
    "title": "FAQ - Project 2B",
    "content": " ",
    "url": "/projects/proj2b/faq/",
    
    "relUrl": "/projects/proj2b/faq/"
  },"66": {
    "doc": "FAQ - Project 1B: Array Deque 61B",
    "title": "FAQ - Project 1B: Array Deque 61B",
    "content": "I’m sure I wrote tests for coverage, but I’m not attaining those flags on the grader! . There’s a chance that when running your tests against the staff version of the code, we run into an assertion error. Make sure that all your assertion statements have the correct expected output! For instance, if you had code that called get(0) on an ArrayDeque61B with the elements 1, 2, 3, and asserted that the 0th element should be 2, any tests written after this incorrect test won’t count in the test coverage. When I call .get(0) on my ArrayDeque61B, I’m returning items[0], but not getting back the item I expect. What is going on? . Keep in mind that the front item of your Deque isn’t necessarily in position 0. For example, in the slides that provide a slides which provide suggested approaches for project 1 , I arbitrarily picked position 4 as the position where the front of the Deque starts. I’m getting a “Required Type is Deque but provided is …” . There are two possible issues. Make sure you haven’t accidentally imported java.util.* (or java.util.LinkedList or java.util.ArrayList). The other possible issue comes with an issue in your class signature. I keep seeing a “Cannot invoke java.lang.Integer.intValue() because the return value of ___ is null” error on Gradescope. This NullPointerException is likely caused by your addFirst or addLast methods. To test this for LinkedListDeque61B, we have given you a test called bigLLDeque61BTest() that does 1,000,000 addLast operations, followed by 500,000 removeFirsts and 500,000 removeLasts. To find the cause of this bug, try duplicating the test and doing 1,000,000 addFirst operations, as well as copying the entire test and writing an identical version that tests ArrayDeque61B as well. I’m getting an API error asking me to remove or make my isEmpty() method private. Currently our grader doesn’t recognize an implementation of isEmpty within ArrayDeque61B or LinkedListDeque61B. Please follow the spec and provide a default implementation within the Deque61B.java file. I can’t get Java to create an array of generic objects! . Use the strange syntax, i.e. T[] a = (T[]) new Object[1000];. Here, T is a generic type, it’s a placeholder for other Object types like “String” or “Integer”. When should my get() method return null? . You should return null if the index is larger than the size of your ArrayDeque61B, not the underlying array. For instance, if your underlying array has size 8, but your ArrayDeque61B has only called add thrice, then there are only 3 items and any index beyond 2 is out of bounds . What should get() return when there is nothing in the list? . Return null! . How do I handle overflow in the indices? . Think about using the modulo operator! . What should my toList() method do? . Your toList method should return a list with the elements in ArrayDeque61B and in the order that the elements were added (i.e. the “conceptual version of the Deque”). As a hint, make use of nextFirst and nextLast! Also, be sure to return only values added as elements into the Deque (don’t return null unless it was explicitly added as an element) . I’m having trouble with the constructor. What do I do with nextFirst and nextLast? . Take a look here (cs61b sp23 proj1B (ArrayDeque) slides). Keep in mind that it’s useful to start off nextLast greater than nextFirst but you can implement it however you choose to do so! . I’m getting a ExecutionTimeoutException during resizing. What’s going on? . Make sure you’re resizing using a multiplicative factor and not adding! . I’m getting an error when trying to @Override getRecursive() in ArrayDeque61B.java. Your Deque61B.java interface should not specify a method getRecursive() (that would be saying that every class that implements Deque61B.java should also implement getRecursive(), which is misleading.) Rather, Deque61B.java should not contain getRecursive(), and omit the @Override tag in your implementation in LinkedListDeque61B. ",
    "url": "/projects/proj1b/faq/",
    
    "relUrl": "/projects/proj1b/faq/"
  },"67": {
    "doc": "Homework 2: Percolation FAQ",
    "title": "FAQ",
    "content": "What should stddev() return if T equals 1? . The sample standard deviation is undefined. We recommend returning Double.NaN but we will not test this case. After the system has percolated, PercolationVisualizer colors in light blue all sites connected to open sites on the bottom (in addition to those connected to open sites on the top). Is this “backwash” acceptable? . While allowing backwash does not strictly conform to the Percolation API, it requires quite a bit of ingenuity to fix and it leads to only a small deduction if you don’t. How do I generate a site uniformly at random among all blocked sites for use in PercolationStats? . Pick a site at random (by using StdRandom or some other library to generate two integers between 0 (inclusive) and N (exclusive) and use this site if it is blocked; if not, repeat. I don’t get reliable timing information in PercolationStats when N = 200. What should I do? . Increase the size of N (say to 400, 800, and 1600), until the mean running time exceeds its standard deviation. I’m failing the Chi Squared test but passing everything else. The issue is that you’re using the same random seed for multiple simulations, and the statistical test is catching the fact that they are the same. If you look at the code for StdRandom, you’ll see that it sets the seed just once (the first time StdRandom is used), which prevents this issue of seed reset. In short, don’t set the seed yourself. Alternately, make sure you’re not generating biased random numbers. You should be using the StdRandom method that generates integers, not doubles. It’s telling me that my code reports “false” for percolates() but when I run the visualizer I’m getting true! . The visualizer does a very specific sequence of isOpen()/isFull()/percolates() calls. Try creating your own test that only opens sites and then calls percolates(). Alternately, disable all isOpen() and/or isFull() calls in the visualizer so you can focus on the percolates() behavior. Alternately, pay close attention to the test labeled Random Operation Order. My code is compiling on my computer but not on the autograder. Your code must obey the API exactly. You may not add additional public methods or variables to the Percolation class. When we test your PercolationStats, we use a reference version of Percolation instead of your version to avoid cascading errors – which means you can’t assume that any additional public methods are available. How do I choose which file to run? How do I pass command line/program arguments in IntelliJ? . First, navigate to Run -&gt; Edit Configurations. You can set up different debugging clients here to run different classes as your “main class” (meaning that the program will start and end with the “main” function inside of your main class). You can set up a new client with the small + sign on the upper left side - for the purposes of this class, you’ll only need to set up an Application. You can then name your configuration whatever you like, select the main class you want for that configuration, as well as set any command line/program arguments in the program arguments field. Input the program arguments into that field just like you would in the terminal - a single line with spaces separating the arguments. ",
    "url": "/homeworks/hw2/faq/#faq",
    
    "relUrl": "/homeworks/hw2/faq/#faq"
  },"68": {
    "doc": "Homework 2: Percolation FAQ",
    "title": "Homework 2: Percolation FAQ",
    "content": " ",
    "url": "/homeworks/hw2/faq/",
    
    "relUrl": "/homeworks/hw2/faq/"
  },"69": {
    "doc": "Coverage Tests - Project 1B: Array Deque 61B",
    "title": "Coverage Tests - Project 1B: Array Deque 61B",
    "content": "Flags for add tests . | add_first_from_empty: Check that addFirst works on an empty deque. | add_last_from_empty: Check that addLast works on an empty deque. | add_first_nonempty: Check that addFirst works on a non-empty deque. | add_last_nonempty: Check that addLast works on a non-empty deque. | add_first_trigger_resize: Check that addFirst works when called on a full underlying array | add_last_trigger_resize: Check that addLast works when called on a full underlying array | . Flags for add after remove tests . | add_first_after_remove_to_empty: Add some elements to a deque and remove them all, then check that addFirst still works. | add_last_after_remove_to_empty: Add some elements to a deque and remove them all, then check that addLast still works. | . Flags for remove Tests . | remove_first: Check that removeFirst works. | remove_last: Check that removeLast works. | remove_first_to_empty: Add some elements to a deque and remove almost all of them. Check that removing the last element with removeFirst works. | remove_last_to_empty: Add some elements to a deque and remove almost all of them. Check that removing the last element with removeLast works. | remove_first_to_one: Add some elements to a deque and remove almost all of them. Check that removing the second to last element with removeFirst works. | remove_last_to_one: Add some elements to a deque and remove almost all of them. Check that removing the second to last element with removeLast works. | remove_first_trigger_resize: Called when usage factor is &lt;= 25% and array size &gt; 8. Checks that the array resizes appropriately. | remove_last_trigger_resize: Called when usage factor is &lt;= 25% and array size &gt; 8. Checks that the array resizes appropriately. | . Flags for get Tests . | get_valid: Check that get works on a valid index. | get_oob_large: Check that get works on a large, out of bounds index. | get_oob_neg: Check that get works on a negative index. | . Flags for size tests . | size: Check that size works. | size_after_remove_to_empty: Add some elements to a deque and remove them all, then check that size still works. | size_after_remove_from_empty: Remove from an empty deque, then check that size still works. | . Flags for isEmpty Tests . | is_empty_true: Check that size works on an empty deque. | is_empty_false: Check that size works on a non- empty deque. | . Flags for toList tests . | to_list_empty: Check that toList works with empty ArrayDeque. | to_list_nonempty: Check that toList works with non-empty ArrayDeque. | . Flags for advanced resize tests . | resize_up_and_resize_down: Trigger a resize up and then a resize down in the same test. | . Flags for Maximizer61B tests . | max_default: Check that max function works when not providing a comparator | max_different_comp: Check the max function works when providing a comparator | max_empty: Check the max function works on an empty iterable | max_nonempty: Check the max function works on a nonempty iterable | . ",
    "url": "/projects/proj1b/flags/",
    
    "relUrl": "/projects/proj1b/flags/"
  },"70": {
    "doc": "Coverage Tests - Project 1A: Linked List Deque 61B",
    "title": "Coverage Tests - Project 1A: Linked List Deque 61B",
    "content": "Flags for add tests . | “add_first_from_empty”: Check that addFirst works on an empty deque. | “add_last_from_empty”: Check that addLast works on an empty deque. | “add_first_nonempty”: Check that addFirst works on a non-empty deque. | “add_last_nonempty”: Check that addLast works on a non-empty deque. | . Flags for add after remove tests . | “add_first_after_remove_to_empty”: Add some elements to a deque and remove them all, then check that addFirst still works. | “add_last_after_remove_to_empty”: Add some elements to a deque and remove them all, then check that addLast still works. | . Flags for remove tests . | “remove_first”: Check that removeFirst works. | “remove_last”: Check that removeLast works. | “remove_first_to_empty”: Add some elements to a deque and remove almost all of them. Check that removing the last element with removeFirst works. | “remove_last_to_empty”: Add some elements to a deque and remove almost all of them. Check that removing the last element with removeLast works. | “remove_first_to_one”: Add some elements to a deque and remove almost all of them. Check that removing the second to last element with removeFirst works. | “remove_last_to_one”: Add some elements to a deque and remove almost all of them. Check that removing the second to last element with removeLast works. | . Flags for get tests . | “get_valid”: Check that get works on a valid index. | “get_oob_large”: Check that get works on a large, out of bounds index. | “get_oob_neg”: Check that get works on a negative index. | “get_recursive_valid”: Check that getRecursive works on a valid index. | “get_recursive_oob_large”: Check that getRecursive works on a large, out of bounds index. | “get_recursive_oob_neg”: Check that getRecursive works on a negative index. | . Flags for size tests . | “size”: Check that size works. | “size_after_remove_to_empty”: Add some elements to a deque and remove them all, then check that size still works. | “size_after_remove_from_empty”: Remove from an empty deque, then check that size still works. | . Flags for isEmpty tests . | “is_empty_true”: Check that isEmpty works on an empty deque. | “is_empty_false”: Check that isEmpty works on a non-empty deque. | . Flags for toList tests . | “to_list_empty”: Check that toList works with empty LinkedListDeque61B. | “to_list_nonempty”: Check that toList works with non-empty LinkedListDeque61B. | . ",
    "url": "/projects/proj1a/flags/",
    
    "relUrl": "/projects/proj1a/flags/"
  },"71": {
    "doc": "Project 0: 2048 (Hard Mode)",
    "title": "Hard Mode Project",
    "content": "This is the hardmode version of this project. You will have to come up with your own design rather than following a sequence of suggested design steps (as in the standard version). There is no extra credit for the hard mode version. ",
    "url": "/projects/proj0/hardmode/#hard-mode-project",
    
    "relUrl": "/projects/proj0/hardmode/#hard-mode-project"
  },"72": {
    "doc": "Project 0: 2048 (Hard Mode)",
    "title": "FAQ",
    "content": "Each assignment will have an FAQ linked at the top. You can also access it by adding /faq to the end of the URL. The FAQ for Project 0 is located here. Note that this project has limited submission tokens. Please see Submission and Grading for more details. ",
    "url": "/projects/proj0/hardmode/#faq",
    
    "relUrl": "/projects/proj0/hardmode/#faq"
  },"73": {
    "doc": "Project 0: 2048 (Hard Mode)",
    "title": "Overview",
    "content": "Prerequisites: . | Lab 1 (required for setup) | HW0A (recommended, for Java syntax) | HW0B (recommended, for Java syntax) | Lectures 1-2 | 61B Style Guide (we are checking your style in autograder!) | Lab 2 (optional but recommended prerequisite - helpful for debugging) | . In this mini-project, you’ll get some practice with Java by creating a playable game of 2048. We’ve already implemented the graphics and user interaction code for you, so your job is to implement the logic of the game. Note: This version of the project is much more straightforward than previous offerings of this project. If you find online resources (e.g. videos) from previous semesters of 61B, they do not apply to this version of the project. If you’re not familiar with 2048, you can try out a demo at this link. There’s a lot of starter code that uses Java syntax that you might not have seen before, but it’ll be OK! In the real world, you’ll often work with codebases that you don’t fully understand. Ideally, the system is designed in a modular way so that someone working on one part of the system doesn’t need to know the details of the rest of the system. In fact, for this project, we’ve set everything up so that you don’t need to open any of the files except for GameLogic.java, though you’re welcome to browse. Using Git . It is important that you commit work to your repository at frequent intervals. Version control is a powerful tool for saving yourself when you mess something up or your dog eats your project, but you must use it regularly if it is to be of any use. Feel free to commit every 15 minutes; Git only saves what has changed, even though it acts as if it takes a snapshot of your entire project. The command git status will tell you what files you have modified, removed, or possibly added since the last commit. It will also tell you how much you have not yet sent to your GitHub repository. The typical commands would look something like this: . git status # To see what needs to be added or committed. git add &lt;file or folder path&gt; # To add, or stage, any modified files. git commit -m \"Commit message\" # To commit changes. Use a descriptive message. git push origin main # Reflect your local changes on GitHub so Gradescope can see them. Then you can carry on working on the project until you’re ready to commit and push again, in which case you’ll repeat the above. It is in your best interest to get into the habit of committing frequently with informative commit messages so that in the case that you need to revert back to an old version of code, it is not only possible, but easy. We suggest you commit every time you add a significant portion of code or reach some milestone (passing a new test, for example). 2048 Rules: Basic Rules . 2048 is played on a grid of squares. Each square can either be empty or contain a numbered tile. The player chooses a direction (using the arrow keys) to tilt the board: north, south, east, or west. All tiles slide in that direction until there is no empty space left in the direction of motion. As a tile slides, it can possibly merge with another tile with the same number. You’ll implement this in Tasks 2-7. Each time two tiles merge to form a larger tile, the player earns the number of points on the new tile. We’ve implemented the score tracking already. One tile (with value 2 or 4) is randomly generated when the game begins. After each tilt, a single randomly generated tile will be added to the board on an empty square. Note that if the tilt did not change the board state, then no new tiles will be randomly generated. Your code will not be adding any new tiles! We’ve already done this part for you. The game ends when the current player has no available moves (no tilt can change the board), or a move forms a square containing 2048. If you would like to try the game out yourself, feel free to try it here. ",
    "url": "/projects/proj0/hardmode/#overview",
    
    "relUrl": "/projects/proj0/hardmode/#overview"
  },"74": {
    "doc": "Project 0: 2048 (Hard Mode)",
    "title": "Setup",
    "content": "Getting the Skeleton Files . Follow the instructions in the Assignment Workflow Guide to get the skeleton code and open it in IntelliJ. For this hard mode version of project 0, we will be working in the proj0_hardmode/ directory. If you get some sort of error, STOP and either figure it out by carefully reading the git WTFs or seek help at OH or Ed. You’ll save yourself a lot of trouble vs. guess-and-check with git commands. If you find yourself trying to use commands recommended by Google like force push, don’t. Don’t use git push -f, even if a post you found on Stack Overflow says to do it! . If you can’t get Git to work, watch this video as a last resort to submit your work. File Structure . The proj0_hardmode folder is separated into two packages, game2048logic and game2048rendering. Though we won’t talk about them too much in 61B, packages are a way to organize code into different folders. For example, all the code for the graphics is in the game2048rendering package, and all the code for the game logic is in the game2048logic package. You can see this in the file structure below: . proj0_hardmode ├── game2048logic | ├── GameLogic.java | ├── MatrixUtils.java ├── game2048rendering ├── Board.java ... (some other files) ... ├── Main.java ├── Side.java ├── Tile.java . For the entirety of this project, you will only need to read and modify the game2048logic/GameLogic.java file. Changes to other files will not be recognized by Gradescope. There’s no need to read any of the code in game2048rendering, though you’re welcome to if you’d like. Running the Game . You can run your game by running the Main.java file in the game2048rendering package. You can do this by right-clicking the file and selecting “Run ‘Main.main()’”: . If everything is set up properly, you should get something like the following image: . Right now, your game won’t do anything when you press the arrow keys, but by the end of this project, you’ll have a fully functioning 2048 implementation! . ",
    "url": "/projects/proj0/hardmode/#setup",
    
    "relUrl": "/projects/proj0/hardmode/#setup"
  },"75": {
    "doc": "Project 0: 2048 (Hard Mode)",
    "title": "Task 1: Understanding Tilts",
    "content": "In this project, you’ll implement the logic that tilts the board. Rules: Tilting . The animation above shows a few tilt operations. Here are the full rules for when merges occur that are shown in the image above. | Two tiles of the same value merge into one tile containing double the initial number. | A tile that is the result of a merge will not merge again on that tilt. For example, if we have [X, 2, 2, 4], where X represents an empty space, and we move the tiles to the left, we should end up with [4, 4, X, X], not [8, X, X, X]. This is because the leftmost 4 was already part of a merge so it should not merge again. | When three adjacent tiles in the direction of motion have the same number, then the leading two tiles in the direction of motion merge, and the trailing tile does not. For example, if we have [X, 2, 2, 2] and move tiles left, we should end up with [4, 2, X, X] not [2, 4, X, X]. | . As a corollary of these rules, if there are four adjacent tiles with the same number in the direction of motion, they form two merged tiles. For example, if we have [4, 4, 4, 4], then if we move to the left, we end up with [8, 8, X, X]. This is because the leading two tiles will be merged as a result of rule 3, then the trailing two tiles will be merged, but because of rule 2 these merged tiles (8 in our example) will not merge themselves on that tilt. You’ll find applications of each of the 3 rules listed above in the animated GIF above, so watch through it a few times to get a good understanding of these rules. Tilting Rules Quiz . Your task: complete this optional Google Form quiz to check your understanding of the tilting rules. This quiz (and this task) is not part of your 61B course grade. ",
    "url": "/projects/proj0/hardmode/#task-1-understanding-tilts",
    
    "relUrl": "/projects/proj0/hardmode/#task-1-understanding-tilts"
  },"76": {
    "doc": "Project 0: 2048 (Hard Mode)",
    "title": "Task 2: Implementing Tilt",
    "content": "Now that you understand the rules, it’s time to write the code that implements them. Open GameLogic.java and fill in the void tilt(int[][] board, Side side) method. Implementing tilt is surprisingly challenging. We have to account for four different possible directions, three different merging rules, etc. Computer science is essentially about one thing: managing complexity. In order to implement this complicated functionality, we need to break the problem into smaller pieces and tackle them one at a time. This hard mode version of the project will give you a chance to try to deconstruct the problem into smaller pieces. If you get stuck, feel free to consult the standard mode version of the project. Tip: Avoid repetitive code. If you find yourself writing long blocks of code that are similar except invoilve different directions, you’re doing someting wrong, . Testing and Debugging . To test your method, run the tests in TestGameLogic.java. If your implementation is correct, all tests should pass. Note that each test in TestGameLogic.java provides a large number of example input/output pairs, which can be helpful for debugging or design planning. For example, the code below shows what happens if you tilt towards Side.NORTH with the given board. public void testUpAdjacentNoMerge() { int[][] board = new int[][]{ {0, 0, 0, 0}, {0, 0, 4, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}, }; GameLogic.tilt(board, Side.NORTH); int[][] expected = new int[][]{ {0, 0, 4, 0}, {0, 0, 2, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, }; . ",
    "url": "/projects/proj0/hardmode/#task-2-implementing-tilt",
    
    "relUrl": "/projects/proj0/hardmode/#task-2-implementing-tilt"
  },"77": {
    "doc": "Project 0: 2048 (Hard Mode)",
    "title": "Playing the Game",
    "content": "Now that you’ve implemented the logic for the game, you can play the game by running Main.java! . Note: If you haven’t passed all of the tests, the game may behave strangely or crash. ",
    "url": "/projects/proj0/hardmode/#playing-the-game",
    
    "relUrl": "/projects/proj0/hardmode/#playing-the-game"
  },"78": {
    "doc": "Project 0: 2048 (Hard Mode)",
    "title": "Style",
    "content": "Starting with this project, we will be enforcing style. You must follow the style guide, or you will be penalized on the autograder. You can and should check your style locally with the CS 61B plugin. We will not remove the velocity limit for failing to check style. ",
    "url": "/projects/proj0/hardmode/#style",
    
    "relUrl": "/projects/proj0/hardmode/#style"
  },"79": {
    "doc": "Project 0: 2048 (Hard Mode)",
    "title": "Submission and Grading",
    "content": "We will not remove the velocity limit for failing to submit the correct files because you didn’t add, commit, or push. You have been warned. Velocity Limiting . For this project we will be limiting the number of times you can submit your code to the autograder. You will get 4 submission “tokens” that each regenerate after 24 hours. Grading Overview . Your code will be graded based on whether it passes the tests we provided. There are no hidden tests; the score you see on Gradescope is your score for this project. Gradescope will only grade your GameLogic.java file. If you edit any other files, your edits will not be recognized, so don’t edit any other files. Once you’ve pushed your code to GitHub (i.e. you’ve run git push), then you may go to Gradescope, find the proj0 assignment, and submit the code there. Keep in mind that the version of code that Gradescope uses is the most recent commit you’ve pushed, so if you do not run git push before you submit on Gradescope, old code will be tested instead of the most recent code you have on your computer. There are no hidden tests. The score you see on Gradescope is your score for this project. ",
    "url": "/projects/proj0/hardmode/#submission-and-grading",
    
    "relUrl": "/projects/proj0/hardmode/#submission-and-grading"
  },"80": {
    "doc": "Project 0: 2048 (Hard Mode)",
    "title": "Project 0: 2048 (Hard Mode)",
    "content": "Deadline: Monday, February 3rd, 11:59 PM PT. ",
    "url": "/projects/proj0/hardmode/",
    
    "relUrl": "/projects/proj0/hardmode/"
  },"81": {
    "doc": "Incident Reports from Spring 2017",
    "title": "Incident Reports from Spring 2017",
    "content": "During the Spring 2017 semester, students caught for plagiarism were able to submit incident reports in exchange for reduced consequences. Below are collected some (but not all) of those reports. Almost all of the text given is original, though some reports have been edited slightly for clarity and anonymity. Going to Cal, everyone can appreciate the difficulty and burden students have to take on to keep up with the never-ending workload while maintaining other aspects of their lives (i.e., clubs, friends, work). You may be tempted to copy your friends code: DON’T! You will likely get caught. Josh Hug and the 61b TA’s work incredibly hard to give you appropriate support (at homework parties and through Piazza), so take advantage of those rather than a friend’s code. Not only is cheating ethically wrong, but you feel like shit after you do it. Most likely, you could’ve avoided cheating by starting the project earlier or prioritizing your time differently, so you constantly regret your choice. The cs department is so generous for presenting me with the restitution process; but, even if I earn all the points back and walk away with a fine grade in the class, I will have an academic warning looming over my head for the rest of my college career; I can assure you, it is not a welcome feeling. tl;dr: Cheating is a tempting choice when all your classes are demanding, but don’t give in because it is ethically wrong and you’re really just screwing yourself. If you get caught, your life will SUCK! . I am writing this incident report because I collaborated too closely with my roommates on this project. If we had just simply helped each other out by explaining concepts and small specific functions of our code, we would have abided rightfully by the course’s code of conduct. Instead we looked at each other’s code which led us down the morally wrong path of plagiarism. I am 100% responsible for my actions and I feel like the consequences are extremely fair considering the gravity of plagiarism. I have definitely learned my lesson and will pay recompense for my actions by completing this project, effectively taking away from my ability to study for finals. I am okay with this because punishments like this instill a strong code of ethics without derailing someone’s life. I just wanted to apologize to the staff, who put in so much work trying to give us help so that we would not have to resort to cheating and to my fellow classmates who obviously put a lot of work into this course in order to achieve their dreams. This semester has been particularly stressful for me in terms of academics as I decided to take on a new extracurricular commitment that practically eliminated any time I had to focus on my classes, especially more so towards the end of the semester. Obviously, this shouldn’t justify any sort of code-copying, but I think my logic was that since I wasn’t necessarily being a lazy student, it was okay for me to ask for help on the project. I think the stress surrounding declaring the Computer Science major in the College of Letters &amp; Sciences is very well known, and that was definitely one of the reasons I felt so much pressure to complete assignments. I am an out-of-state student, and while I?m lucky to have parents who saved money to pay for my tuition, they have expressed before that they are only willing to pay for my college if I get a CS degree, which wouldn’t happen if I fail to declare the major. The friend who I asked for help saw how stressed I was about potentially having to transfer schools at the end of the year, so I think he was more negligent about answering the questions I asked about the project. I am not a CS/EECS major. But, I took CS61B in the fall P/NP just to get touch of CS. I struggled a lot and couldn’t pass the class. Later, I took in the spring as a letter grade and promised myself that I would get A. I was doing good with my CS61B class until the 2nd project was released. I tried so hard on that project, but managed to get very low score. I felt very sad and discouraged. I spent the whole week working on it until 3am in the morning. I sacrificed assignments for other classes which were my major requirement just to get proj2 done. My interest in CS61B declined. Then, I started Proj 3 little late. So, I was struggling to get it done. I was already working late nights for 4/5 days. My codes did not work no matter how hard I try. So, one night as I was struggling, after trying to get help from internet failed, I asked one of my friend to help me. I asked if he can send me his code. He denied first and but I kept on insisting and convinced him that I would not copy his code. Finally he send me his code and I started looking through to get some ideas. My initial intention was just to get the idea and to compare his code with my code so that I can find errors. But, his code was way different than my code and I was struggling to just understand his code. It was past midnight and I failed to make a conscious decision. Already failed CS61B one time, and already enough tortured from proj2, I didn’t want to get tortured from proj3 further. So, I burrowed some of his code and modified into mine. I extremely regret about my action. I had no coding experience when I took CS 61A in my first semester. On a personal level, that was a very bad decision because I had a very hard time in that class and spent a disproportionate amount of time in it and my GPA suffered as a result. Because of this, I began to feel that I was not very good at coding because I struggled a lot in that class. Not being good at coding became drilled into my mind. Fast forward to taking CS 61B, I decided that I would try even harder in order to be good at coding. I even did well until project 2, but the scale of that project was too much for me and I struggled a lot at it and did not complete it in time. Again I felt that I was just not good at coding, or good enough to be doing it at Berkeley in the 61 series. This was a big problem for my self esteem and my coding ability because convincing myself that I couldn’t code lead me to cutting corners for project 3 when the deadline was coming up. I honestly never thought I would be in this kind of situation. Even when I am extremely busy, I’m usually able to maximize my time and complete everything to my standards. The week that Project 3 was due, however, was insanely bad for me–along with rising family issues, I had midterms in almost all of my classes and my extracurricular activities picked up on workload, and as a result my progress on Project 3 was pushed back. I even considered emailing my TA and/or Josh Hug for an extension, but feeling like it was unlikely, I reached out to a friend for help instead. My friend not only helped me start off with a design, but also gave me specific examples of how he/she implemented something whenever I got stuck on a certain part. I never wanted to plagiarize, but with all of the resources that I was given, it was difficult to stray from those ideas and create something entirely on my own. By the time I completed the project, I realized it was extremely similar to my friend’s, but since it was already a late submission I decided to turn it in anyway. I realized that I can’t push off projects in CS61B because they take time to just understand and plan out; I need to devote a solid block of time for 61B in order to succeed, rather than just working on it when I have time between my other schedules. Last month, I copied a portion of code (GraphDB) in project 3 due to time constraints and pressure. During this time, I was facing a large amount of pressure from multiple classes, and frustrated by the fact that I had made it so far in the project but was repeatedly stymied by this part, I asked my floor mate to see his code, and upon his agreement, essentially copied his code structure almost word for word onto mine. I know there’s no excuse for what I’ve done, and hope that this is chance for a much-needed wake up call for me and a way for me to learn from my mistakes and grow. I will certainly never do something of the kind again; I recognize that by doing so I did something totally at odds with the principles of UC Berkeley and the CS department and potentially jeopardised my personal future as well as his. Again, I can offer nothing but my sincerest apologies as well as a promise that something like this will never happen again. So as most other people, I did not go into the project intending to use someone else’s code. I had been working on this project for a good amount of hours and had finished the first part but just could not get the second part, no matter what I tried. I had a friend of mine who had already finished the project come over to help and he did help me a lot, but I still just couldn’t get it to work and pass the autograder test. This was a day before the project was due so I figured I would try again the next day. So here comes the next day and I still can not figure out what to do on this project and it being one of the first projects I became really worried about not getting these points and doing poorly in the class. I was really stressed so, but I kept on trying and then I learned that there was a 24 hour grace period so I figured I could do it the next day. At this point I was in possession of someone else’s code, but I did not want to directly steal from it so I kept on trying and used theirs as a guide. Slowly I ended up mimicking their code out of desperation to get the points, but I still could not get the full points. I was determined to not copy their code directly, so I decided I would stick with the lower autograder score I got. So now the project is past due for 2 days, but we only lost 10% for each day it was late, I thought about how if I got full credit with 10% of the points deducted I could still get more points than I originally had, and I was really worried about how this project would affect my 61b grade, so I went back to the code and copied it so I could get those points. This class is extremely challenging and fast paced. Coding is definetly not my skill. In the beginning of the semester, I was plagued with increasing pressure of classes and clubs and enrollment Being from another country this system was extremely challenging and the course started on an incredibly fast pace. I would sit with a group of my friends and we would discuss the solutions and on the first part I did have concepts that were discussed together. Never did I electronically exchange code but I did take help because the course was not to my liking. Now, I have discovered CS is not my thing and have moved on. This course starts quick and I did not anticiapte the workload it entails. This incident came to light and I immediately realized that I had crossed the line and promised not to cross the line again. This was a wake up call and an ample reminder about the workload that an CS course entails. The event was out of desperation and my lazyness of not catching up on time. It is fast paced and requires constant work . So apparently this is going to be shared with future students, so they do no repeat our mistakes. For future students: . If I were you, which I’m not and never will be, I would take note of the following: . 1) Start projects the day they are assigned. Even if this is just filling in your API and method signatures, it is good to start thinking about where you’re going with it. 2) It is easy to get copied code that works. That being said, it is hard not to submit it at 11:58 pm, just before the deadline. 3) Work in the vicinity of other CS people. I’m not saying you should go to office hours to do your homework, but going to a study session with your friends in English Lit. may not be the best avenue of approach. 4) Work on CS every day if you can. This includes writing one or two tests, or maybe writing some code on a napkin at Croads to try out later. ///////////////////// . As far as the system for dealing with this kind of incident: . A) As far as my case went, I had my own code which was nearly complete but required more debugging and editing than I had time for. I would have welcomed the option to return to my original code and finish my version of it. This being said, I realize that not everyone puts in a lot of honest effort before turning to contraband code, so I understand that this is not really feasible in the real world. It seemed it was the best option for me at the time, but at the end, I realized that it was indeed the worst choice I have ever made in my life. First of all, I regret what I did on the last project. Just like other thousands of students, especially students who are looking toward to majoring in CS, I had tons of workload. When projects are assigned, I had to bear the time-pressure. Taking a deduction on the project seemed like I would not be able to declare major because of the harsh gap cap, and yes, I plagiarized my peer’s code. I deeply regret again and again. I should have managed my time, and start the project even earlier than I did. To be honest, when Professor Hug said there is a way to detect plagiarism, I did not believe it. I believed there is no way to detect code similarity. I mean, how is that even possible. At the end, only regret remains. If I did my own work and did not pretend, this incident would not have happened. From now on, I will be honest to myself, and do the given work diligently. Also, I will stop my friends whenever they are tempted to plagiarize others’ work. When you are in a situation where you could be doing very well ? your midterm grades were good, you had plenty of time and inspiration ? you are still not free from the temptations of an easy project. The motives are certainly different. I simply gave into the pressures of my project partners, who had obtained illegitimate access to project answers. While I was fully capable of doing the project, and they were fully capable of completing the projects as well, we ended up making the great mistake of cheating without reason. Perhaps if you analyzed the situation very carefully, you could suspect that perhaps we wanted the fame of finishing first or having an optimal solution, but we could have completed the project in the same period without resorting to the means which we took. But while in this case, we did not benefit very much from our actions, there were some very important repercussions. First, while we arguably did not lose out on that much learning or cause harm to other groups in this case, this scenario did bring out the underlying darkness in our motives. We cheated because we were lazy, selfish, not that we were struggling or failing. This comes at a great detriment as what we did could indicate flaws in our character that may indicate terrible self-serving motives in the future. Even under circumstances where the harm seems quite low, and the benefits are also marginal, some people may argue that the incident could be ignored, or forgotten. In addition, constantly bringing it up could serve as a catalyst for future cheating, since people may find glory or humor in the situation in this round of cheating. However, it is important that people think carefully about the darker implications of our actions. In the future, one line of code could be important intellectual property, leading to millions or even billion of dollars of loss. Seemingly small actions could lead to the devastation of many people, when companies are forced to shut down due to the cost of losing intellectual property or lawsuits. Such actions, though seemingly trivial in terms of the reduction of work, does not necessarily mean it comes at a trivial cost. In addition, while it is quite unlikely that one line of code could devastate everything, one could see how it would become more likely if everyone contributed one line of code. That is, everyone worked with the same mindset, copying off others who devote more time and effort to reduce their own work. The perpetuation of such greed only degrades society. Second, from a personal viewpoint, I don?t think it?s ok to cheat. I don?t think having the mindset that everything is under your own person control is good. I find it very important that people respect each other to the greatest extent. The greatest difference is a mutual accomplishment versus a cutthroat and heatless competition. Now, I won?t disagree that a little competition forces each other to perform beyond their normal capacities, but when you begin to think that you are entitled to everything, that you are absolutely the best, things become much worse. At some point, you are no longer trying to improve yourself, but instead trying to make everyone else worse. This is important because from a utilitarian perspective (which I disagree with), the net benefit from this competition actually decreases. From my perspective, individual devotion, passion, is more important than utilitarian success, and when everyone is excited for a positive purpose, we can actually create something /we think is/ great for everyone. And everyone is having fun while doing it. So back on the topic of cheating, if you don?t really have a reason to do it except for the lolz, don?t do it. Although it may be funny in the short term, think about the long term implications on what it means about you and what you prioritize. If you are actually doing poorly in the class, don?t wait until you are caught for cheating to realize how much support the staff and professor provide for the class. They care a lot more than you think, even for cheaters. And most importantly remember that your goal is not necessarily to make the most money or have the most power, but to create with all your passion something that improves the world. The Berkeley experience has its ups and downs and certainly it is very easy to succumb to the pressure and find a way out. While going through the process of finding the right club for yourself and trying to find your community at Berkeley it is easy to let academics take a back seat. That was the mistake I made, and it came to bite me pretty soon when I was falling behind in the class. I was baffled and asked one of my friends to help, which they did, but I went a little beyond what was admissable because I didn’t know much of the material. Even though I did end up learning whatever the class required me to learn at that point, what is wrong is wrong. In the end it is all about making the wrong choices in the wrong time - under pressure. If I could go back and change something, I would get an early start on all of my assignments so that I don’t have to worry about things piling up in the end. I did that throughout the rest of the semester and it truly does wonders and helps ease out the pain of the Berkeley life. During this semester, I had been dealing with serious anxiety attacks. I was already behind when I heard a family member passed away. During the time for the funeral, I was unable to work on the project. By the time I was back, the project was due the next day. I applied for an extension of a few days, seriously underestimating the amount of work and issues I would have with the project. It didn’t help that the deadline went over a weekend, and I could get little help. But these are all excuses. I suppose I tried to rationalize that I was only reading code to get the structure or idea of how it worked out of it, but I still felt crummy about it. Truth is, I should have trusted my gut and asked for another deadline. Why didn’t I? It seems so easy in retrospect, but to me the staff of 61B seemed difficult to approach, and I doubted my odds of success. However, I now realize that it would have been much better to have taken a worse grade, even if they denied my extension request. But if you are at all hesitant, ask. It will always work out better. The reason I ended up plagiarizing someone else’s work was a pure mistake but still a huge mistake that I made. At that time, I was confused with what was known to be working together and what is copying. I thought that by working together, it would be okay to have the similar code. However, through this I realized that working together simply means conversing with one another on how the code is going to be implemented and your ideas rather than going through the code step by step. At this time, I was pressured against time. The day my assignment was due, was the day I had to be somewhere by early afternoon. It was too late for me to cancel on that appointment and to be able to get a refund. The event itself was also very important to me and was a chance that I believed would never come again. As a result, I ended up trying to work together with my friend but I ended up making a huge mistake. Through this, I reflected a lot. I realized that I should never try to trick myself into making spur of the moment decisions. I also came to realize that through this, I will start my assignments even earlier than I did this semester. I will also never put myself in a position where I make horrible decisions that affect my future. I am truly sorry and I sincerely hope that no one will go through the same emotion rollercoaster that I recently went through. I was academically dishonest for part 2 of project 3. I have been pledging an intense fraternity this whole semester and was the pledge class president. Since my major is EECS, I found it very hard to get enough sleep / do all my work / do all the fraternity stuff. I had completed the majority of project 3 on my own and had gotten 50/75 points when I hit a wall with part 2. I had trouble understanding what exactly I was supposed to do. I waited until the last day to start working on part 2, and with the deadline approaching that night and a lot of other things I still had to do, I asked my friend to go through his solution to part 2 with me so I could understand how to approach it. Instead of coming up with my own way of solving it, I ended up approaching it the same exact way he did and therefore my code for part 2 resembles his beyond what is acceptable. I felt really guilty when I did it, and I regret doing it so much, as it only gave me 25 extra points on the project. I should have just been happy with a 50/75. Overall I really wish I could take this course again as I believe I could get a B+ / A- if I could focus on the class as much as I would have liked to. I came into CS 61B without having a single thought or intention of cheating on an assignment/project/exam. Most people probably don’t. But it’s easy to share code with somebody, to show them how to implement a particular method, or something of the sort. 61B is a hard class. Everyone talks about it. I was personally very scared of project 2. It’s that huge project in the middle of the semester. For us, the project was the database project, where we create a database system. So here’s what happened to me. I came back from a midterm, and had mounds of problem sets to do, with deadlines pressed against each other. I decided to take a crack at the CS 61B project. Read through the spec. There was this staff solution that we could try out to see how the database should react, so there I was, testing out a few commands to make sure I understood how they worked. Digging around on the server, I found the staff solution there, unprotected. Too good to be true, I thought. I transfered the files over to my computer, erased any evidence that I had taken anything. I opened it up, and there it was: the staff solution for the notorious project. Reading this, you might think that it’s totally absurd for anyone to use the solution. And if I myself were reading this a semester ago, I would’ve thought the same thing. But the one danger I want to warn you about is that in that moment, there’s a chance you will think differently. There’s pressure to do well. You need to declare. You want to finish the project faster than everyone else. And the staff solution is right there, in front of you, all yours. I became mildly excited actually. I was actually going to pull through and complete the project easily. I started porting the code over, making gradual changes, using different variable and method names, rewriting the logic. And when that autograder came out, bam, there it was, 120/100. And there we go, I never had to think about it again. The obfuscation process took a little time, so I had actually understood everything the staff solution had done. If anyone asked me anything, I could answer how and why. If I was accused of cheating, I’d just completely deny it and explain my code. I didn’t realize I was treading deep waters. My partner and I kept making changes to the code, making it look less and less like we stole it. I did research into how cheating is detected, and tried to circumvent their algorithm. And it was around a month, and no one had contacted us, no one had said anything. We got away with it. But it was my first submission that got caught. When my TA sat me down and told me about it, it was as if it was all over. I got scared. If I wanted to deny, I wouldn’t stand a chance, given the evidence. I would be asked to leave the university. And with that, all the work that I put into CS would be completely wasted. Don’t be like me. But if you make a mistake, own up to it. It can happen really quickly, just one split second decision to shoot copied code to an autograder, that can get you into serious trouble. And this doesn’t just pertain to cheating. In any stressful situation, just take a moment to think about the consequences, and it’ll go a long way. I have realized the seriousness of academic dishonesty and sincerely apologize for copying code. Taking 5 technical courses this semester, I was under a huge academic pressure during the midterm season when the due date was close. I only wanted to take a look at how others approach this problem to help me understand and solve the problem faster, but in the process of “learning” from others, I copied a few lines and violated the honor code. This taught me a hard lesson that I should never try to save time or effort by copying others work, as this definitely limits my abilities in the long-run and brings serious consequences in the short-run. I know this class is difficult and has a large workload, but now at the end of the semester I know I have made huge progress and all hard work will eventually pay off. This also why people put in huge efforts in studying, so it is unfair if I disobeyed the rules and not get punishments. I am truly sorry for what I did and promise will not do that again. In the process of implementing my project, I was little unclear on some of the details of the A* search algorithm. I searched online and found some student code on GitHub. It appeared to be from someone who did a similar project before. My intention was to find some resources to understand the algorithm better, and after I read the code from a similar previous project on GitHub, I was able to understand the A* search algorithm in more detail. For a few functions, I felt that what the old code did was the only way to do it. Without thinking much, I just used the implementation of these functions, and adapted them to work with the rest of my code. I now know that this is my mistake, and that I should always keep the “By You Alone” rule in mind. I will never use other people’s code in any circumstances, and I will also avoid reading and looking at other people’s code, because it is very dangerous. I sincerely apologize for the mistake I made, and I will not make a mistake like this again in the future. This is my incident report. I’m not trying to make up excuses because there is absolutely no way I can justify this, but I guess here is the story of what happened. The week that Project 3 was due, everything seemed to pile up. All my classes had huge commitments that were due that week as well as for my extracurriculars as I suddenly had this huge responsibilty on my shoulders. I had a lot of pressure and had an extremely difficult time psychologically. I didn’t think I could get through the week and so I asked my friend for his Rasterer code so that I could get through all of my commitments. In retrospect, that was definitely not a good decision and I should have perhaps talked to an advisor or gotten some sort of help, although I don’t know what could have been done. But this is the lesson I learned. Please don’t be like me, and learn too late. It’s not worth it. There are more important things in life. Sometimes we’re so focused on one single thing in life that we forget about everything else. Just trust me, it’s not worth it. If you ever feel like you “need” to cheat, just take a moment to take a deep breath and think about your parents. Think about their smiles and how they would feel. By doing so, I not only found motivation within myself to do better in all of my classes, but also to take the high road. Please don’t do it. PSA: Cite all your sources. Once the project was assigned, one of my friends and I met to discuss project design. We discussed the conceptual approaches to fulfilling the requirements. My first recommendation is to work on the project by yourself for a good bit before you start working with someone else. This will not only create more diverging ideas, but will minimize likeliness of similarity. Anyway, after this discussion, we split off and wrote our code independently. Near the end, I had issues with my code so I brought it to my friend to help me debug. My friend did look through my code while I explained it line by line, helping me find bugs in the process. My second recommendation is to be very careful when getting debugging help. For each bug, you should exhaust use of the IntelliJ debugger until you’re really stuck. Furthermore, if/when you do get help from someone, make sure you cite them. It’s easy to not think that the help you’re getting is substantial, but you inevitably have an isolated perspective. On a broader level, starting earlier might help. And honestly, it might not. In my case, I wasn’t exactly pressured by time or by the grade. I just wasn’t clear on what constituted too much help. Make sure you read the collaboration policies very carefully just so you know. You don’t want to mess up. I’m writing this incident report on the fifth floor of Moffit, surrounded by peers of mine who are busy studying for finals. Don’t cheat in 61B, because you do not want to be in this position. I cheated on project 3 because I thought it was the only way I could get it in on time, as I was stuck on part 1 a few days before the deadline. A group of classmates and I were all in the same position, so we decided to work together to complete the project. It started out with simple discussion of implementation, but as the deadline approached quicker we began showing each other our code, and we inevitably started copying from each other. Don’t be like us. If you want to discuss the project, make sure you never show each other your code. If you do, you will probably get caught and end up shooting yourself in the foot. I hope the 61B staff chooses to show you this incident report because if I would have seen something like this I definitely wouldn’t be in this position now. Initially, I was excited for project 3 because it offered practical coding experience. But life got in the way, and I became really depressed. By the time I had gathered myself, the project was almost due, and I fell into desperation. I resorted to copying code out of fear of failing the class, despite knowing well how severe the consequences would be. I wish I realized sooner that the risk I took was not worth the cost. Sorry to the professor for wasting your time, and sorry to my peers for trying to unfairly complete the project. Moral of the story: When life sucks, don’t resort to finding an easy way out of doing schoolwork. In hindsight, I wish I simply told my professor that I was going through a rough patch or humbly accept failure. The whole situation sucks, but this is the price to pay for cheating at University. This has been a very emotional and eye-opening learning experience, and undoubtedly will be an experience that will haunt me for years to come. Incident Report . It’s a shame writing this document. I feel so sorry and regret for doing the wrong thing and violate the academic honesty. I’d like to share my and experience with all the readers, here’s my story and I hope anyone reading this report would never get involved in any trouble like this. The reason why I choose to take CS61B is that I am interested in programming, and at the beginning of this semester, I was so excited to study data structure and learn a new programming language. I believe that everyone study in computer science is because that we can use computer do anything we want and has a lot of fantastic black magic. I did a good job for the project 0 and the first two or three homework and labs was not hard at all. But after the first month, things got really hard. Though I am interested in programming, I had only little programming experience and actually a terrible programmer. If I evaluate my programming skill, I’d like to say that it is really really bad. And I’d like to say CS61B is an extremely hard course, its workload is too much for me. I’m a concurrent student, and I don’ know anything about the academic honest rules before this happening. I can never forget the moment when I checked the email account and find the letter from CS61B class, I was so panic and don’t know which one to choose for the form. I was scared and don’t know what will happen on me. So I went to google and searched the academic dishonest related news. Only by then, did I started to learn the important of maintaining academic honest. After knowing what’s going on and realize how serious the situation was, I contact my partner for this project immediately, at the same time I filled the form and choose the first choice which is admit the behavior of academic dishonesty. I’d like to talk more about the how did I do with the project 2. The project was during the midterm week, it was so hard and last two weeks. At the first week, us two discussed with another team and made a plan about the structure we choose to implement the project. With the help of our TAs, we had a really good plan and got a good head start. However, it was the midterm week and both of us were working on overviewing for the courses. Although we got a good plan, we didn’t work on it right away and it makes us fall behind the schedule which was really bad and you should never do that. After one week had passed, we started working on it at the beginning of the second week. I try to figure out the Parsing part and he works on the basic methods that operate on the table. I’d like to say both of us are not good at programming, we got stuck on both the parsing part and the method part. We tried to discuss with each other and hope to help each other so we can push our process little ahead every time. But we failed to do it, we read a lot of post on the piazza and also checked on the stack overview. At last, we know the basic idea of how to achieve it on the theoretical level but don’t know exactly what to write to implement all the things, as a result, we still made no progress. Days like this happened again and again, so we wasted a lot of time. As the dead line approaching, we don’t know what to do so we can at least do something and get some points, so I went to my roommate for help. My roommate also take CS61B this semester and by the time I went to him for help, he had already finished the project and already got a few golden points. At the beginning, he refused to offer me the code, but I talked to him for like 2 days and promise I would just use it as a reference and won’t copy it at all. Finally, he agree to offer me the code and I was so excited, thought I finally got help from the god and help me go through this hard problem. But now, I think it’s really really a bad decision to beg my friend for help. Because of the academic dishonest, he also received the email and got into this trouble as well as an unreported warning. Even till now, I don’t know how to face him since it cause such a big trouble to him. Only after this happening did I know that he didn’t tell his partner about offering me the code. His partner know this because of receiving the email form CS61B. This is completely a disaster, it ruined the friendship between me and my roommate, me and my partner and also the friendship between my roommate and his partner. Dear CS 61B staffs and Prof. Hug, . First of all, I would like to say sorry for being dishonest on project 3, the bear maps project. As I mentioned on the explanation on google form, the reason I copied the project 3 is because I couldn’t get the speed up to the required. That time, I was under pressure having couple midterms on the same week and also other projects. I know that I was wrong and will never do it again. I was able to get up to 65 points by myself for the record. After all, I learned a lot from CS 61B. It has been a great semester that I was able to learn not only Java in general, but also algorithm. Having this knowledge, even though I’m not a CS major, will surely help my way of thinking in the future. Best, Anonymous . incident report Although the Proj3 is quite hard and has plenty of work, coping codes from other should be strictly forbidden. Coping codes from others not only impact my own CS studying, but also cause a false appearance that something can be done without labor. which will cause dramatically disaster effect in the future study and work life. The reasons I choose to copy the code is that my eagerness to get a good score in a limited time. In spite of 61B, my other courses also have great workload. And at exactly the same week, I need to finish a Lab design for one of my course. So I am afraid time may not be enough to finish Proj3, and as such, in order to finish the project in time, I search it on the Github, and find some related codes from past years. So I select one of these project as reference. At first, I just want to learn how they finish this project, but then, I find just copy some parts of the codes is a faster way to finish the work. And once started, It is quite to stop. So at here, I truly apologize for what I have done, and think highly of the seriousness of behaving dishonestly. And I swear I won’t cheating anymore in the future study. The lesson I have learned is that, finish all the work by yourself, and never ever try to copy form a reference. The honest is what much more important than the temporal scores. So never try to do cheating, all you have to pay a lot to restitution. At last, I am truly regret for doing this stupid thing. ﻿After project 2 was released, we started the design process as everyone else did. After the prototypical design was made, my partner and I started coding according to that design, but later it turned out that design would not work out properly. In this way, our pace was made slower. At the same time, my partner became sluggish as she encountered some personal issues that made it impossible for her to concentrate on the project, and for the beginning few days I never realized that she had problems, until about 3-4 days before the deadline. After we split the work, her code ended up with a lot of fundamental bugs, and at that time we both lost confidence on finishing it on time. As the deadline approached I decided to seek help from my friend and wrote similar codes for a few methods without realizing that this also constitutes violation of the course policy. I would really suggest the future course staff help every pair of students inspect their design to see if that is valid, for it is really painful to start from scratch after we find our design is invalid after half of the time has passed. My roommate and I were discussing the homework togeher, but at some point we got carried away and crossed the line on collaboration. I was supposed to figure out linkedlist deque, and he was supposed to figure out array deque, and then we were going to come together and discuss. However, I at some point we got carried away and simply shared each other’s code wit hteh other person, after cracking the last part of array deque. This was clearly a big violation of the collaboration policies, and I really should have known better. I suppose at some subconcious level we had rationalized it by saying that we both understood the material covered by the homework, so it didn’t really matter. This was very clearly the wrong attitude to have, and I should have been so much more self-aware about this than I was. And this is really what has brought me to this situation. All of this, coupled with teh fact that I had also fallen really sick towards the end of the semester, is why I have now decided to fail this course this semester and retake it in the fall. ",
    "url": "/policies/academic-misconduct/incident-reports-2017/",
    
    "relUrl": "/policies/academic-misconduct/incident-reports-2017/"
  },"82": {
    "doc": "Lab X: Disjoint Sets",
    "title": "FAQ Page",
    "content": "Please use our common issues and frequently asked questions page as a resource. We’ll be updating this FAQ page on the website throughout the week! . ",
    "url": "/labs/disjoint-sets/#faq-page",
    
    "relUrl": "/labs/disjoint-sets/#faq-page"
  },"83": {
    "doc": "Lab X: Disjoint Sets",
    "title": "Introduction",
    "content": "Today, we will delve a little deeper into disjoint sets. We strongly recommend that you watch the lecture on disjoint sets before starting on this lab, as it will cover material that you will need to know to get started. For this week’s lab, we will be implementing our own disjoint sets, UnionFind. More specifically, we will be implementing Weighted Quick Union + Path Compression. While we will briefly cover the concepts needed, please reference lecture for more information. As usual, pull the files from the skeleton: . git pull skeleton main . ",
    "url": "/labs/disjoint-sets/#introduction",
    
    "relUrl": "/labs/disjoint-sets/#introduction"
  },"84": {
    "doc": "Lab X: Disjoint Sets",
    "title": "Disjoint Sets",
    "content": "As a recap, let’s cover what disjoint sets are. The disjoint sets data structure represents a collection of sets that are disjoint, meaning that any item in this data structure is found in no more than one set. For disjoint sets, we generally limit ourselves to two main operations: union and find. The union operation will combine two sets into one set. The find operation will take in an item, and tell us which set that item belongs to. With these operations, we’re able to easily check if two items are connected to each other. Quick Union . As introduced in lecture, we talked about quick union. With this representation, we can think of our disjoint sets data structure as a tree. Specifically, the tree would have the following qualities: . | the nodes will be the items in our set, | each node only needs a reference to its parent rather than a direct reference to the face of the set, and | the top of each tree (we refer to this top as the “root” of the tree) will be the face of the set it represents. | . However, one of the problems with this approach is that the worst case runtime of union would be linear, depending on how items are connected. In other words, the trees can get really tall, leading to poor performance for union. For example, take a look at the example below - why would this lead to the worst case runtime? . Now, let’s combat the shortcomings of this data structure with the following optimizations. Weighted Quick Union . The first optimization that we will do for our quick union data structure is called “union by size”. This will be done in order to keep the trees as shallow as possible and avoid the spindly trees that result in the worst-case runtimes. When we union two trees, we will make the smaller tree (the tree with less nodes) a subtree of the larger one, breaking ties arbitrarily. We call this weighted quick union. Because we are now using “union by size”, the maximum depth of any item will be in \\(O(\\log N)\\), where \\(N\\) is the number of items stored in the data structure. This is a great improvement over the linear time runtime of the unoptimized quick union. Some brief intuition for this depth is because the depth of any element \\(x\\) only increases when the tree \\(T_1\\) that contains \\(x\\) is placed below another tree \\(T_2\\). When that happens, the size of the resulting tree will be at least double the size of \\(T_1\\) because \\(size(T_2) \\ge size(T_1)\\). The tree that contains only \\(x\\) can double its size at most \\(\\log N\\) times until we have reached a total of \\(N\\) items. See the following visual for some intuition on how this works: . Example . The tie-breaking scheme in this example is that the smallest element becomes the root - note that this isn’t always the case depending on the implementation. Let’s go over a example of what this all looks like for weighted quick union. When we initially create our disjoint set, each item is in its own set, so we will initialize all of the elements in the array to -1. For this representation, we want to track our size in the array, so we store the weight of a set at its root as the negated weight (-weight) (to also distinguish between a parent and the weight of the set). After we call union(0,1) and union(2,3), our array and our abstract representation will end up as below . Notice that for above, the values stored at 0 and 2 are -2, as the roots of the respective set are storing their (negated) size. Now let’s call union(0,2). It’ll look like this: . For the sake of an example, let’s say we have another disjoint set, in the current state shown below (we are using the same tie-breaking scheme above): . If we were to connect the two larger sets, through union(7, 2), we would get the following: . In this case, we connect the roots of the sets that 7 and 2 belong to respectively, with the smaller set’s root becoming the child of the larger set’s root. With weighted quick union, we update two values in the array: . | the smaller root’s parent becomes the root of the larger set | the larger root’s value is updated accordingly with a new size | . Path Compression . Even though we have made a speedup by using a weighted quick union data structure, there is still yet another optimization that we can do! What would happen if we had a tall tree and called find repeatedly on the deepest leaf? Each time, we would have to traverse the tree from the leaf to the root. A clever optimization is to move the leaf up the tree so it becomes a direct child of the root. That way, the next time you call find on that leaf, it will run much more quickly. An even more clever idea is that we could do the same thing to every node that is on the path from the leaf to the root. Specifically, when we call find on an item, all of the nodes that were traversed upon going up the tree (to the root) are updated so that they are now connected directly to the root. This optimization is called path compression. Once you find an item, path compression will make finding it (and all the nodes on the path to the root) in the future faster. The runtime for any combination of \\(f\\) find and \\(u\\) union operations takes \\(\\Theta(u + f \\alpha(f+u,u))\\) time, where \\(\\alpha\\) is an extremely slowly-growing function called the inverse Ackermann function. And by “extremely slowly-growing”, we mean it grows so slowly that for any practical input that you will ever use, the inverse Ackermann function will never be larger than 4. That means for any practical purpose, a weighted quick union data structure with path compression has find operations that take constant time on average! . It is important to note that even though this operation can be considered constant time for all practically sized inputs, we should not describe this whole data structure as constant time. We could say something like, it will be constant for all inputs smaller than some incredibly large size. Without that qualification we should still describe it by using the inverse Ackermann function. An example of this is shown below, where we start out with the following . This is only an example to demonstrate what path compression does. Note that you can’t get this structure (the first image, directly below) with a weighted quick union. After we call on find(5), all of the nodes we traversed to get to the root are updated so that they now connect directly to the root: . You can visit this link here to play around with disjoint sets. ",
    "url": "/labs/disjoint-sets/#disjoint-sets",
    
    "relUrl": "/labs/disjoint-sets/#disjoint-sets"
  },"85": {
    "doc": "Lab X: Disjoint Sets",
    "title": "Exercise: UnionFind",
    "content": "For UnionFind, you will be implementing a weighted quick union with path compression. We will now implement our own disjoint sets data structure, UnionFind. At this point, if you haven’t already, take a look at UnionFind.java file. In this file, you’ll see that some skeleton code has been provided for you - you’ll have to fill in the implementation for the following methods: . | UnionFind(int N): This is the constructor. It creates a UnionFind data structure that holds N items. | int sizeOf(int v): Returns the size of the set that v belongs to. | int parent(int v): Returns the parent of v. | boolean connected(int v1, int v2): Returns true if the two vertices are connected. | int find(int v): Returns the root of the set that v belongs to. | void union(int v1, int v2): Connects the sets that v1 and v2 belong to. | . We recommend that you start with implementing the constructor and taking a look at find before the rest of the other methods. Complete the methods in UnionFind. You’ll want to use find in union. ",
    "url": "/labs/disjoint-sets/#exercise-unionfind",
    
    "relUrl": "/labs/disjoint-sets/#exercise-unionfind"
  },"86": {
    "doc": "Lab X: Disjoint Sets",
    "title": "Lab Notes",
    "content": "Please note, for this lab, we will work with non-negative integers as the items in our disjoint sets. Comments have been provided for each method and will go into a little more detail than the summary above, so make sure to read those carefully to understand what you’ll want to implement. Remember to implement both optimizations discussed above, and take note of the tie-breaking scheme that is described in the comments of some of the methods. For this lab, you’ll want to implement the following tie-breaking scheme: if the sizes of the sets are equal, tie break by connecting v1'’s root to v2’s root. You should also correctly handle faulty inputs, e.g if invalid vertices are passed into the functions, throw an IllegalArgumentException. You can throw an IllegalArgumentException with the following line: . throw new IllegalArgumentException(\"Some comment to describe the reason for throwing.\"); . ",
    "url": "/labs/disjoint-sets/#lab-notes",
    
    "relUrl": "/labs/disjoint-sets/#lab-notes"
  },"87": {
    "doc": "Lab X: Disjoint Sets",
    "title": "Testing",
    "content": "For this lab, we’ve provided some tests for you to check your implementation, but they are not comprehensive. Only 4 out of 6 tests on the autograder are provided locally. Passing the tests locally do not mean you will pass the tests on Gradescope and you will need to write your own tests to verify correctness. If you find yourself failing the last two tests, ensure that you’ve implemented path compression correctly and that you’ve tested the correctness for all the methods you’ve implemented. ",
    "url": "/labs/disjoint-sets/#testing",
    
    "relUrl": "/labs/disjoint-sets/#testing"
  },"88": {
    "doc": "Lab X: Disjoint Sets",
    "title": "Submission",
    "content": "Just as you did for the previous assignments, add, commit, then push your Lab 05 code to GitHub. Then, submit to Gradescope. | Complete the implementation of UnionFind.java. This lab is worth 5 points in total. | . ",
    "url": "/labs/disjoint-sets/#submission",
    
    "relUrl": "/labs/disjoint-sets/#submission"
  },"89": {
    "doc": "Lab X: Disjoint Sets",
    "title": "Lab X: Disjoint Sets",
    "content": " ",
    "url": "/labs/disjoint-sets/",
    
    "relUrl": "/labs/disjoint-sets/"
  },"90": {
    "doc": "Lab 1: Caesar Cipher (Old)",
    "title": "Programming Exercise: CaesarCipher",
    "content": "This exercise relies on some material from HW 0. If you have not written Java before, we strongly recommend reading HW 0 before this part. We encourage you to ask for help on HW 0 concepts during lab. Background . A cipher is an algorithm for encrypting or decrypting text. Generally, we call the unencrypted text “plain text” and encrypted version “cipher text”. Here is an example of text that uses a Caesar cipher (which you will implement in this lab): . | Plain Text | Shift | Cipher Text | . | java is fun | +8 | sjej rb odw | . Notably, the original text is readable, but the encrypted version is not. A Caesar cipher is computed by “shifting” each letter of the text some number of spaces forward in the English alphabet, wrapping around at the end, as though it was written in a circle. For example, the following “ring” represents a mapping for a Caesar cipher with each outside letter shifted forward by 4 to get the inside letter. In this lab, you’ll be editing the CaesarCipher.java file, which has empty methods for you to fill in. We will provide you Python code for these methods. You might find HW 0, which compares Python and java syntax, to be helpful. We recommend completing HW 0 before working on this part of the lab. Our goal is to be able to take in a piece of text, the number of letters to shift forward by, and output the encrypted text. We’ve provided a small main method that will take input from the console. You don’t have to understand how it works, however. In Python, there is only one way to represent strings of length one; however, in Java, there are two. First, we can represent them as a String, similar to Python str. Second, there is a separate type called char. The reason for this distinction is that, because we require types in Java, it is useful to be able to specify that we’re working with a single letter. Unlike in Python, Strings in Java must use double quotes (\\\") and chars must use single quotes ('). Methods to Implement . The first function you should implement is findIndexInAlphabet. public static int findIndexInAlphabet(char c) . You should loop through the valid indices of ALPHABET and return the index equal to the input character c if one exists. If no such index exists, you should return -1. In Python, this method might approximately look like: . def findIndexInAlphabet(c): for i in range(len(ALPHABET)): if ALPHABET[i] == c: return i return -1 . In Python, you can’t have two methods named the same thing. However, in Java, we can! This is called method overloading, and works because the types of the arguments are different. Next, you will implement two versions of the rotate method: one for if we want to rotate a char (character), then another for rotating a String. public static int rotate(char c, int amount) . Convert the input character into a number. Then, add the rotation amount to that number, making sure to wrap the number around so it is between 0 and 25, the valid indices for the alphabet. Then, convert it back to a character. If the character doesn’t appear in the alphabet, return the character directly. In Python, this method would approximately look like: . def rot(c, amount): idx = findIndexInAlphabet(c) if idx == -1: return c newIdx = (idx + amount) % len(ALPHABET) return ALPHABET[newIdx] . The String version is the one that we call in main. public static int rotate(String line, int amount) . Rotate each character by the rotation amount, and return a new String made up of the rotated characters. In Python, this method would approximately look like: . def rot(line, amount): output = \"\" for c in line: output += rot(c, n) return output . Testing Your Code . While we could run the CaesarCipher file again and again to check that our code works correctly, it would take a lot of time to type into the program each time, and manually check that the output is correct. Instead, we use tests. Open CaesarCipherTests.java, and click the green triangle next to the public class CaesarCipherTests: . This will run the tests that we have provided in this assignment. If you have correctly implemented the functions, all the tests will pass with a green checkmark: . If you don’t pass some tests, you’ll see either a red exclamation point or a yellow x: . To debug, click the dropdowns to see the output from a specific failing test. Then, read the error to figure out why the bug might have occurred! . ",
    "url": "/labs/lab01/caesar-cipher-old/#programming-exercise-caesarcipher",
    
    "relUrl": "/labs/lab01/caesar-cipher-old/#programming-exercise-caesarcipher"
  },"91": {
    "doc": "Lab 1: Caesar Cipher (Old)",
    "title": "Lab 1: Caesar Cipher (Old)",
    "content": "This lab was replaced due to a restructuring in the first couple weeks. The spec is preserved here. IntelliJ Test . To test if everything is working correctly, run the CaesarCipher class, as shown below: . You should see a console pop up, prompting you to “Type text to encrypt”: . You can click the red square to terminate the program. ",
    "url": "/labs/lab01/caesar-cipher-old/",
    
    "relUrl": "/labs/lab01/caesar-cipher-old/"
  },"92": {
    "doc": "Project 3: Build Your Own World",
    "title": "Deadlines",
    "content": "Warning: There are 3 deadlines for this project, and some deadlines require you to submit multiple deliverables. Please double-check that you submitted everything! | Assignment | Tasks | Deliverable | Points | Due Date | . | Team Formation | - Task 0: Partnerships | Pre-Project Google Form | 2.5 | Wed, Apr 911:59pm PT | . | Project 3A | - Task 1: Setup- Task 2: Design Document- Task 3: World Generation | World Screenshots on Gradescope | 10 | Fri, Apr 1811:59pm PT | . | Design Document | 7.5 | . | Mid-Project Google Form | 2.5 | . | Project 3B | - Task 4: Main Menu- Task 5: Interactivity- Task 6: HUD- Task 7: Saving and Loading- Task 8: Ambition Features | Code on Gradescope(0 pts, but required for checkoff) | 0 | Tue, Apr 2911:59pm PT | . | Live Checkoff with TA(Checkoffs will happen 4/28 – 5/2) | 100 | . | Post-Project Google Form | 2.5 | . To request extensions on Project 3, both partners need to submit separate extension requests on Beacon. ",
    "url": "/projects/proj3/#deadlines",
    
    "relUrl": "/projects/proj3/#deadlines"
  },"93": {
    "doc": "Project 3: Build Your Own World",
    "title": "Welcome",
    "content": "In Project 3, you will create an engine for generating explorable worlds. This is a large design project that will require you and one partner to work through every stage of development from ideation to presentation. The goal of this project is to teach you how to handle a larger piece of code with little starter code in the hopes of emulating something like a product development cycle. In accordance with this, the grading of this project will be different from other projects. Since there is no notion of “the correct answer” when it comes to world design and implementation, you will be assessed much like a performance review you might receive at an internship or job in addition to a very general autograder. While this means you will be graded slightly subjectively, we promise to be pretty nice bosses and will respect you as any boss should respect their hardworking employees. Please talk to us if you feel the grading scheme feels unfair. Another goal of this project is to learn how to recognize and mitigate code complexity. Inevitably, whenever a team builds a large software system, they’ll make some bad design decisions and they’ll engage in corner cutting to get things working. This results in what is often called “technical debt”. Your code becomes complicated to understand and modify, which in the real world translates to software that becomes stale and expensive to maintain. It is very likely that your code will feel sort of hacked together by the end of this project. This is a good thing. As you grow as a programmer over the course of your career, arguably the main skill you’ll be building is to avoid such hacks, The only way to know and defeat complexity is to suffer from it. Don’t miss the Software Engineering I lecture, in which I’ll go through John Ousterhout’s great book about managing software complexity. This project will require you a great deal of exploration and experimentation. Searching the web for answers (not solutions from past semesters) should be a regular activity throughout this process. Please know that there are no right and wrong answers, as this is a very open-ended project. However, there are some implementations and ideas that are better than others. It is ok and expected that you will go through several iterations before settling on something that you deem good. That is, this project is about software engineering. You’re not required to use any of the fancy data structures or concepts from class (A*, MSTs, Disjoint Sets, etc.). This project is about software engineering, not about data structures or algorithms. The data structures and algorithms we’ve learned about in class will make your code significantly simpler and more efficient, but please don’t use things just because we learned about them in class. Only use these tools if you feel comfortable using them in your implementation. A video playlist (from Spring 2018) discussing tips for working on this project can be found at this link Note: The tour through the skeleton code is a bit out of date, for example, the playWithKeyboard and playWithInputString methods are gone. ",
    "url": "/projects/proj3/#welcome",
    
    "relUrl": "/projects/proj3/#welcome"
  },"94": {
    "doc": "Project 3: Build Your Own World",
    "title": "Overview",
    "content": "Your task for the next few weeks is to design and implement a 2D tile-based world exploration engine. By “tile-based”, we mean the worlds you generate will consist of a 2D grid of tiles. By “world exploration engine” we mean that your software will build a world, which the user will be able to explore by walking around and interacting with objects in that world. Your world will have an overhead perspective. As an example of a much more sophisticated system than you will build, the NES game “Zelda II” is (sometimes) a tile based world exploration engine that happens to be a video game: . The system you build can either use graphical tiles (as shown above), or it can use text based tiles, like the game shown below: . We will provide a tile renderer and a small set of starter tiles for you to use. Your roadmap for this project: . | First, you’ll implement code to generate random worlds. | Then, you’ll add a main menu for the user to start the game from. | Then, you’ll add support for saving a game and loading it back. | Finally, you’ll get a chance to add any extra fun features to your project. | . This is our suggested order for working on the project, but since it’s a design project with no starter code, you can work on these features in any order you’d like! . The major goal of this project is to give you a chance to attempt to manage the complexity that comes with building a large system. Be warned: The system you build probably isn’t going to be that fun for users! Three weeks is simply not enough time, particularly for novice programmers. However, we do hope you will find it to be a fulfilling project, and the worlds you generate might even be beautiful. ",
    "url": "/projects/proj3/#overview",
    
    "relUrl": "/projects/proj3/#overview"
  },"95": {
    "doc": "Project 3: Build Your Own World",
    "title": "Large Language Model (LLM) Policy",
    "content": "Reminder: LLM Usage . Recall that in the collaboration policy, we say: . “Use of GitHub Copilot / GPT3 / etc. is permitted with extreme caution if you’re just generating some amount of boilerplate code, that’s ok. However, you should not use such tools to generate non-trivial methods. We are trying to build your fundamental skills, and leaning on an AI is going to cause you trouble in circumstances where you don’t have an AI to help, such as exams. Any AI generated code must be cited and explicitly commented as such.” . This remains true for project 3, unless you want to participate in the pilot program described below. Task 8 with LLM Support . Optionally, for Task 8 (Ambition Features) only, you may participate in a pilot program where you may use LLMs however you wish to complete this part of the project. To participate in this pilot program, you’ll need to: . | Fill out the participation form stating your intention to participate. | When done with the project, fill out the LLM Task 8 experience report and create an accompanying youtube video (which may be public or unlisted). | . If you participate in this pilot program, you’ll be able to use an LLMs in any way you choose for task 8 only. You may use any LLM of any power, even very powerful paid models like o1-pro. The most powerful models can easily complete task 8 on their own if you simply give them the spec and your code base. Thus, we’re asking that you don’t simply outsource task 8 entirely in such a boring way. That is don’t simply paste the ambition points spec into an LLM and have it pick and implement a task for you. Instead, participants in this pilot program should engage in a process of iterative development in tandem with the LLM: Come up with a vision, see what the LLM spits out, learn what you can about the LLMs capabilities based on the generated code, and refine your vision (and prompts, if applicable). Keep in mind that LLMs vary widely in quality and power. You should think of them as assistant programmers whom you’ve hired to help you out on your project — simpler models like ChatGPT 4o are prone to making subtle mistakes. Warning: Course staff reserves the right to revoke your participation in this pilot program if you’ve violated course policies on previous assignments, or on other non-task 8 parts of this project. You should assume that staff will not help debug LLM-generated code unless you have a very specific question. Ask the LLM to help. Recommendation: Avoid letting an LLM generate code using Java features that we haven’t learned in class, such as lambdas, anonymous classes, and streams. If you see super weird code, ask the LLM to try again but not using these advanced Java features. Recommendation: Try to understand the code that the LLM generates. You might learn something interesting! . ",
    "url": "/projects/proj3/#large-language-model-llm-policy",
    
    "relUrl": "/projects/proj3/#large-language-model-llm-policy"
  },"96": {
    "doc": "Project 3: Build Your Own World",
    "title": "Project 3: Build Your Own World",
    "content": " ",
    "url": "/projects/proj3/",
    
    "relUrl": "/projects/proj3/"
  },"97": {
    "doc": "Lab 08: LLRBs",
    "title": "FAQ",
    "content": "The FAQ for this lab can be found here. ",
    "url": "/labs/lab08/#faq",
    
    "relUrl": "/labs/lab08/#faq"
  },"98": {
    "doc": "Lab 08: LLRBs",
    "title": "Before You Begin",
    "content": "As usual, pull the Lab 08 files from the skeleton and open them in IntelliJ. ",
    "url": "/labs/lab08/#before-you-begin",
    
    "relUrl": "/labs/lab08/#before-you-begin"
  },"99": {
    "doc": "Lab 08: LLRBs",
    "title": "Learning Goals",
    "content": "In this lab, we will be implementing left-leaning red-black trees. ",
    "url": "/labs/lab08/#learning-goals",
    
    "relUrl": "/labs/lab08/#learning-goals"
  },"100": {
    "doc": "Lab 08: LLRBs",
    "title": "Introduction",
    "content": "In the previous labs, we’ve analyzed the performance of algorithms for access and insertion into the binary search tree. However, in some cases, we’ve always assumed that the trees were balanced - as we’ve seen, it’s possible to produce a spindly tree that affects the performance of our data structure. Informally, a tree being “balanced” means that the paths from the root to each leaf are all roughly the same length. Any algorithm that looks once at each level of the tree – such as searching for a value in the binary search tree – only looks at the number of layers. In regard to the binary search tree, the smallest number of layers we can have is logarithmic with respect to number of nodes (i.e. \\(\\log N\\)). To maintain this property of “balanced”, we want to prevent the worst case scenario of obtaining a “spindly” tree, which leads to worse performance times. This is where balanced search trees/b-trees come in - they are effectively self-balancing and will maintain the “balanced” property that we want. However, in this lab, we won’t be focusing on implementing balanced search trees - why? While they do guarantee that a path from the root to any leaf is \\(O(\\log N)\\), they’re also notoriously difficult and cumbersome to code, with numerous corner cases for common operations. They are still commonly used and provide plenty of benefits, but they do have drawbacks. Keep in mind that we’ll still reference balanced search trees throughout this lab (any reference to a balanced search tree from here on out is a reference to a 2-3 tree). We then turn our attention to a related data structure: left-leaning red-black trees. We recommend that you review the relevant lecture slides before getting started on this lab. Links vs Nodes . Please do not skip this section. This is important for you to read before you continue on with the rest of the lab. It will be much harder for you if you do not read this section. In lecture, we’ve introduced the concept of LLRBs with links. However, for this lab, we will not be representing our LLRBs with links. Instead, we’ll be using nodes. The main reason for this is that the implementation with links is much harder than with nodes. To cover our ground here, consider the example below of how we’ve introduced the visualization of it in lecture. For this lab, since we’ll be handling colored nodes - the relationship between the red link and its connected node can be defined like below: . Originally, A was connected to B by a red link. But if we use colored nodes in our representation instead of links, A itself would be colored red. The visualization above is meant to show how a red link would map to a colored node, so please keep this mind for the rest of the lab! . Be aware of the relationship between the colored link and the corresponding colored node, as for the rest of the lab, we’ll be using colored nodes in our examples and descriptions to make the lab implementation easier. ",
    "url": "/labs/lab08/#introduction",
    
    "relUrl": "/labs/lab08/#introduction"
  },"101": {
    "doc": "Lab 08: LLRBs",
    "title": "Left-Leaning Red-Black Trees",
    "content": "At its core, LLRBs are just a binary search tree, but there are a few additional invariants related to “coloring” each node red or black. This “coloring” creates a one-to-one mapping between 2-3 trees and LLRBs! In particular, every 2-3 tree corresponds to exactly one LLRB, and vice-versa. The consequence is quite astounding: LLRBs maintain the balance of 2-3 trees while inheriting all normal binary search tree operations with additional housekeeping. LLRB Tree Properties . We now specify some properties of LLRB trees. In particular, we use the one-to-one mapping between valid LLRB trees and 2-3 trees to derive some of these properties. Using colored nodes as our representation, the root node must be colored black. Our interpretation of red nodes is that they are in the same 2-3 node as their parent. The root node has no parent, so it cannot be red. If a node has a red child, it must be on the left. This makes the tree left-leaning. No node can have two red children. If a node has two red children, then both children are in the same 2-3 node as the parent. This means that the corresponding 2-3 node contains 3 keys, which is not allowed. No red node can have a red parent (every red node’s parent is black). If a red node has a red parent, then both the red child and red parent are in the same 2-3 node as the red parent’s parent. This means that the corresponding 2-3 node contains 3 keys, which is not allowed. In a balanced LLRB tree, every path to a null reference goes through the same number of black nodes. In a balanced 2-3 tree, every null node is the same distance from the root. We also know that every black node in an LLRB tree corresponds to exactly one node in the equivalent 2-3 tree. Therefore, every null node in an LLRB tree is the same number of black nodes from the root. ",
    "url": "/labs/lab08/#left-leaning-red-black-trees",
    
    "relUrl": "/labs/lab08/#left-leaning-red-black-trees"
  },"102": {
    "doc": "Lab 08: LLRBs",
    "title": "Inserting Into LLRB Trees",
    "content": "Insertion into LLRB trees starts off with the regular binary search tree insertion algorithm, where we search to find the appropriate leaf location. Whenever we insert a node into a LLRB, we insert it as a red node. However, once we’ve placed the node, this can can break the LLRB invariants, so we need additional operations that can “restore” LLRB properties. We know that there is a one-to-one correspondence of valid LLRB to 2-3 trees. Let’s use this correspondence to try to derive these operations. We’ll cover different cases when our invariants are broken and the appropriate operations to fix them. Invariant: If a node has one red child, it must be on the left . As mentioned, our inserted node will be red. Let’s say we insert our node into our LLRB and it ends up as a right child of node a (this implies that the value in our node is greater than a). Let’s assume that the left child of node a is black or doesn’t exist. This breaks our invariant, where “If a node has one red child, it must be on the left”. Since we can’t have any red-leaning nodes, we would want to rotate left on the parent node. An example is shown below: . Invariant: No node can have two red children . Let’s consider another case. Similar to above, we insert our node into the LLRB as a red node, and it ends up as the right child of node b (in this example). What happens when node b’s left child is a red node? This then breaks the invariant of “No node can have two red children”. We then perform the operation “color flip” on the parent. Here, we apply the color flip operation on b, flipping its color with its childrens’ colors. We will return to this configuration later. Invariant: No red node can have a red parent (every red node’s parent is black) . This can be broken down into two cases defined below. Two consecutive left-leaning red nodes. What happens if we insert our node and it ends up as a left child of a red node? In this case, we then want to adjust our operation and “rotate right” (in other words, it is not possible to have two left-leaning red nodes). Rotating right is the opposite of rotating left! It will give us back the original subtree if applied to the new root. In this case, we rotate right on b: . At this point, we notice that it’s the same pattern as the previous case, so we apply a color flip to a. Red node with a right-leaning red child/node. In the other case, we might end up with our node becoming the right child of an already red node. In this case, we then apply our rotate left operation. As shown below, we rotate left on a in this example and we get: . Note that this ties into the invariant mentioned above, where we can’t have a right-leaning red node. Here, we have the previous case again, so we know that we can rotate right on b and apply a color flip to the root, x. Upward Propagation . Hold on – notice that some of these cases we just covered have ended up in a color flip. What if the subtree we modified was a right subtree, and the rest of the tree looked like this: . Just like how pushing up a key in a 2-3 tree may result in overstuffing the parent node, performing these transformations may also violate an LLRB invariant, giving us one of these three cases again. We resolve these cases until we either: . | Do not have any broken invariants | Flip the root’s color | . What this means is that performing some of these operations (color flip, rotate right, or rotate left) may end up breaking another invariant, resulting in more operations. As we try to resolve these cases, these transformations effectively work up the LLRB tree until we’ve resolved them according to the conditions above. In some cases, we must remember to flip the root’s color back to black in our representation. LLRB Insertion Summary . This section will the most helpful for lab, as you can refer to the diagrams below on how you would perform the three operations. Consider how you can translate the rotation operations and color flip operations to a problem involving nodes and pointer reassignments. We discussed three operations that we can use to “fix” the LLRB invariants after inserting a node. Because it’s possible to have upward propagation as mentioned above, let’s try to generalize our operations a little more visually (specifically for our rotations). We have two rotations, that can be used to move a right child or left child up into their parent’s position: . Here’s a brief description of what happens when we rotateRight(b): . | The root of the subtree has changed from b to a. | a and b have moved to the “right”. | The two nodes swap colors so that the new root becomes the old root’s color, and the old root becomes the new root’s color. | The reorganized subtree still satisfies the binary search property. | . Here’s a brief description of what happens when we rotateLeft(a): . | The root of the subtree has changed from a to b. | a and b have moved to the “left”. | The two nodes swap colors so that the new root becomes the old root’s color, and the old root becomes the new root’s color. | The reorganized subtree still satisfies the binary search property. | . We also have the color flip operation: . ",
    "url": "/labs/lab08/#inserting-into-llrb-trees",
    
    "relUrl": "/labs/lab08/#inserting-into-llrb-trees"
  },"103": {
    "doc": "Lab 08: LLRBs",
    "title": "LLRB Tree Implementation",
    "content": "Have you read this section yet? If you haven’t done so, please do before you start implementing this lab. Before starting, make sure to read through the entire class, RedBlackTree.java, especially the provided nested node class. Make sure to also read the comments for each method! . Exercise: Color Flip . Let’s first consider the color flip operation that is essential to LLRB tree implementation. Given a node, this operation simply flips its color with its children’s colors. Implement the flipColors method in RedBlackTree.java. Exercise: Rotations . We have seen that we can rotate the tree to balance it without violating the binary search tree invariants. Now, we’ll implement it ourselves! . For your implementation, make sure to swap the colors of the old root and the new root! Hint: The two operations are symmetric. Should the code significantly differ? If you find yourself stuck, take a look at the examples that are shown above! . In RedBlackTree.java, implement rotateRight and rotateLeft. Exercise: insert . We will now implement insert in RedBlackTree.java. We have provided you with some of the logic structure with comments. The first part of insert should handle normal binary search tree insertion. You’ll then want to handle the different cases that causes one of the operations (rotateLeft, rotateRight, colorFlip) to occur. Make sure you follow the steps from all the cases very carefully! . Make sure to use the methods you’ve already implemented (rotateRight, rotateLeft, flipColors) to simplify the code writing. The helper method isRed has already been provided to you in the skeleton code so make sure to use it! . Implement the insert method in RedBlackTree.java. ",
    "url": "/labs/lab08/#llrb-tree-implementation",
    
    "relUrl": "/labs/lab08/#llrb-tree-implementation"
  },"104": {
    "doc": "Lab 08: LLRBs",
    "title": "Deliverables and Scoring",
    "content": "Complete the following methods in RedBlackTree.java: . | flipColors | rotateRight and rotateLeft | insert | . This lab is worth 5 points. All tests have been provided to you locally. If you pass all tests in TestRedBlackTree.java, you will receive full credit on Gradescope. Comments have been provided for you throughout the tests to help you further debug. ",
    "url": "/labs/lab08/#deliverables-and-scoring",
    
    "relUrl": "/labs/lab08/#deliverables-and-scoring"
  },"105": {
    "doc": "Lab 08: LLRBs",
    "title": "Submission",
    "content": "Just as you did for the previous assignments, add, commit, then push your Lab 08 code to GitHub. Then, submit to Gradescope. ",
    "url": "/labs/lab08/#submission",
    
    "relUrl": "/labs/lab08/#submission"
  },"106": {
    "doc": "Lab 08: LLRBs",
    "title": "Lab 08: LLRBs",
    "content": " ",
    "url": "/labs/lab08/",
    
    "relUrl": "/labs/lab08/"
  },"107": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "FAQ",
    "content": "Each assignment will have an FAQ linked at the top. You can also access it by adding “/faq” to the end of the URL. The FAQ for Lab11 is located here. ",
    "url": "/labs/lab11/#faq",
    
    "relUrl": "/labs/lab11/#faq"
  },"108": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Introduction",
    "content": "This lab is optional. You are encouraged to work through it on your own time to strengthen your understanding of comparison-based sorting algorithms. There is no in-section component or required submission. As usual, pull the files from the skeleton and make a new IntelliJ project. In this lab, we’ll be discussing sorting, algorithms for rearranging elements in a collection to be in a specific order. There are many problems you can more easily solve with a sorted collection, including performing binary search in \\(O(\\log N)\\) time, efficiently identifying adjacent pairs within a list, finding the \\(k^{th}\\) largest element, and so forth. There are several kinds of sorting algorithms, each of which is appropriate for different situations. At the highest level, we will distinguish between two types of sorting algorithms: . | Comparison-based sorts, which rely on making pairwise comparisons between elements. | Counting-based sorts, which group elements based on their individual digits before sorting and combining each group. Counting sorts do not need to compare individual elements to each other. | . In this lab and the following lab, we will discuss several comparison-based sorts including insertion sort, selection sort, heap sort, merge sort and quick sort. Why all the different sorts? Each sort has a different set of advantages and disadvantages: under certain conditions, one sort may be faster than the other, or one sort may take less memory than the other, and so forth. When working with large datasets (or even medium and small datasets), choosing the right sorting algorithm can make a big difference. Along the way, we’ll develop an intuition for how each sort works by exploring examples and writing our own implementations of each sort. Here is a nice visualizer for some of the sorts. ",
    "url": "/labs/lab11/#introduction",
    
    "relUrl": "/labs/lab11/#introduction"
  },"109": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Order and Stability",
    "content": "To put elements in order implies that we can enforce an ordering between any two elements. Given any two elements in a list, according to total order, we should be able to decide which of the two elements is larger or smaller than the other. However, it’s also possible that neither element is necessarily larger or smaller than the other. For instance, if we wish to determine the ordering between two strings, [\"sorting\", \"example\"], and we want to order by the length of the string, it’s not clear which one should come first because both strings are of the same length 7. In this case, we can defer to the notion of stability: if a sort is stable, then it will preserve the relative orderings between elements in the list. In the above example then, the resultant array will be [\"sorting\", \"example\"] in a stable sort rather than [\"example\", \"sorting\"] as is possible in an unstable sort. Remember that, according to our total order by the length of the strings, the second list is still considered correctly sorted even though the relative order of equivalent elements is not preserved. What is the benefit of stable sorting? It allows us to sort values based off multiple attributes. For example, we could stably sort a library catalog by alphabetical order, then by genre, author, etc. Without stable sorting, we are not guaranteed that the relative ordering of the previous sorts would persist so it is possible that the catalog would only be sorted by our last sort. Consider the following example where we sort a list of animals by alphabetical order and then length of string. Original collection: . cow giraffe octopus cheetah bat ant . First, sort by alphabetical order: . ant bat cheetah cow giraffe octopus . Second, stable sort by length of string: . ant bat cow cheetah giraffe octopus . After the two sort calls on the same list, now the collection is sorted by length and elements with the same length are in alphabetical order with each other. If our sorting algorithm was not stable, then we would potentially lose the alphabetical information we achieved in the previous sort. ",
    "url": "/labs/lab11/#order-and-stability",
    
    "relUrl": "/labs/lab11/#order-and-stability"
  },"110": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Space Complexity",
    "content": "Thus far, in this class, we’ve mostly talked about time complexity. Similarly to how we can do asymptotic analysis for runtime, we can also analyze how much space (i.e. memory) a given algorithm uses. For sorting algorithms, one common trait we look for is if the algorithm is in-place. Any sorting algorithm that takes in an input of size N is going to have to work with some amount of memory proportional to N to store the size of the input itself. An in-place algorithm is one that doesn’t use a significant amount of additional memory. In this class, this means that the algorithm must use a constant amount of additional memory (for example, a few variables to keep track of your current index or something). Another way to think about it is if we can do the entire algorithm within the original given list, without creating an additional data structure. All the algorithms we discuss in this lab are in-place and do not need to create another data structure. Note that the definition of in-place can vary–though in our class we say only a constant amount of space counts, some measures say using a logarithmic amount is okay. If you see other articles online, just be wary! . ",
    "url": "/labs/lab11/#space-complexity",
    
    "relUrl": "/labs/lab11/#space-complexity"
  },"111": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Some Thoughts: Sorting by Hand",
    "content": "Think about how you would sort a hand of 13 playing cards if you are dealt the cards one-by-one. Your hand should end up sorted first by suit, and then by rank within each suit. Then, think about how you would sort a pile of 300 CS 61BL exams by student ID. If it’s different than your card-sorting algorithm of the previous step, explain why. Can you tell if one is faster than the other? How so? . ",
    "url": "/labs/lab11/#some-thoughts-sorting-by-hand",
    
    "relUrl": "/labs/lab11/#some-thoughts-sorting-by-hand"
  },"112": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Insertion Sort",
    "content": "The first comparison-based sort we’ll learn is called an insertion sort. The basic idea for insertion sort can be formally summed up by this pseudocode: . for each element in the collection: while the previous element is smaller than the element: swap the two elements . You might have intuitively come up with insertion sort when we asked you how to sort cards. This is like when you sort cards by continually putting the next card in the right spot in a group of sorted cards that you’re holding. Note that insertion sort is stable. We never swap elements if they are equal so the relative order of equal elements is preserved. Now that you’ve read the above explanation, we recommend watching this video to solidify your understanding. Thought Exercise: Runtime . For the following questions, think on your own and then verify your answers. Assume we have an array of \\(N\\) integers. What would the array have to look like before we ran insertion sort that would make insertion sort run the fastest, i.e. minimizing the number of steps needed? . Click to reveal answer! Sorted List What is the runtime of running insertion sort on this array? . Click to reveal answer! Theta(N) What type of initial ordering of a list would maximize the number of comparisons and result in the slowest runtime? . Click to reveal answer! Reverse Sorted Array What is the runtime of running insertion sort on the type of array you identified above? . Click to reveal answer! Theta(N^2) Non-Coding Exercise: InsertionSort . Read the solution sort() in InsertionSort.java and understand the provided helper methods. ",
    "url": "/labs/lab11/#insertion-sort",
    
    "relUrl": "/labs/lab11/#insertion-sort"
  },"113": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Selection Sort",
    "content": "Selection sort on a collection of \\(N\\) elements can be described by the following pseudocode: . for each element in the collection: find the smallest remaining element, E, in the *unsorted* part of the array remove E and add E to the end of the *sorted* part of the array repeat unsorted collection's original length number of times (or repeat until unsorted collection has no more elements) . In selection sort we swap the minimum element in the unsorted collection with the element at the beginning of the unsorted collection. This can rearrange the relative ordering of equal elements. Thus, selection sort is unstable. After reading the above, we recommend watching this video on selection sort! . Disussion: Runtime . Now, let’s determine the asymptotic runtime of selection sort. One may observe that, in the first iteration of the loop, we will look through all \\(N\\) elements of the array to find the minimum element. On the next iteration, we will look through \\(N - 1\\) elements to find the minimum. On the next, we’ll look through \\(N - 2\\) elements, and so on. Thus, the total amount of work will be the \\(N + (N - 1) + ... + 1\\), no matter what the ordering of elements in the array or linked list prior to sorting. Hence, we have an \\(\\Theta(N^2)\\) algorithm, equivalent to insertion sort’s normal case. But notice that selection sort doesn’t have a better case, while insertion sort does. Non-Coding Exercise: SelectionSort . Read the solution to sort() and understand the helper methods in SelectionSort.java. ",
    "url": "/labs/lab11/#selection-sort",
    
    "relUrl": "/labs/lab11/#selection-sort"
  },"114": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "HeapSort",
    "content": "Recall the basic structure for selection sort . for each element in the collection: find the smallest remaining element, E, in the unsorted collection remove E and add E to the end of the sorted collection . Adding something to the end of a sorted array or linked list can be done in constant time. What hurt our runtime was finding the smallest element in the collection, which always took linear time in an array. Is there a data structure we can use that allows us to find and remove the smallest element quickly? A heap will! . We’ll modify our approach to make it better suited for a heap by removing the largest element and placing it at the end of the array. Here’s the pseudocode for HeapSort: . construct a max heap from the given collection by bubbling down every element from the end of the collection while there are elements remaining in the heap (unsorted part of the collection) swap the root of the heap with the last element bubble down the new root till the end of the heap . HeapSort is not stable because the heap operations (recall bubbleUp and bubbleDown) can change the relative order of equal elements. Once again, wrap up learning about HeapSort with this helpful video. Disussion: Runtime . Now, let’s determine the runtime of heap sort. Removal of the largest element from a heap of \\(N\\) elements can be done in time proportional to \\(\\log N\\), allowing us to sort our elements in \\(O(N \\log N)\\) time. We can also build a heap in \\(O(N \\log N)\\) time by calling bubble down on every element. This step is only done once, so it doesn’t make our overall runtime worse than \\(O(N \\log N)\\) that we previously established. So, once the heap is created, sorting can be done in \\(O(N \\log N)\\). Out of scope note: The tighter runtime for building the heap is actually O(N) but it doesn't affect the overall runtime. The actual calculation for the run time of heap sort is complicated and out of scope for this class. You can take a look at this stackoverflow answer for more a formal calculation of this runtime. Exercise: HeapSort . Complete sort() and suggested helper methods in HeapSort.java. The heap in this lab is rooted at index 0 instead of 1 as we’re using it to sort through a pre-existing array. We’ve provided the appropriate getLeftChild and getRightChild methods as part of the skeleton, so you don’t have to worry about this in your implementation. ",
    "url": "/labs/lab11/#heapsort",
    
    "relUrl": "/labs/lab11/#heapsort"
  },"115": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "New Idea: “Divide and Conquer”",
    "content": "The first few sorting algorithms we’ve previously introduced work by iterating through each item in the collection one-by-one. With insertion sort and selection sort, both maintain a “sorted section” and an “unsorted section” and gradually sort the entire collection by moving elements over from the unsorted section into the sorted section. Another approach to sorting is by way of divide and conquer. Divide and conquer takes advantage of the fact that empty collections or one-element collections are already sorted. This essentially forms the base case for a recursive procedure that breaks the collection down into smaller pieces before merging adjacent pieces to form a completely sorted collection. The idea behind divide and conquer can be broken down into the following 3-step procedure. | Split the elements to be sorted into two collections. | Sort each collection recursively. | Combine the sorted collections. | . Compared to selection sort, which involves comparing every element with every other element, divide and conquer can reduce the number of unnecessary comparisons between elements by sorting or enforcing order on sub-ranges of the full collection. The runtime advantage of divide and conquer comes largely from the fact that merging already-sorted sequences is very fast. Two algorithms that apply this approach are merge sort and quicksort. ",
    "url": "/labs/lab11/#new-idea-divide-and-conquer",
    
    "relUrl": "/labs/lab11/#new-idea-divide-and-conquer"
  },"116": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Merge Sort",
    "content": "Merge sort works by executing the following procedure until the base case of an empty or one-element collection is reached. | Split the collection to be sorted in half. | Recursively call merge sort on each half. | Merge the sorted half-lists. | . The reason merge sort is fast is because merging two lists that are already sorted takes linear time proportional to the sum of the lengths of the two lists. In addition, splitting the collection in half requires a single pass through the elements. The processing pattern is depicted in the diagram below. Each level in the diagram is a collection of processes that all together run in linear time. Since there are \\(2 \\log N\\) levels with each level doing work proportional to \\(N\\), the total time is proportional to \\(N \\log N\\). To be specific, each level does work proportional to \\(N\\) because of the merging process, which happens in a zipper-like fashion. Given two sorted lists, merge should continually compare the first elements of both lists and interweave the elements into a singular sorted list. For example, given the lists [2, 6, 7] and [1, 4, 5, 8], merge compares the front of both lists (1 and 2). Because 1 &lt; 2, 1 is moved into the next open spot (in this case, the first position) of the overall sorted list. Note that 2 does not enter the overall list, because we now must effectively compare [2, 6, 7] with [4, 5, 8] and repeat the process until there are no more elements that need to be compared and merged. Merge sort is stable as long as we make sure when merging two halves together that we favor equal elements in the left half. Now, watch this video on mergeSort before attempting the exercise below! . ",
    "url": "/labs/lab11/#merge-sort",
    
    "relUrl": "/labs/lab11/#merge-sort"
  },"117": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Exercise: mergeSort",
    "content": "To test your understanding of merge sort, fill out the sort method in MergeSort.java. Be sure to take advantage of the helper merge method! . This method should be non-destructive, so the original int[] arr should not be modified. ",
    "url": "/labs/lab11/#exercise-mergesort",
    
    "relUrl": "/labs/lab11/#exercise-mergesort"
  },"118": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Quicksort",
    "content": "Another example of dividing and conquering is the quicksort algorithm, which proceeds as follows: . | Split the collection to be sorted into three collections by partitioning around a pivot (or “divider”). One collection consists of elements smaller than the pivot, the second collection consists of elements equal to the pivot, and the third consists of elements greater than or equal to the pivot. | Recursively call quicksort on each collection. | Merge the sorted collections by concatenation. | . Specifically, this version of quicksort is called “three-way partitioning quicksort” due to the three partitions that the algorithm makes on every call. Here’s an example of how this might work, sorting an array containing 3, 1, 4, 5, 9, 2, 8, 6. | Choose 3 as the pivot. (We’ll explore how to choose the pivot shortly.) | Put 4, 5, 9, 8, and 6 into the “large” collection and 1 and 2 into the “small” collection. No elements go in the “equal” collection. | Sort the large collection into 4, 5, 6, 8, 9; sort the small collection into 1, 2; combine the two collections with the pivot to get 1, 2, 3, 4, 5, 6, 8, 9. | . Depending on the implementation, quicksort is not stable because when we move elements to the left and right of our pivot the relative ordering of equal elements can change. Before moving on to the next part of the lab, check out this video to solidify your understanding of quicksort. Note this was taken from summer 2021’s lecture, so you can stop after the section on quicksort. That is, you can stop at 1:41:00. ",
    "url": "/labs/lab11/#quicksort",
    
    "relUrl": "/labs/lab11/#quicksort"
  },"119": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Exercise: quicksort",
    "content": "To test your understanding of quicksort, fill out the sort method in QuickSort.java. Be sure to take advantage of the helper partition method! . This method is destructive, where the original int[] arr should be modified. ",
    "url": "/labs/lab11/#exercise-quicksort",
    
    "relUrl": "/labs/lab11/#exercise-quicksort"
  },"120": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Though Exercise: Quicksort",
    "content": "Thought Exercise 1: Runtime . First, let’s consider the best-case scenario where each partition divides a range optimally in half. Using some of the strategies picked up from the merge sort analysis, we can determine that quicksort’s best case asymptotic runtime behavior is \\(O(N \\log N)\\). Think about why this is the case, and any differences between quicksort’s best case runtime and merge sort’s runtime. However, quicksort is faster in practice and tends to have better constant factors (which aren’t included in the big-Oh analysis). To see this, let’s examine exactly how quicksort works. We know concatenation for linked lists can be done in constant time, and for arrays it can be done in linear time. Partitioning can be done in time proportional to the number of elements \\(N\\). If the partitioning is optimal and splits each range more or less in half, we have a similar logarithmic division of levels downward like in merge sort. On each division, we still do the same linear amount of work as we need to decide whether each element is greater or less than the pivot. However, once we’ve reached the base case, we don’t need as many steps to reassemble the sorted collection. Remember that with merge sort, while each list of one element is sorted, the entire set of one-element lists is not necessarily in order, which is why there are \\(\\log N\\) steps to merge upwards in merge sort. This isn’t the case with quicksort as each element is in order. Thus, merging in quicksort is simply one level of linear-time concatenation. Unlike merge sort, quicksort has a worst-case runtime different from its best-case runtime. Suppose we always choose the first element in a range as our pivot. Then, which of the following conditions would cause the worst-case runtime for quicksort? Think about it, then verify your understanding by highlighting the line below for the answer. Sorted or Reverse Sorted Array. This is because the pivot will always be an extreme value (the largest or smallest unsorted value) and we will thus have N recursive calls, rather than log(n). What is the runtime of running quicksort on this array? . Theta(N^2) . Under these conditions, does this special case of quicksort remind you of any other sorting algorithm we’ve discussed in this lab? . We see that quicksort’s worst case scenario is pretty bad… You might be wondering why we’d even bother with it then! However, though it’s outside the scope of this class for you to prove why, we can show that on average, quicksort has \\(O(N \\log(N))\\) runtime! In practice, quicksort ends up being very fast. Thought Exercise 2: Choosing a Pivot . Given a random collection of integers, what’s the best possible choice of pivot for quicksort that will break the problem down into \\(\\log N\\) levels? Try to describe an algorithm to find this pivot element. What is its runtime? It’s okay if you think your solution isn’t the most efficient. ",
    "url": "/labs/lab11/#though-exercise-quicksort",
    
    "relUrl": "/labs/lab11/#though-exercise-quicksort"
  },"121": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Quicksort in Practice",
    "content": "How fast was the pivot-finding algorithm that you came up with? Finding the exact median of our elements may take so much time that it may not help the overall runtime of quicksort at all. It may be worth it to choose an approximate median, if we can do so really quickly. Options include picking a random element, or picking the median of the first, middle, and last elements. These will at least avoid the worst case we discussed above. In practice, quicksort turns out to be the fastest of the general-purpose sorting algorithms we have covered so far. For example, it tends to have better constant factors than that of merge sort. For this reason, Java uses this algorithm for sorting arrays of primitive types, such as ints or floats. With some tuning, the most likely worst-case scenarios are avoided, and the average case performance is excellent. Here are some improvements to the quicksort algorithm as implemented in the Java standard library: . | When there are only a few items in a sub-collection (near the base case of the recursion), insertion sort is used instead. | For larger arrays, more effort is expended on finding a good pivot. | Various machine-dependent methods are used to optimize the partitioning algorithm and the swap operation. | Dual pivots | . For object types, however, Java uses a hybrid of merge sort and insertion sort called “Timsort” instead of quicksort. Can you come up with an explanation as to why? Hint: Think about stability! . To learn more about the performance difference between Quicksort and Mergesort, watch this video Quicksort versus Mergesort . Timing . So far we’ve measured the speed and efficiency of our algorithms by theoretically performing asymptotic analysis on them. Another (less formal) way of determining the speed of a given program is to test it on a variety of inputs and measure the time it takes for each one. This is called a timing experiment, and we refer to this process as finding the efficiency of a program empirically. In this lab, we will be doing some timing experiments to see how the different sorting classes you implemented in this lab perform. Open TimingTest.java and run it’s main method. This class will sort random arrays of different sizes using the sorting algorithms you implemented and plot the results. Here’s the result of running the test on one of our computers: . Notice how by the time we reach an array size of 1000000, Selection Sort and Insertion Sort take more than a minute to run while Heap Sort and Merge Sort manages to sort the same array in just over one-tenth of a second! . If you run it multiple times, you will also notice that Quicksort’s runtime varies more than others—you are seeing the different pivot’s runtime on this algorithm’s performance in action! . Please note that the result you see my be different from the picture above. If the tests are taking too long on your computer, try lowering the bounds provided in the class. ",
    "url": "/labs/lab11/#quicksort-in-practice",
    
    "relUrl": "/labs/lab11/#quicksort-in-practice"
  },"122": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Summary",
    "content": "In this lab, we learned about more comparison-based algorithms for sorting collections. Within comparison-based algorithms, we examined two different paradigms for sorting: . | Simple sorts like insertion sort and selection sort which demonstrated algorithms that maintained a sorted section and moved unsorted elements into this sorted section one-by-one. With optimization like heapsort or the right conditions (relatively sorted list in the case of insertion sort), these simple sorts can be fast! | Divide and conquer sorts like merge sort and quicksort. These algorithms take a different approach to sorting: we instead take advantage of the fact that collections of one element are sorted with respect to themselves. Using recursive procedures, we can break larger sorting problems into smaller subsequences that can be sorted individually and quickly recombined to produce a sorting of the original collection. | . Here are several online resources for visualizing sorting algorithms. If you’re having trouble understanding these sorts, use these resources as tools to help build intuition about how each sort works. | VisuAlgo | Sorting.at | Sorting Algorithms Animations | USF Comparison of Sorting Algorithms | AlgoRhythmics: sorting demos through folk dance including insertion sort, selection sort, merge sort, and quicksort | . To summarize the sorts that we’ve learned, take a look at the following table. |   | Best Case Runtime | Worst Case Runtime | Stable | In Place | Notes | . | Insertion Sort | \\(\\Theta(N)\\) | \\(\\Theta(N^2)\\) | Yes | Yes |   | . | Selection Sort | \\(\\Theta(N^2)\\) | \\(\\Theta(N^2)\\) | No | Yes | Can be made stable under certain conditions. | . | Heap Sort | \\(\\Theta(N \\log N)\\) | \\(\\Theta(N \\log N)\\) | No | Yes | If all elements are equal then runtime is \\(\\Theta(N)\\). Hard to make stable. | . | Merge Sort | \\(\\Theta(N \\log N)\\) | \\(\\Theta(N \\log N)\\) | Yes | Not usually. Typical implementations are not, and making it in-place is terribly complicated. | An optimized sort called “Timsort” is used by Java for arrays of reference types. | . | Quicksort | \\(\\Theta(N \\log N)\\) | \\(\\Theta(N^2)\\) | Depends | Most implementations use log(N) additional space for the recursive stack frames | Stability and runtime depend on partitioning strategy; three-way partition quicksort is stable. If all elements are equal, then the runtime using three-way partition quicksort is \\(\\Theta(N)\\). Used by Java for arrays of primitive types. Fastest in practice. | . You may have noticed that there seems to be a lower bound on how fast our sorting algorithms can go. For comparison based sorts, we can prove the best we can do is \\(O(N\\log(N))\\). You can watch a very brief video explanation here at timestamp 11:42. You can also read a more in-depth proof, if you’re into that kind of thing. There are also counting sorts, which can do even better when we’re able to use them. Deliverables . To get credit for this lab: . | Complete the following classes: . | HeapSort.java | MergeSort.java | QuickSort.java | . | . ",
    "url": "/labs/lab11/#summary",
    
    "relUrl": "/labs/lab11/#summary"
  },"123": {
    "doc": "Lab 11: Comparison-Based Sorts (Optional)",
    "title": "Lab 11: Comparison-Based Sorts (Optional)",
    "content": " ",
    "url": "/labs/lab11/",
    
    "relUrl": "/labs/lab11/"
  },"124": {
    "doc": "Exam Policies",
    "title": "Exam Times",
    "content": "There will be two midterms and a final exam: . | Midterm 1: Thursday, February 20, 8–10pm PT | Midterm 2: Wednesday, April 2, 8–10pm PT | Final Exam: Tuesday, May 13, 8–11am PT | . There are no remote exams this semester. All exams (including alternate exams) will be held in-person. ",
    "url": "/policies/exams/#exam-times",
    
    "relUrl": "/policies/exams/#exam-times"
  },"125": {
    "doc": "Exam Policies",
    "title": "Alternate Exam Times",
    "content": "If you are unable to take the exam at the scheduled time, we will be offering only one alternate exam time per exam, in-person only. | Alternate Midterm 1: Thursday, Februrary 20, 6–8pm PT | Alternate Midterm 2: Wednesday, April 2, 6-8pm PT | Alternate Final Exam: Tuesday, May 13, 11am–2pm PT | . There are no other alternate exam times. We are only offering the alternate exam time if you are unable to take the exam at the normal time for verifiable time conflicts. For example, if you have another exam at the same time, you can take the alternate-time exam. However, wanting a break between non-conflicting exams would not be a valid reason to take the alternate-time exam, because in this case you are able to take the exam at the normal time. We’ll release a form closer to the exams for you to sign up for an alternate-time exam. If you are unable to attend the normal exam or the alternate-time exam (e.g. because of sickness), please email cs61b@berkeley.edu. ",
    "url": "/policies/exams/#alternate-exam-times",
    
    "relUrl": "/policies/exams/#alternate-exam-times"
  },"126": {
    "doc": "Exam Policies",
    "title": "Exam Clobbering",
    "content": "For those of you who miss an exam, have a bad night, or make major improvements over the semester, the exam clobbering policy gives you a chance to replace one or both of your midterm exam scores. You don’t need to understand the math behind the clobber policy, but we’ve described the computation steps below for transparency: . Exam clobbering formulas. You do not need to understand anything in this box. | Compute your z-score on the final exam: . \\[\\text{final exam z-score} = \\frac{(\\text{your final exam score} \\ – \\ \\text{final exam mean})}{\\text{final exam standard deviation}}\\] | Compute the equivalent score on the midterm distribution: . \\[\\text{scaled midterm score} = (\\text{final exam z-score} \\times \\text{midterm standard deviation}) + \\text{midterm mean}\\] | Your midterm score is: . \\[\\max(\\text{your midterm score}, \\text{scaled midterm score})\\] | Repeat Steps 1–3 for both midterms. | . ",
    "url": "/policies/exams/#exam-clobbering",
    
    "relUrl": "/policies/exams/#exam-clobbering"
  },"127": {
    "doc": "Exam Policies",
    "title": "Exam Curving",
    "content": "Our exams are intended to have an average score of 65%. If the exam is too difficult, and the class average score is below 65%, we will curve everyone’s scores so that the average score is 65%. If the average score is at or above 65%, then we will not change scores (i.e. your score will not decrease). You don’t need to worry about the specific calculations for grade curving, but we’ve described the calculations below for transparency: . Exam curving formulas. You do not need to understand anything in this box. To compute curved scores, we will reduce the maximum score on the exam until the average score is 65%. The reduced maximum score turns out to be \\(\\text{mean score} / 0.65\\). Here are some examples of computing the curve: . | Suppose we have a class with 3 students, and their exam scores are: \\(40/100\\), \\(50/100\\), and \\(60/100\\). The class average is \\(\\frac{40 + 50 + 60}{3}\\) = 50%. This means our exam was too difficult. | To change the average score to 65%, we will reduce the maximum score. Instead of counting the exam out of 100 points, we will count the exam out of \\(50 / 0.65\\) = 76.9 points. | Using the reduced max score, the students’ new exam scores are now: \\(40/76.9\\), and \\(50/76.9\\), and \\(60/76.9\\). As percentages, these scores are: 52%, 65%, and 78%. The average of these scores is now 65%! . | . For each exam, we will officially announce the reduced max score after exam regrades are processed, so that you can compute your own curved exam score. ",
    "url": "/policies/exams/#exam-curving",
    
    "relUrl": "/policies/exams/#exam-curving"
  },"128": {
    "doc": "Exam Policies",
    "title": "Exam Scaling",
    "content": "Each exam is scored out of 100 points, but we will scale your score up to be out of 100 (midterm 1), 150 (midterm 2), and 250 (final exam) course points when we compute your final letter grade. The maximum score on an exam is 100%. If your score exceeds 100% after curving, it will be capped at 100% when calculating grades. Points earned above 100% can be used to increase your grade from an A to an A+, but will not be used in any other grade calculations. ",
    "url": "/policies/exams/#exam-scaling",
    
    "relUrl": "/policies/exams/#exam-scaling"
  },"129": {
    "doc": "Exam Policies",
    "title": "Exam Score Computation Formula",
    "content": "We know that exam scores with clobber and curve aren’t the easiest thing to compute. Remember, you don’t need to know any of this math, and you can totally ignore this section if you want – we will automatically compute the correct exam score for you! . That said, if you want to compute your own score, we’ve provided the exact formulas here for your reference. Exam score computation formulas. You do not need to understand anything in this box. Intutively, the clobber changes the numerator of your score, and the curve changes the denominator of your score. After applying the clobber and curve, we scale your score and cap it at 100% if needed. For the final exam (can’t be clobbered), skip steps 1–3. If computing a midterm score before the final exam (no clobber available yet), skip steps 1–3. | [Clobber] Compute your z-score on the final exam: . \\[\\text{final exam z-score} = \\frac{(\\text{your score} \\ – \\ \\text{final exam mean})}{\\text{final exam standard deviation}}\\] In the formula, your score, the final exam mean, and the final exam standard deviation are all taken directly from Gradescope and are out of 100 points. | [Clobber] Compute the equivalent score on the midterm distribution: . \\[\\text{scaled midterm score} = (\\text{final exam z-score} \\times \\text{midterm standard deviation}) + \\text{midterm mean}\\] In the formula, the midterm mean, midterm standard deviation, and your scaled midterm score are all out of 100 points. The midterm mean and standard deviation are taken directly from Gradescope. | [Clobber] Your clobbered midterm score is: . \\[\\text{clobbered midterm score} = \\max(\\text{your midterm score}, \\text{scaled midterm score})\\] This is the numerator of your score fraction. | [Curve] Compute the reduced max score. (The official reduced max score will be announced by staff, but you can use this formula to estimate.) . \\[\\text{reduced max} = \\frac{\\text{exam mean}}{0.65}\\] In the formula, the exam mean is out of 100 points. This is the denominator of your score fraction. | Compute your score. The denominator is always from Step 4. If computing a midterm score with clobber, the numerator is from Step 3: . \\[\\text{curved and clobbered exam score} = \\frac{\\text{clobbered midterm score}}{\\text{reduced max}}\\] If computing a final exam score (can’t be clobbered), or computing a midterm score before the final exam (no clobber available yet), the numerator is just your raw exam score out of 100: . \\[\\text{curved and clobbered exam score} = \\frac{\\text{raw exam score}}{\\text{reduced max}}\\] | [Scale] You now have a clobbered, curved midterm score out of 100 points. The last step is to scale this score up to the number of course points (out of 1000) the exam is worth: . Midterm 1 (worth 100 points): \\(\\text{course points} = \\text{curved and clobbered exam score} \\times 100\\) . Midterm 2 (worth 150 points): \\(\\text{course points} = \\text{curved and clobbered exam score} \\times 150\\) . Midterm 3 (worth 250 points): \\(\\text{course points} = \\text{curved and clobbered exam score} \\times 250\\) . If the score you compute is greater than 100% (e.g. 160/150 on Midterm 2), round your score down to the maximum (e.g. round down to 150/150). Any excess points get converted to “exam bonus points”, which only gets used to determine A+s. | . ",
    "url": "/policies/exams/#exam-score-computation-formula",
    
    "relUrl": "/policies/exams/#exam-score-computation-formula"
  },"130": {
    "doc": "Exam Policies",
    "title": "Regrade Request Policy",
    "content": "If you think we made a mistake when grading your exam, you can request a regrade through Gradescope. You should only request a regrade if there is a rubric item that clearly applies to your answer. For example: . In this case, your answer is eligible for the “Partial: 120” rubric item, so you can request a regrade request. However, if you answered “–121”, this is not on the rubric. If you request a regrade asking for partial credit, it will be denied. If you want to ask for credit for something that’s not on the rubric, you should ask publicly on Ed. A good rule of thumb is: If regrading your answer would change the rubric for everybody else, you should post on Ed. Note on partial credit: To minimize the effect of random guessing on exam scores, we are stricter than other classes when it comes to partial credit: . | An answer that is fully correct except for one very minor mistake is usually worth half-credit. | An answer with 2 or more minor mistakes is usually not worth credit. | An answer showing conceptual misunderstanding is usually not worth credit. Similarly, an answer where we cannot distinguish between a conceptual misunderstanding and a typo is usually not worth credit. | . Asking for more partial credit is not going to be very helpful. Remember, we curve the exam to a target average of 65%, so when we hand out less partial credit, it also means you get more of a grade bump from the curve. If we gave more partial credit, the curve would end up being less generous, and your overall grade wouldn’t be much different. Some other logistical policies on regrade requests: . | We only respond to regrade requests after the deadline for submitting them. | If we spot another mistake in the process of regrading your submission, we will fix it, even if your grade goes down. Please request responsibly! If you flood us with frivolous requests or requests that don’t follow the rules (e.g. “can I have partial credit for this thing that’s not on the rubric”), we’re more likely to find something else and decrease your score. | . ",
    "url": "/policies/exams/#regrade-request-policy",
    
    "relUrl": "/policies/exams/#regrade-request-policy"
  },"131": {
    "doc": "Exam Policies",
    "title": "Exam Policies",
    "content": " ",
    "url": "/policies/exams/",
    
    "relUrl": "/policies/exams/"
  },"132": {
    "doc": "Incomplete Grades",
    "title": "Incompletes",
    "content": "Incomplete grades allow you to complete coursework after the semester if you were unable to finish them due to extenuating circumstances. You will have an Incomplete (I) grade for the semester and receive extended completion deadlines to submit the incomplete assignments. After resolving the incomplete, your letter grade will be calculated and submitted. If you’re interested in taking an incomplete, please first read through the registrar’s website here. A couple important requirements from the website: . | “Students who fail to turn in all required work cannot request an I grade unless they have been unable to finish because of circumstances beyond their control.” | Your work must be of “passing quality”, meaning that completing the projects you’re taking an incomplete for would bring you to at least a passing grade in the course. The grade bins can be found in the syllabus. | . In CS61B, you may receive an incomplete on at most 2 projects or 1 project/1 exam. ",
    "url": "/policies/incompletes/#incompletes",
    
    "relUrl": "/policies/incompletes/#incompletes"
  },"133": {
    "doc": "Incomplete Grades",
    "title": "Incomplete deadlines",
    "content": ". | By default, the deadline to turn in incomplete assignments will be Sunday, August 24th (8/24). We will not be granting further extensions aside from exceptional cases. | For project 3, the latest deadline will be right before checkoff session 2. We will send an email regarding the exact date after the content schedule is finalized for Fall 2025. | . | If you are taking an incomplete on the final, you will take the Fall 2025 final exam. | . ",
    "url": "/policies/incompletes/#incomplete-deadlines",
    
    "relUrl": "/policies/incompletes/#incomplete-deadlines"
  },"134": {
    "doc": "Incomplete Grades",
    "title": "Is an incomplete right for you?",
    "content": "As you’re deciding whether to take an incomplete, we highly recommend talking to an academic advisor. Here are some links you may be able to use to set up an appointment: . | Data Science Advising | College of Engineering Advising | L&amp;S CS Advising | . An incomplete grants you additional time on assignments that you may not have been able to complete during the semester due to extenuating circumstances. However, there are drawbacks as well. | You’ll be working on the assignments during break, so you should expect to complete the assignments without official staff support. | Especially if you’re taking an incomplete on the final, you’ll be completing the incomplete work in parallel with your usual coursework. | You will not be able to receive an incomplete on the final if you take the exam this semester. | As per university policy from L&amp;S and College of Engineering, if you have 12+ units of incomplete grade at any instance of your academic career at Berkeley, you will not be allowed to enroll in classes next semester. | . You will not be able to request for an incomplete for this class if you have/had a misconduct case from course assignments or exams. An alternative to taking an incomplete is late dropping the course. With another chance at the course, you’ll have more time to learn the fundamental concepts and a chance to improve your grade. Many 61B assignments don’t change much from semester to semester, so a lot of your efforts this semester can be reused if you decide to retake the course. The late drop deadline is Friday, May 2nd (5/2). ",
    "url": "/policies/incompletes/#is-an-incomplete-right-for-you",
    
    "relUrl": "/policies/incompletes/#is-an-incomplete-right-for-you"
  },"135": {
    "doc": "Incomplete Grades",
    "title": "Requesting an incomplete",
    "content": "To request an incomplete, please fill out this form by Sunday, May 11th (5/11) at 11:59pm. We will be processing incomplete requests on a rolling basis. If you do not meet one of the requirements above, we will still review your request on a case-by-case basis. Please sign up for a student support meeting here to further discuss your case. ",
    "url": "/policies/incompletes/#requesting-an-incomplete",
    
    "relUrl": "/policies/incompletes/#requesting-an-incomplete"
  },"136": {
    "doc": "Incomplete Grades",
    "title": "FAQ",
    "content": "Timeline . Q: When can I request for an incomplete? . A: You can request for an incomplete grade from now until the request form closes on Sunday, May 11th (5/11) at 11:59pm. Q: When will I hear back regarding the decision of my incomplete request? . A: You should expect to wait for around 1 week (including business and non-business days) to hear back from us for a decision after submitting to the incomplete request form. Q: When should I start working on my incomplete assignment? When should I complete them by? . A: You can start working on your incomplete assignment anytime after your incomplete request is approved. For all asssignments except project 3, you should complete them by the deadline established above (8/24, 2025). For project 3, you should complete it before the intended checkoff session you want to attend. Q: When will my incomplete grade be resolved? . A: We will conduct two rounds of incomplete resolution processes: . | At the beginning of the Fall 2025 semester (after checkoff session 1) | Near the end of the Fall 2025 semester (after final). | . If you have an incomplete on project assignments, it will take us up to 3 weeks to resolve your incomplete after the deadline (8/24, 2025). If you have an incomplete on the final exam, it will take us up to 3 weeks to resolve your incomplete after Fall 2025’s final exam. It might take us longer to update your grade on CalCentral. If you need your grade to be finalized and released at an earlier date, please reach out to us through cs61b-incompletes@berkeley.edu. Q: I need to get my incomplete grade resolved and receive a letter grade earlier than the incomplete resolution time mentioned above. What should I do? . A: Feel free to reach out to us through cs61b-incompletes@berkeley.edu to discuss more about your situation. We will try our best to resolve your incomplete grade as soon as possible given the circumstances, but we cannot guarantee that we will be able to process everything in time. Q: How do I get my final grade result back after resolving my incomplete? . A: We will send you an email with the final grade and breakdown from cs61b-incompletes@berkeley.edu. Exam Incomplete Logistics . Q: How does the clobber work if I take an incomplete on the final? . A: We will calculate your z-score based on scores from next semester’s final (e.g. if you take the Fall 2025 final, your z-score is calculated relative to the Fall 2025 scores). That z-score will be used when clobbering your midterm scores from the current semester. You can find the exact calculation formula of your exam score here. Q: How will my exam grade be calculated if the semester I’m resolving incomplete has a different policy ? . A: We will calculate your grade according to the exam policies of this semester (Spring 2025). Assignment Incomplete Logistics . Q: How would I submit assignments that I take an incomplete on? . A: For incomplete assignments submitted to the autograder, you should submit them the same way as you normally do during the semester (i.e. submit your most recent implementation to the corresponding assignment autograder on gradescope). For Project 3, which requires a staff checkoff, we will be holding two checkoff sessions during Fall 2025: . | Checkoff session 1: First week of school. | Checkoff session 2: Regular project 3 checkoff session near the end of semester. | . Project 3 checkoff sessions will be hold separately by staff. We will send out information regarding sign ups before each checkoff session through email. By default, to receive credit for project 3, you must get checked off by the end of Fall 2025. Q: If I take an incomplete on Project 3, will I get a partner? . A: We may be able to find you a partner in some cases, but you should expect to work alone. Access and Communication . Q: What should I do if I’m not sure my situation qualifies for an incomplete, or intend to request an incomplete on more than 2 projects or 1 project/1 exam? . A: Please sign up for a student support meeting here to further discuss your case. We will have limited student support meeting slots from now till the end of the incomplete request window, so please reach out to us as soon as possible. If you are unable to sign up to meet, email cs61b-incompletes@berkeley.edu. Q: What kind of course resources do I have access as an incomplete student? . A: If your incomplete require access to Fall 2025’s logistics (i.e. content schedule, office hour schedule, project 3 checkoff), we will add you to the Fall 2025 Ed as an observer. You will be able to read announcements, posts, and other people’s comments but will not be able to ask questions directly. Q: Who should I email if I have any questions related to my incomplete after the semester ends? . A: cs61b-incompletes@berkeley.edu (We will also send any follow up details regarding your incomplete through this email.) . ",
    "url": "/policies/incompletes/#faq",
    
    "relUrl": "/policies/incompletes/#faq"
  },"137": {
    "doc": "Incomplete Grades",
    "title": "Incomplete Grades",
    "content": " ",
    "url": "/policies/incompletes/",
    
    "relUrl": "/policies/incompletes/"
  },"138": {
    "doc": "Course Info",
    "title": "General Background Information",
    "content": "Welcome to CS 61B . The CS 61 series is an introduction to Computer Science, with particular emphasis on software and machines from a programmer’s point of view. CS 61A covered high-level approaches to problem-solving, providing you with a variety of ways to organize solutions to programming problems as compositions of functions, collections of objects, or sets of rules. In CS 61B, we move to a somewhat more detailed (and to some extent, more basic) level of programming by focusing particularly on the efficiency of writing programs (design) and running programs (runtime). Prerequisites . This class assumes you have taken CS 61A, CS 88, or E7, or have equivalent background to a student who has taken one of these courses. The course is largely built upon the assumption that you have taken CS 61A. CS 88 and E7 students may find the beginning of the course to be a bit scarier, particularly when it comes to object oriented programming. We assume you are coming in with zero Java experience, but we will move through basic Java syntax very quickly. If you already have Java experience, great! We hope that you’ll help out yourfellow students in discussion, lab, and on our class forum, particularly in the opening weeks when everyone is catching up on Java. Alternatives . This is a course about data structures and programming methods. It happens to also teach Java, since it is hard to teach programming without a language. However, it is not intended as an exhaustive course on Java, creating Android apps, user interfaces, graphics, or any of that fun stuff. Some of you may have already taken a data structures course, and simply want to learn Java or C++. For you, self-study may be a better option. Finally, the 1-unit self-paced course CS 47B is for students with “sufficient partial credit in 61B,” allowing them (with instructor’s permission) to complete the CS 61B course requirement without taking the full course. The 47B guide is at this link. Mental Health and Wellness . As a student you may experience a range of issues that can cause barriers to learning, such as strained relationships, increased anxiety, alcohol/drug problems, depression, difficulty concentrating and/or lack of motivation. These mental health concerns or stressful events may lead to diminished academic performance or reduce a student’s ability to participate in daily activities. UC offers services to assist you with addressing these and other concerns you may be experiencing. If you or someone you know are suffering from any of the aforementioned conditions, consider utilizing the confidential mental health services available on campus. We encourage you to reach out to the Counseling Center for support. An on campus counselor or after-hours clinician is available 24/7. The National Suicide Prevention Lifeline is a 24-hour number any student or faculty/staff person can call to speak with someone about suicide: (800) 273-TALK (8255). More resources can be found under our Resources tab. If you’re experiencing extenuating circumstances impacting your mental health and would like to meet with a member of course staff to work out accommodations within the course, or would like to be connected to more resources, you can set up a meeting with us here. Accommodation . UC Berkeley is committed to creating a learning environment that meets the needs of its diverse student body including students with disabilities. If you anticipate or experience any barriers to learning in this course, please feel welcome to discuss your concerns with the instructors. If you have a disability, or think you may have a disability, you can work with the Disabled Students’ Program (DSP) to request an official accommodation. The Disabled Students’ Program (DSP) is the campus office responsible for authorizing disability-related academic accommodations, in cooperation with the students themselves and their instructors. You can find more information about DSP, including contact information and the application process here. If you have already been approved for accommodations through DSP or are working through the process, you can schedule a student support meeting with course staff here to ask any questions or develop an implementation plan if needed. ",
    "url": "/policies/#general-background-information",
    
    "relUrl": "/policies/#general-background-information"
  },"139": {
    "doc": "Course Info",
    "title": "Course Format",
    "content": "Lecture . Lecture is scheduled on Monday, Wednesday, and Friday from 1–2pm in VLSB 2050. Since the classroom is not large enough to allow all enrolled students to physically attend, lecture will be simultaneously webcast over Zoom. We will post lecture recordings as well as Josh Hug’s pre-recorded web videos to the content schedule on the main page. Both will cover the same content. Discussion . Discussion sections are 1 hour long and feature a worksheet with problems reviewing the material learned in the past week. In discussion sections, TAs will help students review the material and solve the problems on the worksheet. Note that your TA may not cover all the problems on the worksheet, and that’s intentional - you can review the remaining problems later with our posted solutions and walkthroughs. Discussion sections will primarily be held in-person, though we may have limited remote options on Zoom. The schedule of discussion sections can be found at the bottom of our course website’s main page. Information about the staff running each section can be found on the staff page. You can attend any section(s) you like. There are no signups. Discussion attendance is not mandatory, though you are given pacing points for attending. We have three (3) different types of discussions this semester: . Bridge (2hr): This is a two-hour discussion section intentionally organized for students who are not as familiar with the material that week, and want more emphasis on the concepts before diving into the discussion worksheet. It’s a great way to get a little more comfortable with the topics and receive more individualized attention during the section. The material and difficulty covered during the bridge discussion section will be the same as the regular discussion section, and we’ll have an extended mini-lecture to reinforce conceptual understanding. Regular (1hr): This section is best for students who are caught up with lectures and are ready to tackle some medium-difficulty questions. We recommend attending this section if you are unsure which to attend. Exam-level (1hr): Exam-level sections are faster-paced sections that cover a different worksheet with more difficult problems. The goal of these sections is to get comfortable with exam-level problems and problem-solving strategies. In general, there will be less focus on review/mini-lecture and more time spent on the problems. Lab . Lab sections are 2 hours long and feature coding assignments that students submit for credit. In these sections, TAs will introduce the assignment, review relevant material, and answer students’ questions. Similar to discussions, the schedule of lab sections can be found at the bottom of our course website’s main page. Information about the staff running each section can be found on the staff page. You can attend any section(s) you like. There are no signups. Discussion attendance is not mandatory, though you are given pacing points for attending. Labs will only be held in-person. Office Hours . In Office Hours, you can get help from our staff with the different assignments, exam preparation, logistical matters, and any advice you may need. We will hold both in-person and online office hours. You may also use lab sections to ask questions unrelated to lab. We will hold Office Hours over Zoom. To learn more about how CS 61B Office Hours work, please read our Office Hours Guide. We will use the online Office Hours Queue to keep track of students in Office Hours. Staff will always skip tickets on the queue that do not adhere to our Office Hours policies. ",
    "url": "/policies/#course-format",
    
    "relUrl": "/policies/#course-format"
  },"140": {
    "doc": "Course Info",
    "title": "Resources",
    "content": "Website . The course home page will provide one-stop shopping for course information. The course schedule as well as all handouts, homework, labs, FAQs, etc., will be posted there. Discussion Forum . Our discussion forum this semester will be Ed Discussions. For most questions about the course, Ed is the right place to ask them. The course staff reads it regularly, so you will get a quick answer. Furthermore, by posting online as opposed to emailing us directly, other students benefit by seeing the question and the answer. Don’t forget to check Ed before asking your question, just in case someone else has already posted it. If you have a question about something pertaining to your own code that shouldn’t be shared with the class, or if you have a question about a personal matter, you can make a private post on Ed, which will only be seen by the instructors and staff. Please read our Ed Guide and Policies. We will only respond to questions that adhere to our policies of using Ed. Official Staff Emails . Below are the two main staff emails that you might interact with throughout the semester: . | cs61b@berkeley.edu: emailing to this address will send a message to the course staff (instructors and the head/admin TAs). You can use it for correspondence that you don’t want to seen on our class forum. If you send a question that is of general interest, we may post the response on Ed (we will keep personal information out of it, of course). In general, you should expect a response within a few days. People who have the “CS61b@” tag on the staff page will have access to this email. | . If you have any problems that require an exception to course policy (e.g. medical emergencies or sudden necessary travel that result in extended absences), please contact cs61b@berkeley.edu. Please do not email the instructors or course staff for exceptions. | cs61b-student-support@berkeley.edu: This e-mail address will be mainly used to handle student support related concerns and send out decision emails for extenuating circumstances extension requests. You should email to this address if you have any questions or concerns related to student support meetings, extenuating circumstances, extensions, and DSP accommodations. People who have the “Student Support” tag on the staff page will have access to this email. | . You might interact with the following staff emails less often, but please direct any related questions if necessary: . | cs61b-misconduct@berkeley.edu: email used for handling misconduct-related tasks. You should email to this address if you have any questions or concerns related to the academic misconduct policy. | cs61b-incompletes@berkeley.edu: email used for handling incompletes. | . Beacon . Rather than using bCourses, we will be using our own custom learning management system called Beacon located at beacon.datastructur.es. You can use Beacon to keep track of your grades and late assignments. You can also read our full guide on Beacon here. Reading . There is no required textbook for the class. There is an online textbook written by myself and a large team of course staff. It can be found at https://cs61b-2.gitbook.io/cs61b-textbook/. If you find these notes insufficient, you might consider consulting Paul Hilfinger’s (free) Java Reference or Head First Java, 2nd Edition by Sierra and Bates (O’Reilly, 2005). These are not required for the course. The optional textbook for the weeks 5-14 of the course is Algorithms, 4th Edition by Wayne and Sedgewick. The official description of the Java core language is available online in The Java Language Specification (Java SE 21 Edition) by James Gosling, Bill Joy, Guy Steele, Gilad Bracha, Alex Buckley, Daniel Smith, and Gavin Bierman. It’s extremely thorough and precise, at the expense of being quite dense and technical. You may find the official Java 21 documentation to be useful as well. Software . This official coding environment and text editor for the course is the Integrated Development Environment (IDE) called IntelliJ. While we will not enforce using IntelliJ, we strongly recommend it. We will not officially support any editing or programming environment other than IntelliJ. This semester, we will use Java 17 or higher. We require you to have an IntelliJ 2023.2 or higher in order to prevent setup issues with our style checker. You will be able to do any work you’d like on any Windows, Mac OS X, or Linux computer. You will set up your own computer in Lab 1. We’ll be using the version-control system Git this semester with private repositories on GitHub. Version-control systems allow you to maintain a series of “snapshots” of your files at various points in their development. Used properly, this provides you some back-up protection, so that you can recover previous states of your work when something goes wrong. Also for team-oriented projects (as well as in the real world), version-control systems help manage collaborative work. ",
    "url": "/policies/#resources",
    
    "relUrl": "/policies/#resources"
  },"141": {
    "doc": "Course Info",
    "title": "Coursework",
    "content": "There are five required aspects of the course for which you earn points: . | Weekly Surveys | Lab Assignments | Homeworks | Projects | Exams | . Weekly Surveys . While lecture and section attendance is not required, nor even expected, we do expect you to stay up to date with material. To help us keep track of your progress and sentiment about the course, there will be 12 weekly surveys due on Mondays at 11:59 PM, with a 24 hour grace period. Submitting 10 weekly surveys will receive full credit (i.e. you can skip 2). Submitting more will not yield extra credit. Lab Assignments . During Phase I of the course (Weeks 1 through 5), labs will provide you with help getting your computer set up and teach you how to use essential Java programming tools, and will also include a peer code review after we’re done with Project 1. During Phases II and III of the course (Weeks 6 - 15), labs will usually involve implementation of some data structure or algorithm described in lecture. All labs should take no more than two hours to complete, though some may run slightly longer. You will turn in everything electronically using GitHub, and your results will be available on Gradescope. Labs are graded according to autograder tests on Gradescope. There are no hidden tests for which your score is not displayed, though we may have tests which you do not have access to. There are 8 labs, worth a total of 40 points (5 points per lab). You do not need to attend lab to receive credit for lab. This semester, we are not allowing lab partners for lab assignments. We do encourage you to discuss ideas (see the Lab Collaboration policy), but the code you submit should be your own. No labs will be dropped, though we have a generous lateness policy. Homeworks . There are 5 required homework assignments in the course. We have three kinds of homework: . | Programming homeworks (HW0, HW2), which will be similar to labs. | HW1 is a homework about being a good classmate in CS courses. It is intended to set the norms for the course, and remind us as to how we can respect and include all members of the Berkeley community in CS 61B. | Conceptual assignments due shortly before midterm 2 (HW3) and the final (HW4) to help you study for the exams. They will be available on Gradescope and include a combination of multiple choice and fill-in-the-blanks questions. You can expect to have to work out these problems on paper before filling in your answer on Gradescope. | . Homeworks 0, 1, 3, and 4 are worth 15 points. Homework 2 is more challenging, time-consuming assignment and will be worth 30 points. No homeworks will be dropped, though we have a generous lateness policy. Projects . In addition to the HWs and labs, there will be 4 programming projects. In these projects you will build an entire system. All projects except project 3 must be completed on your own. Project 0 and 1 will be relatively easier than projects 2 and 3, taking less time and with greater levels of scaffolding. Project 2 will be a larger scale design project with very little skeleton code. Project 3 will be a capstone project in which you will design a project from scratch. Depending on how ambitious you are, it might end up being much more work than Project 2. Each project has a specific theme: . | Project 0 (2048): Introduction to Java | Project 1 (Deques): Basic Design, Testing, and Code Review | Project 2 (Ngordnet): Design, Large Scale Implementation | Project 3 (BYOW): Large Scale Design | . Projects will have different grader release schedule and restrictions on the number of allowed submissions per a time interval. Full grader details will be provided on the release of each project. Projects 0, 1, 2, and 3 will be worth 50, 50, 125, and 125 points respectively. Project 3 . As Project 3 is a large-scale design project, it will be have some differences from the other three projects. Project 3 will have a synchronous checkoff portion. We’ll release instructions about how to sign up for a checkoff in the last week of class. For Project 3, all students will be required to work with a partner. You will either be able to choose a partner to work with or request to be paired up with another student who has similar working habits and goals as you. One of the main goals of CS 61B is to give you the tools to become a successful software engineer, one of which is the ability to work effectively with others. Barring extreme circumstances, we will not approve for students to officially work alone on Project 3. If you think you have a compelling reason for working alone on Project 3, we will release a form that you can fill out closer to the release of the project (keep an eye on Ed for this) - we will let you know if your request is approved shortly before the release of Project 3. Full details on partnerships can be found here. Exams . See the exam policies page. Extra Credit . Extra credit is very limited in this course, because we would rather you achieve your grade by demonstrating your knowledge on the assignments and exams. That said, here are a few: . | Pre-semester survey (2.5 points) | Mid-semester survey (2.5 points) | End-of-semester survey (2.5 points) | Official university course evals (up to 2.5 points) | . We may add additional extra credit, but do not expect us to do so. Pacing Points . There are three ways to earn “pacing” points, which are given for keeping up with the class. | Attending discussion synchronously (in person or online) | Attending lab synchronously (in person or online) | Attending live/Zoom lecture, watching the pre-recorded videos, or watching the recorded lectures on time (before the start of the subsequent lecture). | . Each discussion or lab is worth 0.5 pacing points. Each lecture is worth 0.5 pacing points. You may earn up to 16 pacing points. We will calculate pacing points using attendance forms and pacing point assignments. Specifically: . | To get pacing points from discussion/lab: fill out the attendance form at the end of each discussion/lab section with the correct secret word. | To get pacing points from attending lectures: complete the corresponding pacing point assignments with full score. | . Pacing point assignments are short, formative assessments that test your understanding of the lecture material. There is one pacing point assignment per lecture that contains key content, and you can find them linked as “Pacing” next to the lecture video and recordings. You have unlimited attempts to each pacing point assignment, but you must have a full score submission in order to get credit for pacing points. There are no deadlines, and you can submit to the pacing point assignments at any point in the semester to get credit before May 11th. Pacing points are added to your score, but cannot increase your score beyond 750 points. In other words, if you have 740 points and 15 pacing points, your final score will be 750 points. ",
    "url": "/policies/#coursework",
    
    "relUrl": "/policies/#coursework"
  },"142": {
    "doc": "Course Info",
    "title": "Grades",
    "content": "Your letter grade will be determined by the total points out of the possible 1000. In other words, there is no curving in this course, other than the clobbering policy above. Your grade will depend on how well you do relative to the bins, and not on how well everyone else does. Though we do not usually do this, we reserve the right to lower the the grading bins for 61B if grades are too low. We will not raise them. | Category | Percentage | Points | . | Homeworks | 9% | 90 | . | Labs | 4% | 40 | . | Surveys | 2% | 20 | . | Projects | 35% | 350 | . | Midterm 1 | 10% | 100 | . | Midterm 2 | 15% | 150 | . | Final Exam | 25% | 250 | . | Total | 100% | 1000 | . | A | A- | B+ | B | B- | C+ | C | C- | D | F | . | 920 | 860 | 800 | 740 | 680 | 620 | 560 | 500 | 400 | 0 | . These bins were designed to comply with departmental guidelines that the average GPA for a lower-division required course be in the range 2.8–3.3 (including students who drop or take the class for a P/NP grade). We will round all grades up to the nearest multiple of 10 (e.g. 300.01 rounds to 310). This is the only rounding we will do. Please do not contact us about further rounding or exceptions. If you are taking the course P/NP, any grade of C- or better will automatically be converted to a P. (Source: Registrar’s office.) . We will grant grades of Incomplete only for dire medical or personal emergencies that cause you to miss the final, and only if your work up to that point has been satisfactory. Do not try to get an incomplete simply as a way to have more time to study or do a project. That is contrary to University policy. Before requesting an Incomplete grade, please contact a college advisor or review your college’s Incomplete grade policies to understand if this is a right option for you. ",
    "url": "/policies/#grades",
    
    "relUrl": "/policies/#grades"
  },"143": {
    "doc": "Course Info",
    "title": "Collaboration and Academic Misconduct",
    "content": "Deadlines can be stressful, and we know that under extreme pressure, it becomes tempting to start rationalizing actions that you would otherwise consider inappropriate. Perhaps you’ll find yourself facing a CS 61B project deadline, and under all this stress you’ll convince yourself that you’re just going to cheat for the moment so you can get the points, and that you’ll come back later and really learn the thing you were supposed to have learned in order to restore your karmic balance (I’ve heard something along these lines a few times). Please don’t do this. We care that you learn the material, and that your grade reflects your learning, regardless of the timeline. If you feel that you need to engage in academic misconduct to meet a deadline, please reach out to course staff. Academic misconduct on any homework, lab or project will result in requiring you to write an anonymous reflection to be posted on this course website and to resubmit the assignment. A second instance of plagiarism on a homework, lab, or project will result in an F in the course. All incidents of plagiarism will be referred to the Office of Student Conduct, including shared code with others. Given our friendly lateness policy, there will be no exceptions to this rule. During the Spring 2017 semester, we compiled a series of incident reports written by students who were caught plagiarizing. If you find yourself tempted to cheat, you might turn to the words of others who have made the wrong choice for guidance. Homework and Lab Collaboration . The entire point of homework and labs is to learn. For homework or labs, you should feel free to collaborate with others however you choose, though keep in mind that greater independence is likely to give you a better learning experience (as long as you aren’t totally stuck). Even though we will allow close collaborations on HW and labs, the solutions you submit should still be your own work! Identical or near identical submissions will be treated as plagiarism. Project Collaboration . By contrast, the projects were designed not just for learning (particularly how to be self-reliant in the context of large unfamiliar systems), but also for the dual purpose of evaluating your mastery of the course material. As such, they are intended to be completed primarily on your own (or with your partner on project 3, which allow partners), particularly when it comes to writing the actual code. Exam Misconduct . For exams, we will be absolutely unforgiving. Any incident will result in a failing grade for the course, though Berkeley will let you retake CS 61B next semester. As above, all incidents of cheating will be referred to the Office of Student Conduct. Academic Misconduct . What constitutes cheating? The golden rule of academic dishonesty is that you should not claim to be responsible for work that is not yours. This is obviously open to some interpretation, and you’ll be getting some help from instructors, the internet, other students, and more throughout the course. This is OK, and we hope that the class is an open, welcoming, collaborative environment where we can help each other build the highest possible understanding of the course material. To help (but not entirely define) the bounds of acceptable behavior, we have three important rules for coding assignments: . | By You Alone: All code that you submit (other than skeleton code) should be written by you and your partner alone, except for small snippets that solve tiny subproblems (examples in the Permitted section below). | Do Not Possess or Share Code: Before you’ve submitted your final work, you should never be in possession of solution code that you (or your partner) did not write. Looking up solution code online is effectively possessing solution code. You will be equally culpable if you distribute such code to other student or future students of 61B (within reason). DO NOT GIVE ANYONE YOUR CODE – EVEN IF THEY ARE DESPERATELY ASKING. DO NOT POST SOLUTIONS ONLINE (on GitHub or anywhere else)! If you’re not sure what you’re doing is OK, please ask. | Cite Your Sources: When you receive significant assistance on a coding assignment from someone else, you should cite that assistance somewhere in your source code with the @source tag in a comment. We leave it to you to decide what constitutes ‘significant’. However, citing does not change the extent of collaboration or reference allowed. Examples: . // @source I worked with [person], the code below receives a list of objects // and iterates through the list until it finds the number 3 and // returns the index... // @source From https://stackoverflow.com/questions/16242733/sum-all-the-elements-java-arraylist, // the following code iterates through the list and sums its values... // @source This code was generated by ChatGPT. It reads and parses // all integers from the file, which I then pass into my computeSum method... | . For clarity, some examples of specific activities are listed below: . Permitted: . | High-level discussion of approaches for solving a problem. | Giving away or receiving significant conceptual ideas towards a problem solution. Such help should be cited as comments in your code. For the sake of other’s learning experience, we ask that you try not to give away anything juicy, and instead try to lead people to such solutions. | Discussion of specific syntax issues and bugs in your code. | Using small snippets of code that you find online for solving tiny problems (e.g. googling “uppercase string java” may lead you to some sample code that you copy and paste into your solution). Such usages should be cited as comments in your HW, lab, and especially project code! | . Permitted with Extreme Caution: . | Working on a project alongside another person or group of people. Your code should not substantially resemble anyone else’s! | Use of GitHub Copilot / ChatGPT / Claude / etc. If you’re just generating some amount of boilerplate code, that’s ok. However, you should not use such tools to generate non-trivial methods. We are trying to build your fundamental skills, and leaning on an AI is going to cause you trouble in circumstances where you don’t have an AI to help, such as exams. Any AI generated code must be cited and explicitly commented as such. Violation of this citation rule is a serious act of plagiarism. Note that generative AI is designed to output data that looks correct, not output data that is correct. As such, AI-generated code, especially from sources like ChatGPT, is often subtly buggy or completely incorrect. | Sending code to someone at a company when you are applying for a job. You should never send code publicly. Rather, you can add the recipient as a private collaborator to your Github repository. | . Absolutely Forbidden: . | Typing or dictacting code into someone else’s computer is a violation of the “By You Alone” rule. | Possessing another student’s code in any form before a final deadline, be it electronic or on paper. This includes the situation where you’re trying to help someone debug. Distributing such code is equally forbidden. | Possessing solution code that you did not write yourself (from online (e.g. GitHub), staff solution code found somewhere on a server it should not have been, etc.) before a final deadline. Distributing such code is equally forbidden. Looking at solution code online counts as possessing code. | Posting solution code to any assignment in a public place (e.g. a public git repository, Google Drive, Discord, etched into stones above the Mediterranean, etc). This applies even after the semester is over. | Working in lock-step with other students. Your workflow should not involve a group of people identifying, tackling, and effectively identically solving a sequence of subproblems. | . We have advanced cheating detection software, and we will routinely run this code to detect cheating. Every semester, we catch and penalize a significant number of people (roughly 100 cases per semester). Do not be one of them. If you find yourself at such a point of total desperation that cheating begins to look attractive, contact one of the instructors. Likewise, if 61B is causing massive disruption to your personal life, please email cs61b (at) berkeley.edu. In essence, our ultimate goal is for students to grasp the code they’ve crafted. It’s not just about completing projects; it’s about cultivating a deep comprehension of their code. We assign these projects to give you an opportunity to build a strong foundation in coding, ensuring that you truly understand the core principles behind the concepts we teach in this course. If you admit guilt to an act of plagiarism before we catch you, you will receive the same penalty, but we will not refer your case to the Center of Student Conduct. However, we would strongly prefer that you ask us for additional time before opting to plagiarize. Obviously, the expressive power of Java is a subset of the English language. And yes, you can obviously obey the letter of this entire policy while completely violating its spirit. However, this policy is not a game to be defeated, and such circumventions will be seen as plagiarism. If you would like to review our academic misconduct resolution procedures, you can find them here. Reusing Code from Past Semesters . If you have completed assignments during past semesters and would like to reuse your work, you do not have to let staff know ahead of time. However: . | We cannot promise that the assignments are identical across semesters. | By submitting work from past semesters, in part or in whole, you are claiming that the work submitted is completed entirely by you (and if applicable, your former project partner). If you are unsure if the work is your (and if applicable, your former project partner’s) original work, we’d recommend redoing the assignment from scratch. | If you intend to reuse code for Project 3 (a partner project), you may be required to work alone. If you had a project partner while working on your project originally, you may submit the portions of the projects that they completed. | . ",
    "url": "/policies/#collaboration-and-academic-misconduct",
    
    "relUrl": "/policies/#collaboration-and-academic-misconduct"
  },"144": {
    "doc": "Course Info",
    "title": "Late Adding CS61B",
    "content": "If you are attempting to officially enroll in CS 61B late in the semester, you must turn in all outstanding course assignments within 5 days of joining the course. This means that you should be following along with the course schedule, even before you enroll in the class. Please use the Late Add Intent form if you are waiting to be enrolled and need access to course platforms. If you’d like to meet with course staff for advice on catching up with the course, you can set up a student support meeting. ",
    "url": "/policies/#late-adding-cs61b",
    
    "relUrl": "/policies/#late-adding-cs61b"
  },"145": {
    "doc": "Course Info",
    "title": "Auditing CS61B",
    "content": "This is for students who are unofficially auditing this class. Maybe you are a non-Berkeley student who wants to brush up on your programming knowledge or even a high school student who wants to get a head start on your programming career. If this sounds interesting to you, we have set up a public autograder for the Spring 2021 version of the course. To get everything set up, go to Gradescope and select the “Add a course” button. Enter course code MB7ZPY to be added. You will not be given a student repo, so you will have to create your own on GitHub in order to submit assignments. After you complete setup and lab1, you will also have access to all the code for the class. That’s all you have to do! All lectures, worksheets, and specs will be available on the Spring 2021 Website. Note: you should be using the Spring 2021 skeleton, website, and gradescope. You will not be using any resources from this current semester. Every term we change assignments and lectures up a little bit, so make sure to stick to the Spring 2021 verion of things. Note: If you’re auditing the course, you will not be able to access Beacon. Instead, you can directly clone the skeleton repo to get a copy of the starter code. We cannot add auditors to private platforms (e.g. bCourses, Ed, current semester’s Gradescope). All the information we can publicly share is available on this course website. We also cannot offer staff support (e.g. debugging help) for auditors. ",
    "url": "/policies/#auditing-cs61b",
    
    "relUrl": "/policies/#auditing-cs61b"
  },"146": {
    "doc": "Course Info",
    "title": "Acknowledgements",
    "content": "Some course handout material derived from previous terms, professors, and GSIs. ",
    "url": "/policies/#acknowledgements",
    
    "relUrl": "/policies/#acknowledgements"
  },"147": {
    "doc": "Course Info",
    "title": "Course Info",
    "content": "This document provides an overview of the policies for this course as taught at UC Berkeley. ",
    "url": "/policies/",
    
    "relUrl": "/policies/"
  },"148": {
    "doc": "Lab 03: Debugging (Part 2)",
    "title": "FAQ",
    "content": "The FAQ for Lab 03 is here. ",
    "url": "/labs/lab03/#faq",
    
    "relUrl": "/labs/lab03/#faq"
  },"149": {
    "doc": "Lab 03: Debugging (Part 2)",
    "title": "Introduction",
    "content": "This is a continuation of debugging from last week. In this week’s lab, we will be utilizing the debugging tools we used last week and gaining more practice with debugging. The goal for today’s lab is to learn more about the following: . | Reading the stack trace and knowing how to isolate the bug from it. | Understanding the different types of exceptions we might run into. | Getting more comfortable using the IntelliJ debugger. | Exception breakpoints, expressions and watches (optional). | . As usual, don’t hesitate to look things up if you’re unsure what something means, particularly, what a specific exception or error means if it comes up in the stack trace (which we’ll be covering in today’s lab). The hints are meant to guide your thinking, but we encourage you to try going through the lab on your own first before opening the hints. ",
    "url": "/labs/lab03/#introduction",
    
    "relUrl": "/labs/lab03/#introduction"
  },"150": {
    "doc": "Lab 03: Debugging (Part 2)",
    "title": "Adventure",
    "content": "Running the Game and Tests . The very first thing you should do is run the main method in AdventureGame to run through the game. Follow the instructions that are given once you run through the game. This will give you a sense of what the program you are debugging is supposed to do (if you run into an error, that’s normal). Then, after you’ve run the game, run the tests in tests/adventure/AdventureGameTests. They should fail on BeeCountingStage which will lead you into debugging the first error below (note that all the tests will be failing at this point). To pass the entirety of AdventureGameTests, you’ll need to fix all the individual stage tests (fixing one stage will show that you passed that individual stage). The stages are meant to be completed in order of the spec. We encourage you to run through the game for each stage you complete to see how they’re all related to the game. Don’t forget to commit frequently to save your progress! . Reading Stack Traces . When a runtime error occurs in Java, a stack trace is printed to the console to provide information on where the error occurred and what steps the program took to get there. When running Adventure for the first time, your stack trace will look something like this: . The first thing to note is what kind of error occurred; this is shown at the first line of the stack trace. In this case, our code threw a NullPointerException. For some exceptions, including NullPointerExceptions, Java will give you an explanation. Here, this.input is null, so we can’t invoke (call) a method on it. The lines beneath it represent the sequence of methods the program took to arrive at the error: the first line in the list is where the error occurred and the line beneath it represents the line of code that called the method which threw the error, and so on. You can click on blue text to navigate to that file and line. To get a sense of how you would interpret stack traces in, you would usually start from the top. As mentioned, the first line in the stack trace is where the error occurred - in other words, it is the last method call that took place before the error, so you can use that to isolate where the bug is. Depending on how the program is written, how it’s designed and what code you’ve written/contributed, you would navigate to the appropriate line in the stack trace and click on the blue text to go that line and start debugging. For each of the following stages, only change what is necessary! You should not be rewriting entire blocks of code unless otherwise specified. We’ve included how many lines we changed as a guideline. You can run through the adventure game each time if you’d like to validate correctness, but you don’t need to - feel free to debug through the tests directly. For each file you’ll be working in, it contains a playStage method, and you can set a breakpoint in that method. From there, you can start debugging in AdventureGameTests. Debug BeeCountingStage . Fix the NullPointerException that occurs in BeeCountingStage by analyzing the stack trace. You can ignore the lines with &lt;XX internal lines&gt;; these are from test framework or library code and usually won’t help you find errors. Expected lines modified: 1 . Hint 1 . Just because the error occurs on a certain line doesn’t necessarily mean that piece of code is incorrect - something not shown in the stack trace may be the elusive culprit! . Hint 2 . Take a close look at the constructor. Look at the variables that are declared and what is instantiated. It turns out that this isn’t the only error in BeeCountingStage! . Fix the IndexOutOfBoundsError that occurs in BeeCountingStage. Ignore the grey links to Objects.java and ArrayList.java at the top of the stack trace. The error may have occurred in code that was not yours, but the root cause was probably something your code tried to do. Expected lines modified: 1 . Hint 1 . Don’t forget, Java is 0-indexed! . Debug SpeciesListStage . Fix the error(s) in SpeciesListStage. If you don’t see what the issue is inside the method where the exception occurred (the top line of the stack trace), it’s often a good idea to look at the second line to see where the method is being called from, and with what arguments. Expected lines modified: 3-4 . Hint 1 . Consider the possibilities for lists. Does the code account for all of them? Are there any edge cases the code fails to handle? . It might also help to read the javadoc comments above the method to gain more context on what the method does. You should not need to edit handleResponses. Debug PalindromeStage . Sometimes, IntelliJ will tell you something that it thinks is wrong. Hover over the yellow / orange highlights in the method with the bug (in the digitsToIntList method in PalindromeStage - you can navigate to it through the stack trace). Does that give you any useful information? Use this feature to address the error in PalindromeStage. If the debugger feels unresponsive, it is usually due to an infinite loop somewhere in your code. If you set a breakpoint and it is never reached, then you know an infinite loop occurs before the breakpoint! Use this in combination with stepping to isolate the problem. There are two bugs in this part that you’ll need to fix. Fix the most obvious one first and then try to isolate and solve the second one. The hint for this part of the lab applies to the second bug that needs to be resolved. Expected lines modified: 3 . Hint 1 (Only applies to second bug) . If you haven’t already, read through the note above. Look at the method where digitsToIntList is called on. If you set a breakpoint in the method and run through the debugger, do we ever exit out the while loop? What is the condition we need to meet to break out of the while loop? Is it being met? Try using the Java Visualizer in conjunction so you can inspect the bug more closely with the visualizer. Debug MachineStage . The sumOfElementwiseMax method in MachineStage is supposed to take two arrays, compute the element-wise max of those two arrays, and then sum the resulting maxes. For example, for two arrays {2, 0, 10, 14} and {-5, 5, 20, 30}, the element-wise max is {2, 5, 20, 30}. In the second position, the larger of 0 and 5 is 5. The sum of this element-wise max is $2 + 5 + 20 + 30 = 57$. There are two different bugs that make the method return an incorrect result. You can assume the input parsing code in playStage works correctly. To find the bugs, you should not need to step into the mysteryMax or mysteryAdd functions, or even understand what they are doing. That is, you should use to only see the result. These are mysterious functions that are deliberately obfuscated. If you find yourself having accidentally stepped into one of these two functions, use the button to escape. Even without stepping INTO these functions, you should be able to tell whether they have a bug or not. That’s the glory of abstraction! Even if I don’t know how a fish works at a molecular level, there are some cases where I can clearly tell that a fish is dead. Fix the two bugs so that sumOfElementwiseMax returns a correct result. If you find a bug in mysteryMax or mysteryAdd, rewrite the faulty method entirely instead of trying to fix it. Don’t rewrite code unnecessarily, though – be sure that it’s broken first! Expected lines modified: 2-5 . Hints . | Understand what the sumOfElementwiseMax function is supposed to do. When you give inputs to the game, try computing the answer by hand or with a calculator. Verify your computation against the output, and you’ll see that the output is incorrect. | Set a breakpoint on the line that calls sumOfElementwiseMax. When you run the debugger, step into sumOfElementwiseMax, then use to see the result of the call to arrayMax. Is the output of arrayMax what you expect it to be? | You should step into arrayMax if you think that there’s a bug there. Don’t step into mysteryMax, though – if and only if you think it has a bug, rewrite it completely. | Repeat for arraySum and mysteryAdd. | . ",
    "url": "/labs/lab03/#adventure",
    
    "relUrl": "/labs/lab03/#adventure"
  },"151": {
    "doc": "Lab 03: Debugging (Part 2)",
    "title": "Another Debugging Puzzle?! [OPTIONAL]",
    "content": "The rest of the lab is optional. We’ll cover some additional tools that you can use in the IntelliJ debugger that you may find useful - exception breakpoints and expressions and watches. Do not modify Puzzle.java! . These exercises will involve working with code that may seem quite cryptic and unfamiliar. Enforce the abstraction barriers and try to find the answers without having to understand exactly what is going on! . Exception Breakpoints . When debugging, you may sometimes run into an unexpected error, making it difficult to figure out what is wrong with your code. To help with this, IntelliJ allows you to set breakpoints on exceptions. These ensure that when your code throws an exception, the debugger will pause execution and allow you to inspect the state of your program. Go ahead and run the Puzzle class. You should see the following output: . For many common exceptions, IntelliJ will indicate a “Create breakpoint” button in the console output (just to the right of java.lang.RuntimeException in the above screenshot), which will allow you to access the advanced breakpoint window. To access it without this button, create a breakpoint on any line (in the following screenshot, we’ve created a breakpoint on line 23), right-click it, and select “More”. The advanced breakpoint window should look something like this: . There’s a lot going on here, but you don’t need to understand most of it. Click the plus symbol in the top-left corner, and you should see a popup like this: . Select “Java Exception Breakpoints”, and another window will appear where you can specify the type of exception for which we want to pause execution. The console told us that we were getting a java.lang.RuntimeException, so go ahead and select that. You should now see the original advanced breakpoint window, with a newly created exception breakpoint aptly named ‘java.lang.RuntimeException’ (if you used the console’s “Create breakpoint” button to access the window, you may see two copies of this, and that’s okay). You will have the option to break on caught or uncaught exceptions, or both. This can be useful because a lot of library code intentionally throws and catches a lot of exceptions, so this allows us to focus on the unhandled ones if necessary. For now, go ahead and leave both options checked. If you debug the program at this point, your code should pause on line 53, with a little lightning bolt symbol in place of the usual red circle. This indicates that the breakpoint was triggered by an exception, rather than a normal breakpoint. From this, we can see that IntelliJ is hinting that the problem may be in src/puzzle/answer.txt. By inspecting that file, poking around Puzzle.java, and using other debugging techniques you learned in Lab 02 and this lab, can you figure out what’s going on? . Fix answer.txt so that Puzzle no longer throws a RuntimeException. Feel free to look at the hint if you’re stuck! . Hint . The issue is that Puzzle.java parses answer.txt for an integer guess, and doesn’t find any, so it throws an exception. To fix this, replace the TODO line of answer.txt with any integer. After fixing the bug, run Puzzle again. You should now see the following output: . Read the error message and see if you can find the answer! If you’ve got it correct, Puzzle.java will no longer error and you should pass testPuzzle inside of tests/puzzle/PuzzleTest. Replace the value in answer.txt so that Puzzle no longer errors. Expressions and Watches . When debugging, you may not always have the value that you want to inspect stored in a variable. Luckily, IntelliJ has a solution for us! Once paused on a certain line, you can use the “Evaluate Expression” tool (shaped like a calculator). You can click on the calculator icon to open up a whole new window, but you can also just type the expression into the debugger directly: . You can use variables and method calls with this tool too! Even though we’ve only used Math library methods in the following example, you can call anything you want. Here, we are using the tool in Puzzle.java with an initial answer guess of 973: . After you resume the program, result will be lost. If you don’t want to lose it, you can use Ctrl+Shift+Enter (Windows) or Cmd+Shift+Enter (Mac) to add it as a watch. This will keep it around even after you continue execution. Moreover, watches will change value accordingly with the program, just like normal variables would! . Watches will persist even after you stop and rerun your program, so they can be very useful for debugging over multiple executions. As an example, I’ve changed my guess from before to be 1717 and reran the program entirely, but didn’t have to re-evaluate the expression for the debugger to tell me what it was! . There won’t be an associated exercise with this part, but we think it would be a useful thing to know about! . Congratulations, you’ve made it to the end of Lab03! . ",
    "url": "/labs/lab03/#another-debugging-puzzle-optional",
    
    "relUrl": "/labs/lab03/#another-debugging-puzzle-optional"
  },"152": {
    "doc": "Lab 03: Debugging (Part 2)",
    "title": "Deliverables and Scoring",
    "content": "The lab is out of 5 points. There are no hidden tests on Gradescope. If you pass all the local tests for Adventure, you will receive full credit on the lab (unless you modified things you weren’t supposed to modify). To reiterate, “Another Debugging Puzzle?!” is optional for this lab. The final deliverables are: . | BeeCountingStage (1.25 pts) | SpeciesListStage (1.25 pts) | PalindromeStage (1.25 pts) | MachineStage (1.25 pts) | . ",
    "url": "/labs/lab03/#deliverables-and-scoring",
    
    "relUrl": "/labs/lab03/#deliverables-and-scoring"
  },"153": {
    "doc": "Lab 03: Debugging (Part 2)",
    "title": "Submission",
    "content": "Just as you did for the previous assignments, add, commit, then push your Lab 03 code to GitHub. Then, submit to Gradescope to test your code. If you need a refresher, check out the instructions in the Lab 1 spec and the Assignment Workflow Guide. ",
    "url": "/labs/lab03/#submission",
    
    "relUrl": "/labs/lab03/#submission"
  },"154": {
    "doc": "Lab 03: Debugging (Part 2)",
    "title": "Lab 03: Debugging (Part 2)",
    "content": " ",
    "url": "/labs/lab03/",
    
    "relUrl": "/labs/lab03/"
  },"155": {
    "doc": "Homework 2: Percolation",
    "title": "Due: 3/7/2025",
    "content": "In contrast with previous homework assignments, this homework is comparable to a project in length. Start early. You have been warned. We will not grant extensions for failing to understand the depth of this homework. ",
    "url": "/homeworks/hw2/#due-372025",
    
    "relUrl": "/homeworks/hw2/#due-372025"
  },"156": {
    "doc": "Homework 2: Percolation",
    "title": "FAQ",
    "content": "Each assignment will have an FAQ linked at the top. You can also access it by adding “/faq” to the end of the URL. The FAQ for Homework 2 is located here. ",
    "url": "/homeworks/hw2/#faq",
    
    "relUrl": "/homeworks/hw2/#faq"
  },"157": {
    "doc": "Homework 2: Percolation",
    "title": "Getting the Skeleton Files",
    "content": "Please follow the Assignment Workflow Guide to get started with this assignment. This assignment is hw2. ",
    "url": "/homeworks/hw2/#getting-the-skeleton-files",
    
    "relUrl": "/homeworks/hw2/#getting-the-skeleton-files"
  },"158": {
    "doc": "Homework 2: Percolation",
    "title": "Introduction",
    "content": "In this program, we’ll write a program to estimate the value of the percolation threshold via Monte Carlo simulation. Intro Video . An introductory video for this HW can be found at this link. It is broken into three parts: Intro, Implementation Spoilers, and Optimization Spoilers. Feel free to ignore these spoilers for a more difficult challenge. If you’d prefer to watch a eight year old video that Professor Hug made when he was at Princeton, see this link. Note that these videos mention implementing PercolationStats.java; we’ve now given you the full solution for this class, so you don’t need to worry about this step. HW2 Slides . Slides for this HW can be found here. Because this is a HW and not a project, we give spoilers for how to approach the HW. You may ignore them if you’d like a bigger challenge. Who cares? . Given a composite systems comprised of randomly distributed insulating and metallic materials: what fraction of the materials need to be metallic so that the composite system is an electrical conductor? Given a porous landscape with water on the surface (or oil below), under what conditions will the water be able to drain through to the bottom (or the oil to gush through to the surface)? Scientists have defined an abstract process known as percolation to model such situations. The Model . We model a percolation system using an N-by-N grid of sites. Each site is either open or blocked. A full site is an open site that can be connected to an open site in the top row via a chain of neighboring (left, right, up, down) open sites. We say the system percolates if there is a full site in the bottom row. In other words, a system percolates if we fill all open sites connected to the top row and that process fills some open site on the bottom row. (For the insulating/metallic materials example, the open sites correspond to metallic materials, so that a system that percolates has a metallic path from top to bottom, with full sites conducting. For the porous substance example, the open sites correspond to empty space through which water might flow, so that a system that percolates lets water fill open sites, flowing from top to bottom.) . In the diagrams below, you can see that in the system on the left, the water is able to start in a site on the top row and trickle down through empty sites until it reaches an empty site on the bottom row. Whereas on the right, the water in the site on the top row has no way of trickling down to an open site on the bottom row. ",
    "url": "/homeworks/hw2/#introduction",
    
    "relUrl": "/homeworks/hw2/#introduction"
  },"159": {
    "doc": "Homework 2: Percolation",
    "title": "Percolation.java",
    "content": "Percolation class . To model a percolation system, complete the Percolation class with the following API: . public class Percolation { public Percolation(int N) // create N-by-N grid, with all sites initially blocked public void open(int row, int col) // open the site (row, col) if it is not open already public boolean isOpen(int row, int col) // is the site (row, col) open? public boolean isFull(int row, int col) // is the site (row, col) full? public int numberOfOpenSites() // number of open sites public boolean percolates() // does the system percolate? } . The Percolation Problem . In a famous scientific problem, researchers are interested in the following question: if sites are independently set to be open with probability $p$ (and therefore blocked with probability $1 − p$), what is the probability that the system percolates? When $p$ equals 0 (no site is open), the system does not percolate; when $p$ equals 1 (all sites are open), the system percolates. The plots below show the site vacancy probability $p$ versus the percolation probability for 20-by-20 random grid (left) and 100-by-100 random grid (right). When $N$ is sufficiently large, there is a threshold value $p^*$ such that when $p &lt; p^*$ a random N-by-N grid almost never percolates, and when $p &gt; p^*$, a random N-by-N grid almost always percolates. No mathematical solution for determining the percolation threshold $p^*$ has yet been derived. Your task is to write a computer program to estimate $p^*$. Fill out Percolation.java by implementing all the methods given in the above API. The WeightedQuickUnionUF class . The WeightedQuickUnionUF class is provided by Princeton’s algs4 library, and has the following API: . public class WeightedQuickUnionUF { public WeightedQuickUnionUF(int n) // creates a UF with n elements public int count() // number of disjoint sets public int find(int p) // the root of p's set public boolean connected(int p, int q) // whether p and q are in the same set public void union(int p, int q) // join p and q's sets together } . Your code must use the WeightedQuickUnionUF class! It has already been implemented for you, so do not reimplement the Union Find ADT. Tips and Corner Cases . IMPORTANT: We’ve released a set of videos that contain some hints for how to approach this homework! Please do watch them; they might save you a lot of time on this assignment. | Video 1: A Small Hint | Video 2: A Larger Hint | . Corner Cases . By convention, the row and column indices are integers between 0 and N − 1, where (0, 0) is the upper-left site: Throw a java.lang.IndexOutOfBoundsException if any argument to open(), isOpen(), or isFull() is outside its prescribed range. The constructor should throw a java.lang.IllegalArgumentException if N ≤ 0. Performance Requirements . The constructor should take time proportional to $N^2$; all methods should take constant time plus a constant number of calls to the union-find methods union(), find(), connected(), and count(). Meeting these requirements is somewhat tricky! You might consider creating a solution that simply works, before figuring out a way to make it faster. For tips on meeting the speed requirements, see the video at the beginning of this spec. Your numberOfOpenSites() method must take constant time. Part of the goal of this assignment is to learn how to cast one problem (Percolation) in terms of an already solved problem (Disjoint Sets, a.k.a Union Find). If you are at this part of the spec and are still unsure of how to start, go through these slides and watch this video. ",
    "url": "/homeworks/hw2/#percolationjava",
    
    "relUrl": "/homeworks/hw2/#percolationjava"
  },"160": {
    "doc": "Homework 2: Percolation",
    "title": "PercolationStats.java",
    "content": "Monte Carlo simulation. To estimate the percolation threshold, consider the following computational experiment: . | Initialize all sites to be blocked. | Repeat the following until the system percolates: . | Choose a site uniformly at random among all blocked sites. | Open the site. | . | The fraction of sites that are opened when the system percolates provides an estimate of the percolation threshold. | . For example, if sites are opened in a 20-by-20 grid according to the snapshots below, then our estimate of the percolation threshold is 204/400 = 0.51 because the system percolates when the 204th site is opened. The images correspond to the 50, 100, 150, and 204 sites being open, respectively. If you’re interested in the math behind the following calculations, click here. By repeating this computation experiment $T$ times and averaging the results, we obtain a more accurate estimate of the percolation threshold. Let $x_t$ be the fraction of open sites in computational experiment $t$. The sample mean $\\mu$ provides an estimate of the percolation threshold; the sample standard deviation $\\sigma$ measures the sharpness of the threshold. $\\mu = \\frac{x_1 + x_2 + … + x_T}{T}$, $\\sigma^2 = \\frac{(x_1 - \\mu)^2 + (x_2 - \\mu)^2 + … + (x_T - \\mu) ^2}{T-1}$ . Assuming $T$ is sufficiently large (say, at least 30), the following provides a 95% confidence interval for the percolation threshold: . $[\\mu - \\frac{1.96\\sigma}{\\sqrt{T}}, \\mu + \\frac{1.96\\sigma}{\\sqrt{T}}]$ . To perform a series of computational experiments, we’ve given you a PercolationStats data type. The constructor takes two arguments N and T, and performs T independent computational experiments ( discussed above) on an N-by-N grid. Using this experimental data, it calculates the mean, standard deviation, and the 95% confidence interval for the percolation threshold. Open PercolationStats.java and take a look at the provided constructor and methods. Then, run the main method, and interpret the results. What do these numbers tell you about the solution to the Percolation Problem? . There’s no deliverable for this portion of the assignment; if you’ve implemented Percolation.java correctly, you should now have a 95% confidence interval for the percolation threshold p. ",
    "url": "/homeworks/hw2/#percolationstatsjava",
    
    "relUrl": "/homeworks/hw2/#percolationstatsjava"
  },"161": {
    "doc": "Homework 2: Percolation",
    "title": "Runtime Analysis (Ungraded)",
    "content": "This part of the HW will not be graded, but it is highly recommended that you at least read though and think about the following points: . | Implement the Percolation data type using the quick-find algorithm in QuickFindUF. Use Stopwatch to measure the total running time of PercolationStats for various values of N and T. How does doubling N affect the total running time? How does doubling T affect the total running time? . | Now, implement the Percolation data type using the weighted quick-union algorithm in WeightedQuickUnionUF. Answer the same questions in the previous bullet. | . ",
    "url": "/homeworks/hw2/#runtime-analysis-ungraded",
    
    "relUrl": "/homeworks/hw2/#runtime-analysis-ungraded"
  },"162": {
    "doc": "Homework 2: Percolation",
    "title": "Provided Files",
    "content": "We provide two clients that serve as large-scale visual traces. We highly recommend using them for testing and debugging your Percolation implementation. Sample Data Files . The inputFiles directory contains some sample files for use with the visualization client, including input20.txt, which we will use below. Here are the expected output images corresponding to each input file. File-Based Visualization Client . PercolationPicture.java visualizes by performing the following steps: . | Read the grid size N from the file. | Create an N-by-N grid of sites (initially all blocked). | Read in a sequence of sites (row i, column j) to open from the file. After each site is opened, draw full sites in light blue, open sites (that aren’t full) in white, and blocked sites in black using standard draw, with site (0, 0) in the upper left-hand corner. | . For the input file, input20.txt, the program should produce output as shown in the following images. The images correspond to the 50, 100, 150, 204, and 250 sites being open, respectively. You can run the visualizer on this input by passing in the correct arguments to the IntelliJ program’s Run -&gt; Edit Configurations -&gt; + -&gt; Application tab. Here, set the “Main class” to PercolationPicture and set the “Program arguments” to an input file (for example, inputFiles/input20.txt). Finally, hit the “Run” button to begin running the visualizer. Open PercolationPicture.java and follow the steps above to run the visualizer. Use this tool to help you debug your Percolation.java methods! . Interactive Visualization Client . InteractivePercolationVisualizer.java animates the results of opening sites in a percolation system, using the mouse as input. It takes a command-line integer N that specifies the grid size. As a bonus, it prints out the sequence of sites opened in the same format used by PercolationPicture (described above), so you can use it to prepare interesting files for testing. If you design an interesting data file, feel free to share it on Ed. Open InteractivePercolationVisualizer.java and follow the same steps as PercolationPicture to run the interactive visualizer. Note that for the interactive version, you do not need to provide a program argument. Use this tool to help you debug your Percolation.java methods! . Note: If you are using IntelliJ, you can choose which class to run (i.e. choose whose main method you want to run) in Run -&gt; Edit Configurations. For more information, please check the FAQ . ",
    "url": "/homeworks/hw2/#provided-files",
    
    "relUrl": "/homeworks/hw2/#provided-files"
  },"163": {
    "doc": "Homework 2: Percolation",
    "title": "Testing",
    "content": "You will find InteractivePercolationVisualizer to be quite helpful as a sanity check that your Percolation class is implemented properly. Clicking on cells should open (and fill, if necessary) those sites, if your implementation is correct. There will also be a note for the number of open sites and whether the system percolates. In the tests folder, we have provided two basic tests for you. You should add more tests to PercolationTest.java to test your code. ",
    "url": "/homeworks/hw2/#testing",
    
    "relUrl": "/homeworks/hw2/#testing"
  },"164": {
    "doc": "Homework 2: Percolation",
    "title": "Submission &amp; Deliverables",
    "content": "You should submit the usual way, by pushing to GitHub and then submitting on Gradescope. There will be no velocity limiting for this assignment. Deliverables: . | Percolation.java | . ",
    "url": "/homeworks/hw2/#submission--deliverables",
    
    "relUrl": "/homeworks/hw2/#submission--deliverables"
  },"165": {
    "doc": "Homework 2: Percolation",
    "title": "Credits",
    "content": "This assignment originally developed by Kevin Wayne and Bob Sedgewick at Princeton University, with autograder built by Josh Hug for the Princeton Algorithms course. ",
    "url": "/homeworks/hw2/#credits",
    
    "relUrl": "/homeworks/hw2/#credits"
  },"166": {
    "doc": "Homework 2: Percolation",
    "title": "Homework 2: Percolation",
    "content": " ",
    "url": "/homeworks/hw2/",
    
    "relUrl": "/homeworks/hw2/"
  },"167": {
    "doc": "Homework 3: Midterm 2 Review FAQ",
    "title": "FAQ",
    "content": "Q1 - How do I choose which notation to use? Big O or Big Theta? . Remember that we want whichever bound is more descriptive. If there is no distinction between the tightest upper and the tightest lower bound, you should select Big Theta Notation. Q2 - I’m not sure how to approach this problem. First, you may find this discussion worksheet very helpful. Next, the disjoint sets visualizer may be useful as well, but be careful! Their tie-breaking scheme makes the smaller element the child of the larger element. Q2 - Ok, I’m pretty sure I’ve union’ed everything correctly, but I’m still not getting the correct answer! . Remember that the value at the index of an element representing the root of a set is the negation of the size of the set. This includes the root element itself! . Q3 - I’ve tried all options: rotateRight(x), rotateLeft(x), and colorFlip(x), but it’s not working! . You need to replace x with an actual integer value. Q5 - I can’t get the adjacency list for node 0 correct. First, recognize that we’re working with directed edges, not undirected edges. Next, make sure your formatting is correct and your list is not separated by a comma, but rather a single space. ",
    "url": "/homeworks/hw3/#faq",
    
    "relUrl": "/homeworks/hw3/#faq"
  },"168": {
    "doc": "Homework 3: Midterm 2 Review FAQ",
    "title": "Homework 3: Midterm 2 Review FAQ",
    "content": " ",
    "url": "/homeworks/hw3/",
    
    "relUrl": "/homeworks/hw3/"
  },"169": {
    "doc": "Homework 0A: Java Syntax",
    "title": "Language Constructs",
    "content": "Many Python fundamentals have a Java equivalent, such as loops and if statements. This section shows a direct comparison of the syntax. Variable Declaration . | Python | Java | | i = 0 . | int i = 0; . | . | Just like Python, Java variables have types. In Java, to declare a variable, we have to explicitly say what type it is. A variable’s declared type can never change. Refer to Lecture 1 for more on “static typing.” | We also have to put a semi-colon at the end of the statement. | . Types . | Python | Java | What? | . | bool | boolean | Python uses True and False; Java uses true and false. | . | int | int | While Python ints are unbounded, Java ints have a (large) max and min value. | . | float | double | Decimal values. Java doubles are again bounded. | . | str | String | Java Strings use double quotes (\"), and can be any text. | . | no equivalent | char | Java char represents a single character, and uses single quotes ('). | . Comments . | Python | Java | | # This is a single line comment. | // This is a single line comment. | . Java also has multi-line comments that are started by /* and ended by */. while Loop . | Python | Java | | i = 0 while i &lt; 10: print(i) i += 1 . | int i = 0; while (i &lt; 10) { System.out.println(i); i++; } . | . | The parentheses, ( and ) around the condition are required. | In Java, ++ is often used instead of += 1. | We really do use System.out.println to print in Java. Sorry. | Instead of indenting, we use curly braces, { and } to wrap the code that is part of the while loop. Java doesn’t require indenting, but it’s good style! | . for Loop (counting up) . | Python | Java | | for i in range(10): print(i) . | for (int i = 0; i &lt; 10; i ++) { System.out.println(i); } . | . In Java, the for loop has the syntax: . for (initialization; termination; increment) { // loop body } . This is roughly equivalent to the while loops: . | Python | Java | | initialization while termination: # loop body increment . | initialization while (termination) { // loop body increment } . | . The while loops and the for loop exit when the termination condition is false. The for loops in the comparison table go “until” i = 10. for Loop (counting down) . | Python | Java | | for i in range(9, -1, -1): print(i) . | for (int i = 9; i &gt;= 0; i --) { System.out.println(i); } . | . | Note the different “initialization”, “termination”, and “increment” blocks in the Java for loop. | Similarly to ++, -- is often used instead of -= 1. | The for loops in the comparison table go “until” i &lt; 0. | . Conditionals . | Python | Java | | if i % 3 == 0 and i % 5 == 0: print(\"FizzBuzz\") elif i % 3 == 0: print(\"Fizz\") elif i % 5 == 0: print(\"Buzz\") else: print(i) . | if (i % 3 == 0 &amp;&amp; i % 5 == 0) { System.out.println(\"FizzBuzz\"); } else if (i % 3 == 0) { System.out.println(\"Fizz\"); } else if (i % 5 == 0) { System.out.println(\"Buzz\"); } else { System.out.println(i); } . | . The boolean operators are as follows: . | Python | Java | . | and | &amp;&amp; | . | or | || . | not | ! | . | == | == | . | Note the difference between elif and else if. | NOTE: In Java, == is used for identity, and .equals() is used for equality. For primitive types, this means the same thing, but for reference types, it may be different. For this assignment, you do not need to know the difference; we’ll learn more about this later. | . Exponentiation . | Python | Java | | x = 2**10 . | double x = Math.pow(2, 10); . | . Note that ^ in Java is the “XOR” operator, not the exponentiation operation. That is, 2 ^ 10 is valid code, but it will return 8, not 1024. Function Declaration and Usage . | Python | Java | | def greet(name): return \"Hello, \" + name # Elsewhere... print(greet(\"Josh\")) . | public static String greet(String name) { return \"Hello, \" + name; } // Elsewhere... System.out.println(greet(\"Josh\")); . | . | In Java, functions have a specific return type that comes before the function name. Functions also specify their arguments’ types. | When a function returns nothing, it has a return type of void. | . | For now, all our functions will have public static in front. We’ll learn what these mean later. | Calling a function looks the same as in Python. | . Strings . | Python | Java | | s = \"hello\" s += \" world\" s += str(5) s_length = len(s) substr = s[1:5] c = s[2] if \"hello\" in s: print(\"\\\"hello\\\" in s\") for letter in s: print(letter) . | String s = \"hello\"; s += \" world\"; s += 5; int sLength = s.length(); String substr = s.substring(1, 5); char c = s.charAt(2); if (s.indexOf(\"hello\") != -1) { System.out.println(\"\\\"hello\\\" in s\"); } for (int i = 0; i &lt; s.length(); i++) { char letter = s.charAt(i); System.out.println(letter); } . | . | In Java, Strings are not directly iterable. We either iterate over an index and use charAt, or we convert it to an array (coming soon). | In Java, you can add anything to a Strings, and it will be implicitly converted to a String without needing to explicitly cast. | . ",
    "url": "/homeworks/hw0/hw0a/#language-constructs",
    
    "relUrl": "/homeworks/hw0/hw0a/#language-constructs"
  },"170": {
    "doc": "Homework 0A: Java Syntax",
    "title": "Programs",
    "content": "Now that we’ve covered individual language constructs, let’s look at some Java programs that use them. Here are some simple ones that you might find yourself referring to if you forget how to do something. Hello World . | Python | Java | | print(\"Hello World\") . | public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello World\"); } } . | . | All Java code must be in a class. We’ll learn more about classes later. | When a Java program is executed, it runs the public static void main(String[] args) method. This is different from Python, where code can be executed outside of a function. | . ",
    "url": "/homeworks/hw0/hw0a/#programs",
    
    "relUrl": "/homeworks/hw0/hw0a/#programs"
  },"171": {
    "doc": "Homework 0A: Java Syntax",
    "title": "Exercises",
    "content": "Make sure you have completed Lab 1 before continuing on. UW has a large collection of introductory Java exercises on a site called Practice-It that we will be borrowing. For HW 0A, we’ve picked a few of these exercises for you to complete! . Note: the University of Washington has limited access to Practice-It and is planning on discontinuing the service. You are not required (or expected) to log in to Practice-It to complete this assignment. See the Deliverables section for explicit instructions on how to complete HW 0A. | Self-Check 1.26: Confusing | Exercise 2.5: starTriangle | Self-Check 2.25: numberTotal | Exercise 3.23: printIndexed | Exercise 4.17: stutter | Self-Check 4.5: ifElseMystery1 | Exercise 4.19: quadrant | . We have provided some skeleton code to get you started. To obtain the skeleton code, follow the normal assignment workflow. Once you have the skeleton code, open it in IntelliJ. You will find problem descriptions for each of the tasks in the comment above the corresponding method signature. You are required to complete starTriangle, printIndexed, stutter, and quadrant for full credit. We encourage you to complete Confusing, numberTotal, and ifElseMystery1 as well, but we won’t be grading these. If you run into trouble with the exercises, one strategy could be solving in Python first, then translating that to Java. If you’re having trouble with solving in Python, that’s fine, and not the point of this exercise. If you’d like to reference Python solutions, see the dropdowns below. starTriangle . for i in range(5): line = \"\" for j in range(5 - i - 1): line += \" \" for k in range(i + 1): line += \"*\" print(line) . printIndexed . def printIndexed(s): output = \"\" for i in range(len(s)): output += s[i] output += str(len(s) - 1 - i) print(output) . stutter . def stutter(s): output = \"\" for i in range(len(s)): output += s[i] output += s[i] return output . quadrant . def quadrant(x, y): if x == 0 or y == 0: return 0 elif y &gt; 0 and x &gt; 0: return 1 elif y &gt; 0 and x &lt; 0: return 2 elif y &lt; 0 and x &lt; 0: return 3 else: return 4 . ",
    "url": "/homeworks/hw0/hw0a/#exercises",
    
    "relUrl": "/homeworks/hw0/hw0a/#exercises"
  },"172": {
    "doc": "Homework 0A: Java Syntax",
    "title": "Deliverables",
    "content": "You have two options for receiving credit on this assignment. | Submit a working implementation to Homework 0A: Code | Submit a screenshot to Homework 0A: Screenshots | . If you are completing HW 0A for the first time, you must complete the exercises in the skeleton files. Once you have commited and pushed your work to your remote repository, you can submit your code to Homework 0A: Code on Gradescope. If you pass all of the autograder tests, you have finished the assignment! . If you’ve already done HW 0A previously before (e.g. you enrolled in 61B in an earlier semester but dropped it), you can submit the screenshot you used previously showing earlier completion dates for the Practice-It exercises. You don’t need to do anything else, but we highly encourage to redo any exercises that you are unfamiliar with to brush up. Note: If you are having trouble getting your screenshot into the PDF format required by Gradescope, try using this converter. Congratulations! You’re prepared for the next few lectures, and have completed HW 0. After Lecture 2, you’ll be ready to read HW0B, but you can get a head start now if you’d like. A programming language is not too different from a spoken language – in particular, you will get better the more code you write. The PracticeIt site has many problems available, and you should feel free to attempt more. (Their progression doesn’t exactly match ours, though – if you see a Scanner or need to generate a random number, you can skip that problem.) . We also recommend https://codingbat.com/java/AP-1, which has more advanced Java problems. ",
    "url": "/homeworks/hw0/hw0a/#deliverables",
    
    "relUrl": "/homeworks/hw0/hw0a/#deliverables"
  },"173": {
    "doc": "Homework 0A: Java Syntax",
    "title": "Homework 0A: Java Syntax",
    "content": " ",
    "url": "/homeworks/hw0/hw0a/",
    
    "relUrl": "/homeworks/hw0/hw0a/"
  },"174": {
    "doc": "Homework 0B: Data Structures",
    "title": "Assignment Setup",
    "content": "Please follow the Assignment Workflow Guide to get started with this assignment. This assignment is hw0b. ",
    "url": "/homeworks/hw0/hw0b/#assignment-setup",
    
    "relUrl": "/homeworks/hw0/hw0b/#assignment-setup"
  },"175": {
    "doc": "Homework 0B: Data Structures",
    "title": "Style",
    "content": "Starting with this homework, we will be enforcing style. You must follow the style guide, or you will be penalized on the autograder. You can and should check your style locally with the CS 61B plugin. ",
    "url": "/homeworks/hw0/hw0b/#style",
    
    "relUrl": "/homeworks/hw0/hw0b/#style"
  },"176": {
    "doc": "Homework 0B: Data Structures",
    "title": "Language Constructs",
    "content": "Types . Java is a statically typed language, which means that every variable has a type that is known at compile time, meaning you must specify it in your code. In contrast, Python is a dynamically typed language, which means that the type of variables are generally only known at runtime, meaning you do not need to specify them in your code. In Java, there are two kinds of types: primitive types and reference types. Primitive types are lowercase, and we named the ones that we care about in Part A: boolean, int, char, double. Pretty much every other type is a reference type, such as String. If a type starts with a capital letter, it is likely a reference type. You will learn more about the distinction between primitive and reference types in Lecture 4, but for this homework, you will need to know that each primitive has a corresponding reference type (Boolean, Integer, Character, Double). If you are using “generics” to declare a data structure, you must use the reference type. You can (usually) seamlessly convert between a primitive type and its reference type. null . Java also has null, which is the approximate equivalent of None in Python. Any reference type can be assigned a value of null. If we try to access an instance member or call an instance method from a value of null, we will see an error called a NullPointerException. Arrays (fixed-size) . Java arrays are a lot like Python lists. However, Java arrays are fixed-size, so we can’t add or remove elements (that is, no append, remove, etc.). | Python | Java | | zeroedLst = [0, 0, 0] lst = [4, 7, 10] lst[0] = 5 print(lst[0]) print(lst) print(len(lst)) . | int[] zeroedArray = new int[3]; int[] array = {4, 7, 10}; array[0] = 5; System.out.println(array[0]); System.out.println(Arrays.toString(array)); System.out.println(array.length); . | . | In new int[3], the int is the type in the array; and 3 is the length. With this syntax, all elements take on their “default value”. For int, this is 0. | Arrays do not print nicely, for reasons beyond the scope of HW 0. To print an array, you can call Arrays.toString(array). | Arrays do not have a length method. It is an instance variable, so it does not have parentheses. | Java does not support negative indexing or slicing. | . Foreach Loop / Enhanced For Loop . | Python | Java | | lst = [1, 2, 3] for i in lst: print(i) . | int[] array = {1, 2, 3}; for (int i : array) { System.out.println(i); } . | . | Notice the type declaration of the iterating variable, as well as the usage of : instead of in. | We can also use this syntax on certain other types, such as Lists and Sets. | . Lists (resizable) . | Python | Java | | lst = [] lst.append(\"zero\") lst.append(\"one\") lst[0] = \"zed\" print(lst[0]) print(len(lst)) if \"one\" in lst: print(\"one in lst\") for elem in lst: print(elem) . | List&lt;String&gt; lst = new ArrayList&lt;&gt;(); lst.add(\"zero\"); lst.add(\"one\"); lst.set(0, \"zed\"); System.out.println(lst.get(0)); System.out.println(lst.size()); if (lst.contains(\"one\")) { System.out.println(\"one in lst\"); } for (String elem : lst) { System.out.println(elem); } . | . | Java has the List interface. We largely use the ArrayList implementation. | The List interface is parameterized by the type it holds, using the angle brackets &lt; and &gt;. | Lists, again, do not support slicing or negative indexing. | . Sets . | Python | Java | | s = set() s.add(1) s.add(1) s.add(2) s.remove(2) print(len(s)) if 1 in s: print(\"1 in s\") for elem in s: print(elem) . | Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); set.add(1); set.add(1); set.add(2); set.remove(2); System.out.println(set.size()); if (set.contains(1)) { System.out.println(\"1 in set\"); } for (int elem : set) { System.out.println(elem); } . | . | Java has the Set interface. There are two main implementations: TreeSet, and HashSet. TreeSet keeps its elements in “sorted” order, and is fast. In contrast, HashSet does not have a defined “order”, but is (usually) really fast. | We will formalize these notions of “fast” later on in the course when we learn about asymptotic analysis. | . | A Set cannot contain duplicate items. If we try to add an item already in the set, nothing happens. | . Dictionaries / Maps . | Python | Java | | d = {} d[\"hello\"] = \"hi\" d[\"hello\"] = \"goodbye\" print(d[\"hello\"]) print(len(d)) if \"hello\" in d: print(\"\\\"hello\\\" in d\") for key in d.keys(): print(key) . | Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); map.put(\"hello\", \"hi\"); map.put(\"hello\", \"goodbye\"); System.out.println(map.get(\"hello\")); System.out.println(map.size()); if (map.containsKey(\"hello\")) { System.out.println(\"\\\"hello\\\" in map\"); } for (String key : map.keySet()) { System.out.println(key); } . | . | Java has the Map interface. There are two main implementations: TreeMap, and HashMap. Similarly to sets, TreeMap keeps its keys sorted and is fast; HashMap has no defined order and is (usually) really fast. | A Map cannot contain duplicate keys. If we try to add a key already in the map, the value is overwritten. | In the angle brackets, we have the “key type” first, followed by the “value type”. | Maps cannot directly be used with the : for loop. Typically, we call keySet to iterate over a set of the keys, and use those to retrieve the values. One may also iterate over the entrySet to get both the keys and values. | . Classes . | Python | Java | | class Point: def __init__(self, x, y): self.x = x self.y = y def distanceTo(self, other): return math.sqrt( (self.x - other.x) ** 2 + (self.y - other.y) ** 2 ) def translate(self, dx, dy): self.x += dx self.y += dy . | public class Point { public int x; public int y; public Point(int x, int y) { this.x = x; this.y = y; } public Point() { this(0, 0); } public double distanceTo(Point other) { return Math.sqrt( Math.pow(this.x - other.x, 2) + Math.pow(this.y - other.y, 2) ) } public void translate(int dx, int dy) { this.x += dx; this.y += dy; } } . | . We can use these classes as follows: . | Python | Java | | p1 = Point(5, 9) p2 = Point(-3, 3) print(f\"Point 1: ({p1.x}, {p1.y})\") print(\"Distance:\", p1.distanceTo(p2)) p1.translate(2, 2) print(f\"Point 1: ({p1.x}, {p1.y})\") . | Point p1 = new Point(5, 9); Point p2 = new Point(-3, 3); System.out.println(\"Point 1: ( \" + p1.x + \", \" + p1.y + \")\"); System.out.println(\"Distance: \" + p1.distanceTo(p2)); p1.translate(2, 2); System.out.println(\"Point 1: ( \" + p1.x + \", \" + p1.y + \")\"); . | . Main . Java programs may also have a special method called main. When you execute a program, the main method is called. The main method runs whatever code is inside, which may call other methods defined within the program. We define the main method with the signature public static void main(String[] args). You will learn the meaning of each part of this signature later in the class. For now, you can treat main as a “play button” for the code you have written. To run the code in the previous example, we may create a main method in the Point class like this: . | Python | Java | | class Point: # other methods... # end of Point class if __name__ == '__main__': p1 = Point(5, 9) p2 = Point(-3, 3) print(f\"Point 1: ({p1.x}, {p1.y})\") print(\"Distance:\", p1.distanceTo(p2)) p1.translate(2, 2) print(f\"Point 1: ({p1.x}, {p1.y})\") . | public class Point { // other methods... public static void main(String[] args) { Point p1 = new Point(5, 9); Point p2 = new Point(-3, 3); System.out.println(\"Point 1: ( \" + p1.x + \", \" + p1.y + \")\"); System.out.println(\"Distance: \" + p1.distanceTo(p2)); p1.translate(2, 2); System.out.println(\"Point 1: ( \" + p1.x + \", \" + p1.y + \")\"); } // end of Point class } . | . Notice that in Java, the main method is defined within a class. If you are coding in IntelliJ, you can actually “play” the main method! IntelliJ will display a green play button to the left of the main method’s signature. Click it to run the code inside. ",
    "url": "/homeworks/hw0/hw0b/#language-constructs",
    
    "relUrl": "/homeworks/hw0/hw0b/#language-constructs"
  },"177": {
    "doc": "Homework 0B: Data Structures",
    "title": "Programs",
    "content": "Let’s look at some Java programs that use data structures and classes. Here are some simple ones that you might find yourself referring to if you forget how to do something. Index of Minimum of a List of Numbers . | Python | Java | | def min_index(numbers): # Assume len(numbers) &gt;= 1 m = numbers[0] idx = 0 for i in range(len(numbers)): if numbers[i] &lt; m: m = numbers[i] idx = i return idx . | public static int minIndex(int[] numbers) { // Assume numbers.length &gt;= 1 int m = numbers[0]; int idx = 0; for (int i = 0; i &lt; numbers.length; i++) { if (numbers[i] &lt; m) { m = numbers[i]; idx = i; } } return idx; } . | . ",
    "url": "/homeworks/hw0/hw0b/#programs",
    
    "relUrl": "/homeworks/hw0/hw0b/#programs"
  },"178": {
    "doc": "Homework 0B: Data Structures",
    "title": "Exceptions",
    "content": "Lastly, let’s look at how we can throw exceptions in Java compared to Python with previous example. | Python | | def minIndex(numbers): if len(numbers) == 0: raise Exception(\"There are no elements in the list!\") m = numbers[0] idx = 0 ... return m . | . | Java | | public static int minIndex(int[] numbers) throws Exception { if (numbers.length == 0) { throw new IllegalArgumentException(\"There are no elements in the array!\"); } int m = numbers[0]; int idx = 0; ... return m; } . | . ",
    "url": "/homeworks/hw0/hw0b/#exceptions",
    
    "relUrl": "/homeworks/hw0/hw0b/#exceptions"
  },"179": {
    "doc": "Homework 0B: Data Structures",
    "title": "Programming Exercises",
    "content": "In order to get you more familiar with Java syntax and testing, there are a few exercises for you to solve! After you complete the functions, we have provided a handful of tests for you. Although we have provided tests, you are welcome to write your own too! Writing tests is not only crucial for this class but it is one of the most important skills to have in general. It reinforces our understanding of what specific methods are supposed to do and allows us to catch edge cases! You will have more exercises for testing later on in the course but we want you to be exposed early on. Please complete Lab 01 prior and refer here how to start with the assignment. While completing the assignment, you may need to use different data structures like ArrayList and TreeMap. In order to import these classes, if you hover over wherever you are using the data structures, IntelliJ will give you option to import it or you can do it manually by adding: . import java.util.ArrayList; import java.util.TreeMap; . Task 1: JavaExercises . JavaExercises.java has 4 different methods for you to complete: . | makeDice: This method takes returns a new array of integers [1, 2, 3, 4, 5, 6]. | takeOrder: This method takes in a String and returns a new array containing the orders of the customer. If the customer is Ergun, you should return an array of Strings [\"beyti\", \"pizza\", \"hamburger\", \"tea\"] in that order. If the customer is Erik, you should return an array of Strings [\"sushi\", \"pasta\", \"avocado\", \"coffee\"]. In any other case, return a String array of size 3 where each element is null. NOTE: == behaves strangely with Strings for reasons we’ll see later in the course. You should check strings s1 and s2 for equality using s1.equals(s2) in Java. Also, null is the default value of elements in an initialized String[]. | findMinMax: This method takes an int[] array and returns the positive difference between the maximum element and minimum element of the given array. You may assume the input array is nonempty. | hailstone: This method takes an int n as input and returns its hailstone sequence as a list of integers. The hailstone sequence is defined by the following procedure: pick a positive integer n as the start. If n is even, divide n by 2. If n is odd, multiply n by 3 and add 1. Continue this process until n is 1. | You should compute this using recursion with the provided helper method hailstoneHelper. | . | . For this part, you can import List and ArrayList. Task 2: ListExercises . ListExercises.java has 4 different methods for you to complete: . | sum: This method takes a list List&lt;Integer&gt; L and returns the total sum of the elements in that list. If the list is empty, the method should return 0. | evens: This method takes a list List&lt;Integer&gt; L and returns a new list containing the even numbers of the given list. If there are no even elements, it should return an empty list. | common: This method takes two lists List&lt;Integer&gt; L1, List&lt;Integer&gt; L2 and returns a new list containing the items present in both of the two given lists. If there are no common items, it should return an empty list. | countOccurrencesOfC: This method takes a list and a character List&lt;String&gt; words, char c and returns the number of occurrences of the given character in a list of strings. If the character does not occur in any of the words, it should return 0. | . For this part, you can import ArrayList. Task 3: MapExercises . MapExercises.java has 3 different methods for you to complete: . | letterToNum: This method returns a map from every lower case letter to the number corresponding to its ordering in the alphabet, where ‘a’ corresponds to 1 and ‘z’ corresponds to 26. | squares: This method takes a list List&lt;Integer&gt; nums and returns a map from the integers in the list to their squares. If the given list is empty, it should return an empty map. | countWords: This method takes a list List&lt;String&gt; words and returns a map from words in the list to the number of times they appear. If the given list is empty, it should return an empty map. | . For this part, you can import TreeMap. Task 4: Dessert.java . Compared to your previous classes, 61B may leave a lot of wiggle room for you on assignments. For example, there’s no skeleton code for this exercise - don’t be alarmed! . Create a class called Dessert (you’ll need to create a new file and add it to Git) inside of the src/ folder. This class should have the following characteristics: . | Two instance variables: int flavor and int price. | A constructor that takes two parameters int flavor and int price and sets the instance variables accordingly. | One static variable int numDesserts that keeps track of the number of desserts created so far. | A method public void printDessert() that prints the flavor and price of the dessert, along with the total number of desserts created so far, separated by a space. | For example, if we create a dessert with flavor 1 and price 2, and then call its printDessert() method, it should print 1 2 1. | If we then create a dessert with flavor 3 and price 4, and then call its printDessert() method, it should print 3 4 2. | . | Lastly, a method public static void main(String[] args) that only prints the line I love dessert! when executed. | . Be sure to implement the above behavior exactly, otherwise you may not pass the tests! . When you have completed Dessert.java, uncomment the appropriate lines in tests/DessertTest and run the test. How to create a new class in IntelliJ . | Right-click on the src/ folder on the left-hand side of the screen, then go to New &gt; Java Class. | You should see a popup appear. In the Name field, type Dessert, then hit Enter. | If you get something like the following popup asking you to add the file to Git, select Add. | You should now see a new file called Dessert.java in the src/ folder. It should look like this, after which you can modify it to meet the specifications above: | . Dessert class implemented in Python . class Dessert: numDesserts = 0 def __init__(self, flavor, price): self.flavor = flavor self.price = price Dessert.numDesserts += 1 def printDessert(self): print(self.flavor, self.price, Dessert.numDesserts) if __name__ == \"__main__\": print(\"I love dessert!\") . ",
    "url": "/homeworks/hw0/hw0b/#programming-exercises",
    
    "relUrl": "/homeworks/hw0/hw0b/#programming-exercises"
  },"180": {
    "doc": "Homework 0B: Data Structures",
    "title": "Testing and Debugging",
    "content": "If you’re having trouble running your code, please read through the common errors in this section before asking course staff! . Syntax Errors . IntelliJ will not run your code (the green play button will not appear) if your code contains syntax errors. If your code has syntax errors, you will see a red exclamation point in the top-right corner, and there will be red squiggles in your code. To see where the syntax errors are, you can click on the red exclamation point. If you are seeing syntax errors in parts of the code that you haven’t modified yet, you may have a syntax error earlier in the code (e.g. mismatched brackets), which is causing later parts of the code to not compile. For example, in the image above, the takeOrder method is missing its closing bracket on Line 19. This causes a syntax error on Line 23. ",
    "url": "/homeworks/hw0/hw0b/#testing-and-debugging",
    
    "relUrl": "/homeworks/hw0/hw0b/#testing-and-debugging"
  },"181": {
    "doc": "Homework 0B: Data Structures",
    "title": "Deliverables",
    "content": ". | JavaExercises.java | ListExercises.java | MapExercises.java | Dessert.java | . For this assignment, you need to complete the methods in JavaExercises, ListExercises, and MapExercises. You also need to create a new file Dessert.java and implement it according to the desired specifications. Make sure you test your code before submitting to Gradescope. Although we do not have a submission limit for this specific assignment, in the future it is encouraged to use existing tests and write your own tests to see if your methods work before submitting your code to the autograder, as there may be limited submissions. This assignment is 10 points and due 9/3, 11:59 PM. ",
    "url": "/homeworks/hw0/hw0b/#deliverables",
    
    "relUrl": "/homeworks/hw0/hw0b/#deliverables"
  },"182": {
    "doc": "Homework 0B: Data Structures",
    "title": "Homework 0B: Data Structures",
    "content": " ",
    "url": "/homeworks/hw0/hw0b/",
    
    "relUrl": "/homeworks/hw0/hw0b/"
  },"183": {
    "doc": "Homework 0",
    "title": "Homework 0",
    "content": " ",
    "url": "/homeworks/hw0/",
    
    "relUrl": "/homeworks/hw0/"
  },"184": {
    "doc": "Lab 01: Setup",
    "title": "FAQ",
    "content": "Each assignment will have an FAQ linked at the top. The FAQ for Lab 1 is located here. The FAQ (frequently asked questions) is a list of compiled questions and errors that students often run into, so refer to this page first before reaching out to staff. ",
    "url": "/labs/lab01/#faq",
    
    "relUrl": "/labs/lab01/#faq"
  },"185": {
    "doc": "Lab 01: Setup",
    "title": "Welcome to CS 61B!",
    "content": "We’re very excited to work with you this term! Before we can get started, you’ll need to have a computer that you can work on assignments on. In this class, you’ll be using real-world tools, which means that you’ll likely run into real-world problems. These are hard problems, and software engineers run into them every day! Don’t be discouraged, and make sure to ask for help if you’re stuck! . We highly recommend attending a lab section, and asking for help during lab section. If you’re working outside of a lab section, you can ask on Ed or attend office hours. If something isn’t working, do not keep trying random things! Instead, ask for help. Your lab TA will tell you how to join the queue. They may choose to use a whiteboard queue or the online OH queue. In general, while you are waiting, you should move on to the next step of the assignment, whenever possible. Partners . Labs in CS 61B are solo. This means that you will need to write and submit your own code. For Lab 1 in particular, you will need to set up your own computer. However, we strongly encourage working together with other students! In-person lab sections are an excellent place to find groups. Goals and Workflow . In this lab, we will work on setting up the software that will be used throughout this course. This includes an introduction to the terminal, git, Java, and IntelliJ. We’ll also work through a small Java program to get situated with the Java language! . This lab will be long! Do not skip steps! . ",
    "url": "/labs/lab01/#welcome-to-cs-61b",
    
    "relUrl": "/labs/lab01/#welcome-to-cs-61b"
  },"186": {
    "doc": "Lab 01: Setup",
    "title": "Personal Computer Setup",
    "content": "Task: Installing Git . Installation will vary, depending on your operating system. | Windows instructions | macOS instructions | Linux instructions | . Follow the guide for your operating system to install the software. ",
    "url": "/labs/lab01/#personal-computer-setup",
    
    "relUrl": "/labs/lab01/#personal-computer-setup"
  },"187": {
    "doc": "Lab 01: Setup",
    "title": "The Terminal",
    "content": "Terminal Guide . In CS61B, we will be using the terminal extensively to work with git. The terminal also has some other commands that allow you to work with folders or files. We’ve compiled them in this brief guide, so please make sure to read through it here: How to Use the Terminal. In the terminal, you can move through different directories, create new files, list files in a current directory, etc. with the specified commands in the guide. You will be using the terminal throughout this lab and most likely in future assignments, especially for assignment submissions. Please read through the terminal guide and familiarize yourself with the commands! Feel free to also bookmark the page for future reference. ",
    "url": "/labs/lab01/#the-terminal",
    
    "relUrl": "/labs/lab01/#the-terminal"
  },"188": {
    "doc": "Lab 01: Setup",
    "title": "GitHub and Beacon Accounts",
    "content": "Overview . Instead of bCourses, CS 61B uses an in-house system for centralizing your grades and student information called Beacon. In this section, we’ll set up your Beacon account as well as your CS 61B GitHub repository (“repo”), which you will need to submit all coding assignments. Task: Setting Up Accounts . | Create an account on GitHub. If you already have an account, you do not need to create a new one. | Go to Beacon and follow the steps to complete your GitHub repository registration. You must be logged in to your Berkeley account to complete the Google Form syllabus quiz. | After completing all of the steps, you should receive an email inviting you to collaborate on your course GitHub repository. Accept the email invitation to receive access to your course repository. This email will be sent to the email that you used to create your GitHub account, which may not necessarily be your Berkeley email. | . Don’t follow the instructions that GitHub says you might want to do. We have our own set of instructions later in this lab. Follow the steps above to create your GitHub and Beacon accounts, and connect them. Your Repository . Your repository will have a name containing a number that is unique to you. For instance, if your repo is called “sp25-s1”, you’ll be able to visit your private repository at https://github.com/Berkeley-CS61B-Student/sp25-s1 (when logged into GitHub). Your student number is not “1”, so this link will not work for you. Replace “1” with your own number to see your repo on GitHub. Additionally, course staff will be able to view your repository. This means you can (and should!) link to your code when asking private debugging questions in Ed or Gitbugs. No other students will be able to view your repository. As a reminder, you may not post code from this course publicly, even after completing the course. Doing so is a violation of our course policies and you might be subject to disciplinary action. ",
    "url": "/labs/lab01/#github-and-beacon-accounts",
    
    "relUrl": "/labs/lab01/#github-and-beacon-accounts"
  },"189": {
    "doc": "Lab 01: Setup",
    "title": "Git",
    "content": "Git Basics . In this course, you’ll be required to use the Git version control system, which is nearly universal out in the real world. Since the abstractions behind it are fairly tricky to understand, don’t be worried if you encounter significant frustration as you learn to use it. Before you proceed, read up to the Remote Repositories section of the Using Git Guide. You do not need to read past that. This is to help you get a rough idea of what Git is. Task: Setting Up Git . Before we use git, we have some short commands to configure it appropriately. First, open up your terminal. It will look something like this: . Then, set the name and email that git will use with these two commands: . git config --global user.name \"&lt;your name&gt;\" git config --global user.email \"&lt;your email&gt;\" . Set git’s default branch name: . git config --global init.defaultBranch main . Set the “merge strategy”: . git config --global pull.rebase false . We’ll also change the text editor associated with git. Sometimes, git needs your help when inputting things like commit messages, so it will open a text editor for you. The default editor is vim, which is notoriously difficult to use. We recommend nano for this course, but you’re free to use whatever you’d like. Follow the instructions here. This will configure Git’s default editor (make sure that you follow the correct instructions for your operating system). Configure git by following the above instructions, and set your preferred editor. Git and Remote Repos . First, read the Remote Repositories section of the Using Git Guide. In this course, you’ll be required to submit your code using git to your course GitHub repository that you created in Account Setup. This is for several reasons: . | To spare you the incredible agony of losing your files. | To submit your work for grading and to get results back from the autograder. | To save you from the tremendous anguish of making unknown changes to your files that break everything. | To ensure that we have easy access to your code so that we can help if you’re stuck. | To dissuade you from posting your solutions on the web in a public GitHub repository. This is a major violation of course policy! | To expose you to a realistic workflow that is common on every major project you’ll ever work on in the future. | . ",
    "url": "/labs/lab01/#git",
    
    "relUrl": "/labs/lab01/#git"
  },"190": {
    "doc": "Lab 01: Setup",
    "title": "Task: Git Repository and Java Libraries",
    "content": "Java Libraries . Like in Python, we sometimes want to use libraries that others wrote. Java dependency management is a bit of a mess, so we instead provide a git repo that contains all the dependencies that we will use in this course. Once again, make sure your terminal is open. Navigate to the folder where you would like to store your libraries. For this lab, we’ll assume that you placed all your stuff in a folder named cs61b. You can pick a different name if you would like to. This is what it might look like after navigating to where you want to, creating the cs61b directory, and going into it (cd cs61b in this example): . Once inside the folder, run: . git clone https://github.com/Berkeley-CS61B/library-sp25 . Below is the directory structure of library-sp25. Look inside the folder using ls library-sp25 and make sure you see the .jar files listed below. There are many more, but we only list the first few. If you’re using your operating system’s file explorer, the jar part might not show up in the filenames, and that’s OK. library-sp25 ├── algs4.jar ├── animated-gif-lib-1.4.jar ├── antlr4-runtime-4.11.1.jar ├── apiguardian-api-1.1.2.jar └── ... Follow the instructions above to get the course libraries. Authenticate With Github . First, run the following command in your terminal. It will print out any SSH keys you have and generate a new one if none exists: . curl -sS https://sp25.datastructur.es/labs/lab01/get-ssh-key.sh | bash . If you get an error message such as bash: line 1: syntax error near unexpected token 'newline', try refreshing this page and run the updated command. With the location that is provided, go ahead and run the following command, ensuring to replace &lt;path_to_ssh_key&gt; with the location of the SSH key and appending with the .pub suffix. cat &lt;path_to_ssh_key&gt;.pub . The result of running the above command should produce something similar to the format below: . ssh-ed25519 AAAAC3NzaC1lZDI1N6jpH3Bnbebi7Xz7wMr20LxZCKi3U8UQTE5AAAAIBTc2HwlbOi8T [some-comment-here] . Then, copy the output from your terminal. The [some-comment-here] will be system dependent and may vary for individuals. Taking the output, go to Github, Settings, SSH, GPG Keys, New SSH Key (or click the link) and paste the output into the Key section. Name the key, so it’s memorable what device the key is on or so you recognize what it’s for and select the Key type as Authentication Key. Then, add the key to your account. In your terminal, run the following command to connect with Github using SSH: . ssh -T git@github.com . If the system asks”The key is not know by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])?”, type “yes”. If all went well, you should see something like this: . Hi USERNAME! You've successfully authenticated, but GitHub does not provide shell access. You should now be successfully authenticated with Github and good to go! . Configure Personal Repository . Now, it’s time to clone your personal repository. As you did with the libraries, navigate to the folder where you would like to keep your repository. We recommend that it’s the same folder as where you stored your Java libraries (for example, cs61b). Do not place your repository inside the library-sp25 folder. This will cause headaches in the future. For example, it would be inside of the cs61b folder but not in the library-sp25 folder (possibly on the same level as the library). Make sure to replace the *** with your class repository number (you can find this repo number on Beacon). Then run the command below: . git clone git@github.com:Berkeley-CS61B-Student/sp25-s***.git . After cloning your terminal will report warning: You appear to have cloned an empty repository. This is not an issue, it is just git letting you know that there are no files in the repo. Move into your newly created repo! . cd sp25-s*** . Make sure that we’re working with the branch name we expect, main: . git branch -M main . Now, we’ll add the skeleton remote repository. We add starter code for the assignments to skeleton, and you will pull from it (please make sure you’re in your newly created repository before running this command!). git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp25.git . Listing the remotes should now show both the origin and skeleton remotes. git remote -v . If you see an error like fatal: not a git repository make sure you have properly moved into the sp25-s*** directory using cd. Follow the steps above to clone and configure your repository. Getting the Skeleton . The skeleton remote repository contains the skeleton code for all assignments. Whenever a new assignment is released, or if we need to update an assignment, you will pull from the skeleton. First ensure that you are in your sp25-s*** repository directory. Next, run the following command to get the skeleton code for Lab 1: . git pull skeleton main . At this point, you should have a lab01 folder, with the contents src/Arithmetic.java and tests/ArithmeticTests.java. If you do not have these contents, don’t make it manually! Instead, pull from the skeleton or ask a staff member. ",
    "url": "/labs/lab01/#task-git-repository-and-java-libraries",
    
    "relUrl": "/labs/lab01/#task-git-repository-and-java-libraries"
  },"191": {
    "doc": "Lab 01: Setup",
    "title": "Task: IntelliJ Setup",
    "content": "IntelliJ is an Integrated Development Environment or IDE. An IDE is a single program which combines typically a source code editor, tools to compile and run code, and a debugger. Some IDEs like IntelliJ contain even more features such as an integrated terminal and a graphical interface for git commands. Finally, IDEs also have tools like code completion which will help you write Java faster. We highly recommend using IntelliJ. Our tests are written to run in IntelliJ, and we will explicitly use its debugger in later labs. Additionally, IntelliJ is an industry-standard tool that you will almost certainly encounter if you work with Java again in the future. We will assume that you are using IntelliJ, and will not offer support for other editors, including VSCode. IntelliJ is a real world, industrial software development application. There are many features that we will not use, and you will sometimes encounter situations that do not make sense. Ask for help if you are stuck or something seems broken! It can be very hard to guess the right thing to do in IntelliJ. Check out the IntelliJ WTFS Guide for solutions to some common problems. Before continuing, make sure that you have completed all above tasks besides the git exercise: . | You have successfully created your local repo for the class on your own machine. This is the sp25-s*** repository you earlier. | You have pulled from the skeleton, and you have a lab01 directory. | . Installing IntelliJ . | Download the Community Edition of IntelliJ from the JetBrains website. As a student you can actually get a student license for the Ultimate version, but there are not any additional features that we will use for this class. It is recommended and assumed that you proceed with the Community Edition. The Ultimate Version will be the first one you see when you click on the link - make sure to scroll down for the Community Version. If you have an M* Mac (M1, M2, or M3), select “.dmg (Apple Silicon)”. Otherwise, select “.dmg (Intel).” . | After selecting the appropriate version for your OS, click download and wait a few minutes for the file to finish downloading. | Run the installer. If you have an older version of IntelliJ, you should uninstall it at this time and replace it with this newer version. | . While IntelliJ downloads, you can read / skim our Using IntelliJ Guide. You don’t need to read or internalize all of this to complete the lab. IntelliJ is complicated, but the core features should feel somewhat familiar to text editors you have used in the past. Installing Plugins . Open IntelliJ. Then follow the steps below. Make sure you’re running IntelliJ Version 2023.2 or later before continuing. This is because we will use Java 17 or later. We are using IntelliJ Version 2023.2 (in the images), which has an updated user interface. Note that there might be older screenshots of IntelliJ in this lab - that is fine since the general layout is still relatively consistent. | In the Welcome window, click the “Plugins” button in the menu on the left. | On the window that appears, click “Marketplace” and enter “CS 61B” in the search bar at the top. The CS 61B plugin entry should appear. If you click the autocomplete suggestion, a slightly different window from what is shown below may appear – this is okay. | Click the green Install button, and wait for the plugin to download and install. If you have the plugin installed from a prior term, make sure to update it. | Now, search for “Java Visualizer”, and click the green Install button to install the plugin. | Restart (close and reopen) IntelliJ. | . For more information on using the plugins, read the plugin guide. You don’t have to read this right now. Installing Java . This step is important!! . With IntelliJ and the plugins installed, we can install the JDK. Follow the steps below: . | Start up IntelliJ. If you have no projects open, click the “Open” button. If you have a project currently open, navigate to “File –&gt; Open”. | Find and choose the directory of your current assignment. For example, for Lab 1, you would select the lab01 directory inside your sp25-s***. | Navigate to the “File -&gt; Project Structure” menu, and make sure you are in the Project tab. Then, follow the instructions Set up the project JDK to download your JDK version. Choose a version that is 17 or greater! Depending on which version you choose, make sure that it is compatible with the language level (e.g. if you choose SDK 18, choose your language level to be 18). | . Setting Up Assignments . Follow the instructions in Opening in IntelliJ section of the Assignment Workflow guide to open lab01 (if you haven’t exited from the previous section, you can start on step 3). Everytime you open up an assignment, you will need to ensure that your Project Structure is set up and that you’ve added the library-sp25 package. Creating Projects . With lab01 opened up and set up, you should see the following files in the left pane: . | src/Arithmetic, a Java file which contains your first programming exercise. | tests/ArithmeticTest, another Java file which will check that Arithmetic is implemented correctly. | . When you open Arithmetic and ArithmeticTest, you should not see any red text or red squiggles. IntelliJ Test . To test if everything is working correctly, run the Arithmetic class by opening the file, clicking on the green triangle next to public class Arithmetic, then clicking “Run ‘Arithmetic.main()’”. There are other ways to run the main method. Assuming that the file has a main method, you can right click on the file in the project view and navigate to [filname].main(). You can also run it through the green arrow in the top right (outlined in red). You should see a console pop up, prompting you to enter a number: . If you follow the prompts, you will (probably) see something wrong! Don’t fix it yet. Testing Your Code . While we could run the Arithmetic file again and again to check that our code works correctly, it would take a lot of time to type into the program each time, and manually check that the output is correct. Instead, we use tests. Open ArithmeticTest, and click the green triangle(s) next to the public class ArithmeticTest. This will run the tests that we have provided in this assignment. At this point, you will see the following: . The green checkmark () indicates tests that you have passed, while the yellow X () indicates tests that you have failed. Don’t worry about the doubled output; this is a strange quirk of IntelliJ. Fix the bug in Arithmetic.java so that the tests pass. ",
    "url": "/labs/lab01/#task-intellij-setup",
    
    "relUrl": "/labs/lab01/#task-intellij-setup"
  },"192": {
    "doc": "Lab 01: Setup",
    "title": "Task: Saving Your Work using Git and GitHub",
    "content": "As you are making changes to your code, it is good practice to save your work often. We have briefly discussed the commands, but now we will explain how they should be used in practice. In the case that you ever want to go back to another version of your code, it is better to have more options to roll back to. The next set of instructions will talk you through git’s version of saving work through snapshots of your file system called commits. | After you have made some changes to the code within our local repository, git will take notice of these changes. To see the current state of your local repository, use the command git status. Run this and try to interpret the results. Do they make sense to you or do they match your intuition? It is a good habit to run this before running other git commands to know what the state of things are. | To save work that we have completed on a file, we first stage the file, and then we can commit it. We stage a file with the command git add. This does not save the file, but it marks it to be saved the next time you commit. The two below commands show what saving work looks like in a git repository. For git add depending on what directory you are in, the path to the file you are adding might differ (use git status to see the path). The -m \"Completed Arithmetic.java\" part of the commit command specifies a message to be attached to this snapshot. You should always have a commit message to identify what exactly happened in this commit. As an example workflow: . git add lab01/src/Arithmetic.java git commit -m \"lab01: Completed Arithmetic.java\" . If you run git status, you will see that Your branch is ahead of 'origin/main'. You will also see that the staged changes are no longer staged, and are instead committed. If you haven’t edited since staging, you shouldn’t have any changes not staged for commit. | We want to push these changes to the GitHub repository so that your changes can be seen by us and Gradescope. Your changes will also be available to pulled if you had your repo initialized in other places or other computers. git push origin main . git status will now show that Your branch is up to date with 'origin/main'. | . Get into the habit of saving your files and doing the git commit step often (i.e. every 15 minutes). It will be incredibly helpful when you mess things up, since it allows you to back out of changes and to see what you have changed recently. Basically, right when you sit down to work in your repository, first git pull to make sure you are starting with the most recent code. While you are working, frequently commit. When you are finished, git push origin main so all your changes are uploaded and ready for you to pull again next time. ",
    "url": "/labs/lab01/#task-saving-your-work-using-git-and-github",
    
    "relUrl": "/labs/lab01/#task-saving-your-work-using-git-and-github"
  },"193": {
    "doc": "Lab 01: Setup",
    "title": "Submitting to Gradescope",
    "content": "Although we use GitHub to store our programming work, we use Gradescope to actually grade it. The last step is to submit your work with Gradescope, which we use to autograde programming assignments. We added everyone’s CalCentral email to Gradescope on the first day of labs. Make sure to login using the email address listed on CalCentral. If you’re having trouble accessing the course on Gradescope or would like to use a different email address, ask your TA! . If you haven’t already, make sure you’ve added, committed and pushed your changes. The steps are repeated below for your convenience. | Add your assignment directory using git add. For example, for Lab 1, from your repo root (sp25-s***) you would use git add lab01. | Commit the files using git commit -m \"&lt;commit message here&gt;\". The commit message is required. For example, git commit -m \"Finished Lab 1\". | Push your code to your remote repository with git push origin main. You can verify the changes have been pushed by navigating to your personal repository on Github and checking if your changes have been reflected. | Open the assignment on Gradescope. Select Github, then your sp25-s*** repository and the main branch, then submit your assignment. You will receive a confirmation email, and the autograder will run automatically. Gradescope will use the latest version of your code from Github. If you think that Gradescope isn’t grading the right code, check that you have added, committed, and pushed with git status. | . ",
    "url": "/labs/lab01/#submitting-to-gradescope",
    
    "relUrl": "/labs/lab01/#submitting-to-gradescope"
  },"194": {
    "doc": "Lab 01: Setup",
    "title": "Deliverables",
    "content": "As a reminder, this assignment has an FAQ page. There is one required file, all inside the lab01 directory: . Arithmetic.java You should have fixed the bug so that the tests pass. We check this file with an autograder! For this lab, the autograder tests are the same as the ones you have on your computer. If you haven’t already, make sure that you’ve added, committed and pushed your changes to Github (based on the workflow that’s specified above). You should receive a full score on the lab if you’ve passed all the tests in ArithmeticTest.java. Congratulations on finishing your first CS 61B lab! . If you ever need a refresher on how to submit an assignment, you can refer back to the assignment workflow guide. ",
    "url": "/labs/lab01/#deliverables",
    
    "relUrl": "/labs/lab01/#deliverables"
  },"195": {
    "doc": "Lab 01: Setup",
    "title": "Optional: Josh Hug’s Color Schemes",
    "content": "Per Josh Hug: . I’m not a big fan of the default IntelliJ colors. Mariana Pro: If you want the color scheme Josh uses in live lecture, install the Mariana Pro Theme plugin. To get Mariana Pro, go to the same plug-in shop that you used to install the CS 61B plugin, and search for “Mariana Pro”. This plugin was made by Thibault Soulabaille. Note that I prefer a pure black background, whereas Mariana Pro is a dark grey. You can change the background color using these directions. Note: If you ever want to reset to the default IntelliJ colors, go to “File → Manage IDE Settings → Restore Default Settings”. ",
    "url": "/labs/lab01/#optional-josh-hugs-color-schemes",
    
    "relUrl": "/labs/lab01/#optional-josh-hugs-color-schemes"
  },"196": {
    "doc": "Lab 01: Setup",
    "title": "Lab 01: Setup",
    "content": " ",
    "url": "/labs/lab01/",
    
    "relUrl": "/labs/lab01/"
  },"197": {
    "doc": "Homeworks",
    "title": "Homeworks",
    "content": " ",
    "url": "/homeworks/",
    
    "relUrl": "/homeworks/"
  },"198": {
    "doc": "Lab 06: BSTMap",
    "title": "FAQ",
    "content": "The FAQ for this lab can be found here. ",
    "url": "/labs/lab06/#faq",
    
    "relUrl": "/labs/lab06/#faq"
  },"199": {
    "doc": "Lab 06: BSTMap",
    "title": "Introduction",
    "content": "In this lab, you’ll create BSTMap, a BST-based implementation of the Map61B interface, which represents a basic tree-based map. You will be creating this completely from scratch, using the interface provided as your guide. After you’ve completed your implementation, you’ll compare the performance of your implementation to a list-based Map implementation ULLMap as well as the built-in Java TreeMap class (which uses a BST variant known as a red-black tree). ",
    "url": "/labs/lab06/#introduction",
    
    "relUrl": "/labs/lab06/#introduction"
  },"200": {
    "doc": "Lab 06: BSTMap",
    "title": "Pulling from skeleton",
    "content": "To get the assignment, pull from the skeleton in your personal repository: . git pull skeleton main . This assignment is lab06. ",
    "url": "/labs/lab06/#pulling-from-skeleton",
    
    "relUrl": "/labs/lab06/#pulling-from-skeleton"
  },"201": {
    "doc": "Lab 06: BSTMap",
    "title": "BSTMap",
    "content": "In this lab (and future labs), we may not provide as much skeleton code as in the past. If you’re having trouble getting started, please come in to lab or check out any of the resources provided! . Create a class BSTMap that implements the Map61B interface using a BST (Binary Search Tree) as its core data structure. Your code will not compile until you create the BSTMap class and implement all the methods in Map61B. You can implement methods one at a time by writing the method signatures of all the required methods, but throwing UnsupportedOperationExceptions for the other implementations until you get around to actually writing them. Refer to this section on how to throw the exception. In your implementation, you should ensure that generic keys K in BSTMap&lt;K,V&gt; implement Comparable. This is called a bounded type parameter. The syntax is a little tricky, but we’ve given an example below. Here, we are creating a BSTSet for Comparable objects. We’ve included the rather strange compareRoots for pedagogical purposes (for a compareTo refresher, see this documentation): . public class BSTSet&lt;K extends Comparable&lt;K&gt;&gt; implements Set61B&lt;K&gt; { private class BSTNode { K item; // ... } private BSTNode root; /* Returns whether this BSTSet's root is greater than, equal to, or less * than the other BSTSet's root, following the usual `compareTo` * convention. */ public int compareRoots(BSTSet other) { /* We are able to safely invoke `compareTo` on `n1.item` because we * know that `K` extends `Comparable&lt;K&gt;`, so `K` is a `Comparable`, and *`Comparable`s must implement `compareTo`. */ return this.root.item.compareTo(other.root.item); } // ... } . You may have noticed that the syntax for a bounded type parameter uses extends even though Comparable is an interface. In the context of bounded type parameters, extends can mean extends or implements (docs). Don’t ask us why - we don’t know either. (The syntax also implies you can “extend” final classes such as Integer, which is impossible. Go Java!) . Remember, the code snippet above emulates a Set - you’ll need to implement a Map. We recommend you use similar logic for BSTMap, with some nested node class to help facilitate your implementation. Your BSTMap should have two generic parameters K and V, representing the generic types of the keys and values in your BSTMap, respectively. IntelliJ has a nice feature that will generate the method signatures for you. If you’re implementing an interface and haven’t implemented all the methods, IntelliJ will highlight the class signature in red. If you hover over this, you should be able to select Implement methods. On the pop-up window, make sure you’ve selected the option for “Copy JavaDoc” and “Insert @Override”. Click “OK” and IntelliJ should populate the class with the required method signatures (they won’t be functional though!) and copy over the comments. It should look something like this (you don’t have Set61B, this is just an example!): . In this example, IntelliJ will generate the clear, size, and iterator method signatures, because that’s all our mythical Set61B interface requires. If you follow this procedure with your code, you should have all the method signatures required for Map61B. (You can also pick and choose which signatures to generate, if you’d like.) . Exercise: BSTMap . As mentioned, you’ll want to create a class, BSTMap, that implements the Map61B interface. Make sure you are writing your implementation in BSTMap.java, otherwise your code might not run on the autograder! The following methods are required: . | void put(K key, V value): Associates the specified key with the value. | V get(K key): Returns the value that is associated with key. | boolean containsKey(K key): Returns if this map has a mapping for the given key. | int size(): Returns the number of key-value mappings. | void clear(): Removes every mapping from this map. | . Make sure to read through the comments for each method in the Map61B interface to fully understand what to implement. The above descriptions are not necessarily comprehensive. For debugging purposes, your BSTMap should also include an additional method printInOrder() (not given in the Map61B interface) that prints out your BSTMap in order of increasing Key. We will not test the result of this method, but you may find this helpful for testing your implementation! . Implement the BSTMap class, which implements the Map61B interface and the associated, non-optional methods. You should ensure that the keys in your BSTMap are Comparable by using a bounded type parameter. We strongly recommend you create helper methods to facilitate your implementation (specifically, recursive helper methods are strongly encouraged). Unfortunately, most methods you need to implement rely on others for testing purposes (get requires put, etc.). This makes it difficult to test most methods until you implement put. We recommend you implement the methods in the order specified in Map61B. You can test your implementation using TestBSTMap.java. There is an optional part of BSTMap. These methods are optional to implement: iterator, remove, keySet. They are not required for the timing portion, described in this section. As mentioned, if you are not implementing the optional part, throw an UnsupportedOperationException, like below: . throw new UnsupportedOperationException(); . If you are completing the optional part, refer to this section and the comments in Map61B for a more detailed description. Resources . The following resources might prove useful: . | Fall 2024, Lecture 16 slides. | ULLMap.java (given in src/), an unordered, linked-list-based Map61B implementation. | To help you also get started, an algorithmic guide to put and get can be found here | . ",
    "url": "/labs/lab06/#bstmap",
    
    "relUrl": "/labs/lab06/#bstmap"
  },"202": {
    "doc": "Lab 06: BSTMap",
    "title": "So… How Fast Is It?",
    "content": "There is one interactive speed test provided in InsertRandomSpeedTest.java. Do not attempt to run this test before you’ve completed BSTMap. Once you’re ready, you can run the tests in IntelliJ. The InsertRandomSpeedTest class performs tests on element-insertion speed of your BSTMap, ULLMap (provided), Java’s built-in TreeMap, and Java’s built-in HashMap (which you’ll explore more in a later lab). It works by asking the user for a desired length of each String to insert, and also for an input size (the number of insertions to perform). It then generates that many Strings of length as specified and inserts them into the maps as &lt;String, Integer&gt; pairs. Try it out and see how your data structure scales with the number of insertions compared to the naive and industrial-strength implementations. Remember that asymptotics aren’t representative on small samples, so make sure your inputs are sufficiently large if you are getting a confusing trend (keep in mind that there is a limit thought - if you enter too large of a value, the program might overflow, so play around with sufficiently large values). Record your results in a file named speedTestResults.txt. Run the speed tests and record your results in speedTestResults.txt. There is no standard format required for your results, but at a minimum, you should include what you did and what you observed. ",
    "url": "/labs/lab06/#so-how-fast-is-it",
    
    "relUrl": "/labs/lab06/#so-how-fast-is-it"
  },"203": {
    "doc": "Lab 06: BSTMap",
    "title": "Scoring",
    "content": "The lab is out of 5 points. There are no hidden tests on Gradescope, in the sense that the score you get on Gradescope is your final score. However, there is one test not provided locally, which checks for your speedTestResults.txt. Passing the local test TestBSTMap.java means that you will get full credit for BSTMap.java, but not necessarily for your speedTestResults.txt on Gradescope. So, for this lab, as long as you pass the relevant local tests (TestBSTMap.java) and fill out the speedTestResults.txt file sufficiently, you will get full credit on Gradescope. ",
    "url": "/labs/lab06/#scoring",
    
    "relUrl": "/labs/lab06/#scoring"
  },"204": {
    "doc": "Lab 06: BSTMap",
    "title": "More (Ungraded) Exercises for BSTMap",
    "content": "These will not be graded, but you can still receive feedback using the local tests, specifically TestBSTMapExtra.java (and on the autograder). Implement the methods iterator(), keySet(), remove(K key) in your BSTMap class. When implementing the iterator method, you should return an iterator over the keys, in sorted order. remove() is fairly challenging - you’ll need to implement Hibbard deletion. For remove, you should return null if the argument key does not exist in the BSTMap. Otherwise, delete the key-value pair (key, value) and return value. ",
    "url": "/labs/lab06/#more-ungraded-exercises-for-bstmap",
    
    "relUrl": "/labs/lab06/#more-ungraded-exercises-for-bstmap"
  },"205": {
    "doc": "Lab 06: BSTMap",
    "title": "Submission",
    "content": "Just as you did for the previous assignments, add, commit, then push your Lab 06 code to GitHub. Then, submit to Gradescope to test your code. ",
    "url": "/labs/lab06/#submission",
    
    "relUrl": "/labs/lab06/#submission"
  },"206": {
    "doc": "Lab 06: BSTMap",
    "title": "Optional: Asymptotics Problems",
    "content": "This part is also optional, and we’ve included it here for additional practice on asymptotics. Check your answers against the solutions! . Given B, a BSTMap with N key-value pairs, and (K, V), a random key-value pair, answer the following questions. Unless otherwise stated, “big-Oh” bounds (e.g. $\\mathcal{O}(N)$) and “big-Theta” bounds (e.g. $\\Theta(N)$) refer to the number of comparisons in the given method call(s). For questions 1-7, state whether the statement is true or false. For question 8, give a runtime bound. | B.put(K, V) $\\in \\mathcal{O}(\\log N)$ | B.put(K, V) $\\in \\Theta(\\log N)$ | B.put(K, V) $\\in \\Theta(N)$ | B.put(K, V) $\\in \\mathcal{O}(N)$ | B.put(K, V) $\\in \\mathcal{O}(N^2)$ | For a fixed key C not equal to K, both B.containsKey(C) and B.containsKey(K) run in $\\Omega(\\log N).$ | (This question is quite difficult.) Let b be a Node of a BSTMap, and two subtrees rooted at root, called left and right. Further, assume the method numberOfNodes(Node p) returns the number of nodes ($M$) of the subtree rooted at p and runs in $\\Theta(M)$ time. What is the running time, in both the worst and best case, of mystery(b.root, z), assuming 1 &lt;= z &lt; numberOfNodes(b.root)? | . Hint: See if you can work out what mystery does first, then see how it accomplishes it. public Key mystery(Node b, int z) { int numLeft = numberOfNodes(b.left); if (numLeft == z - 1) { return b.key; } else if (numLeft &gt; z) { return mystery(b.left, z); } else { return mystery(b.right, z - numLeft - 1); } } . ",
    "url": "/labs/lab06/#optional-asymptotics-problems",
    
    "relUrl": "/labs/lab06/#optional-asymptotics-problems"
  },"207": {
    "doc": "Lab 06: BSTMap",
    "title": "Lab 06: BSTMap",
    "content": " ",
    "url": "/labs/lab06/",
    
    "relUrl": "/labs/lab06/"
  },"208": {
    "doc": "Labs",
    "title": "Labs",
    "content": " ",
    "url": "/labs/",
    
    "relUrl": "/labs/"
  },"209": {
    "doc": "Lab 02: Debugging (Part 1)",
    "title": "FAQ",
    "content": "Each assignment will have an FAQ linked at the top. You can also access it by adding “/faq” to the end of the URL. The FAQ for Lab 02 is located here. ",
    "url": "/labs/lab02/#faq",
    
    "relUrl": "/labs/lab02/#faq"
  },"210": {
    "doc": "Lab 02: Debugging (Part 1)",
    "title": "Introduction",
    "content": "To debug a program, you must first know what’s wrong. In this lab, you’ll get some experience with using the debugger to see the program state. When you run into a bug, the error is accompanied with a “stack trace” that details the method calls that caused the error in the first place. We won’t cover going through the stack trace in this lab, but we’ll talk more about it in a later lab. TODO: Add LLM exercise that showcases LLM failure modes (e.g. confirmation bias). Setup . Follow the assignment workflow to get the assignment and open it in IntelliJ. Goals and Outcomes . In this lab, you will enhance your code debugging abilities by defusing a (programmatic) bomb. We’ll guide you through this process, but the intention is to make this a realistic debugging experience. By the end of this lab, you will… . | Be able to use the debugger and visualizer to inspect program state. | Be able to interpret test failure messages. | Be better able to approach debugging code. | . For this lab and course in general, we highly encourage that you try things out on your own first, including looking things up if you’re unsure what something is. In this lab, this might be about what a certain error means or the exception that is thrown - google it! . ",
    "url": "/labs/lab02/#introduction",
    
    "relUrl": "/labs/lab02/#introduction"
  },"211": {
    "doc": "Lab 02: Debugging (Part 1)",
    "title": "Bomb",
    "content": "The BombMain class calls the various phase methods of the Bomb class. For this lab, we’ll be running the lab through the tests in BombTest.java. If you were to run BombTest (in the testing folder), you’ll notice that there are some errors - this is because the current inputs to the phase methods in BombMain aren’t the correct passwords! Your job is to figure out what the passwords to each of these phases is by using the IntelliJ debugger. WARNING: The code is written so that you can’t find the password just by reading it. For this lab, you are forbidden from editing the Bomb and BombTest code, whether to add print statements or otherwise modify it. The point of this exercise is to get comfortable using tools that will help you a lot down the road. Please take it seriously! If you modify those files, you will not pass the tests on the autograder! . As mentioned, you’ll be running your code from BombTest.java in the testing folder and you can use those tests to help you debug, as on other assignments, you will end up writing your own tests to help you fix bugs! The only file you need to modify is BombMain.java . BombTest.java is where you will be running the program. Bomb.java and BombMain.java will not have the green run button since it does not contain a static void main(String[] args) so please make sure to run the program through BombTest.java! . Interactive Debugging . So far, you might have practiced debugging by using print statements to see the values of certain variables as a program runs. When placed strategically, the output from printing might help make the bugs obvious or narrow down their cause. This method is called print debugging. While print debugging can be very useful, it has a few disadvantages: . | It requires you to modify your code, and clean it up after. | It’s tedious to decide and write out exactly what you want to print. | Printing isn’t always formatted nicely. | . In this lab, we’ll show you a new technique, interactive debugging – debugging by using an interactive tool, or a debugger. We’ll focus on IntelliJ’s built-in debugger. Debugger Overview . Breakpoints . Before starting the IntelliJ debugger, you should set a few breakpoints. Breakpoints mark places in your code where you can suspend the program while debugging and examine its state. This: . | Doesn’t require you to modify your code or clean it up after, since breakpoints are ignored in normal execution. | Lets you see all the variables without needing to write print statements. | Lets IntelliJ display everything in a structured manner | . Go ahead and open up Bomb.java and place a breakpoint. To set a breakpoint, click the area just to the right of the line number. A red circle or diamond should appear where you clicked. If nothing appears, make sure that you click next to a line with code. When the debugger reaches this point in the program, it will pause before the execution of the line or method. Clicking the breakpoint again will remove it. Running the Debugger . Now, let’s set a few breakpoints - you can do this either in Bomb.java or BombMain.java. With these set, we can start a debugging session! Click on the green triangle next to the class or test you want to debug (in test files there may be two green triangles). Instead of clicking the green triangle to run, click the debug option: . The selected program should run until it hits its first breakpoint. A debugger window should also appear on the bottom of the interface, where the console was. On the left, you will be able to see all current method calls and on the right, you will be able to see the values of instantiated variables at this point in the program (they will also be shown in gray text in the editor). For instances of classes, you can click the dropdown to expand them and look at their fields. In the debugger, you have a few options: . | Learn something from the displayed values, identify what’s wrong, and fix your bug! Click to stop the debug session. | Click to resume the program (until it hits another breakpoint or terminates). | Click to advance the program by one line of code. | does something similar, but it will step into any method called in the current line, while will step over it. | will advance the program until after it returns from the current method. | . | If you accidentally step too far and want to start the session over, click (at least right now, there isn’t a good way to directly step back). | . Bomb Introduction (Phase 0) . For this lab, we will be providing method breakdowns if you want an overview of the method/phase that you’re debugging. Set a breakpoint at phase0 and use the debugger to find the password for phase0 and replace the phase0 argument accordingly in bomb/BombMain.java. You can start the program from testBombPhase0 in tests/bomb/BombTest.java. Once you’ve found the correct password, running the code (not in debug mode) should output You passed phase 0 with the password \\&lt;password\\&gt;! instead of Phase 0 went BOOM! . phase0 Method Breakdown . The phase0 method first generates a secret String correctPassword (you don’t need to understand how shufflePassword works). The password passed in from BombMain is then compared against correctPassword. The goal of this phase is to use the debugger to find the value of correctPassword and pass in a password that matches that value! . Visualizer (Phase 1) . For this portion of the lab, we’ll be working with IntList. If you need a quick recap, refer to the relevant lecture slides from this week. Adding to our implementation of IntList are two methods that may not have been mentioned: print and of. The of method makes it more convenient to create IntLists. Here’s a brief demonstration of how it works. Consider the following code: . IntList lst = new IntList(1, new IntList(2, new IntList(3, null))); . That’s a lot of typing for just a list of 1, 2, and 3 (quite confusing too)! The IntList.of method addresses this problem. To create an IntList containing the elements 1, 2, and 3, you can simply type: . IntList lst = IntList.of(1, 2, 3); . The other method print returns a String representation of an IntList. IntList lst = IntList.of(1, 2, 3); System.out.println(lst.print()) // Output: 1 -&gt; 2 -&gt; 3 . Back to debugging - while being able to see variable values is great, sometimes we have data that’s not the easiest to inspect. For example, to look at long IntLists, we need to click a lot of dropdowns. The Java Visualizer shows a box-and-pointer diagram of the variables in your program, which is much better suited for IntLists. To use the visualizer, run the debugger until you stop at a breakpoint, then click the “Java Visualizer” tab. The tab is outlined in red below. The password for phase 1 is an IntList, not a String. You may find the IntList.of method helpful. Set a breakpoint at phase1 and use the Java Visualizer to find the password for phase1 and replace the phase1 argument accordingly in bomb/BombMain.java. You can start the program from testBombPhase1 in tests/bomb/BombTest.java. phase1 Method Breakdown . The phase1 method generates a secret IntList called correctIntListPassword (similar to the previous phase, you don’t need to understand how shufflePasswordIntList works). The password (in the form of an IntList) passed in from BombMain is then compared against the correctIntListPassword for equality. The goal of this phase is to use the debugger’s Java Visualizer to find the structure and value of the correctIntListPassword’s IntList and pass in a password that matches it! . Conditional Breakpoints (Phase 2) . Consider a program that loops 5000 times - trying to step through each time to find the error wouldn’t be too efficient. Instead, you would want your program to pause on a specific iteration, such as the last one. In other words, you would want your program to pause on certain conditions. To do so, create a breakpoint at the line of interest and open the “Edit breakpoint” menu by right-clicking the breakpoint icon itself. There, you can enter a boolean condition such that the program will only pause at this breakpoint if the condition is true. It will look something like this: . Another thing you can do is to set breakpoints for exceptions in Java. If your program is crashing, you can have the debugger pause where the exception is thrown and display the state of your program. To do so, click in the debugger window and press the plus icon to create a “Java Exception Breakpoint”. In the window that should appear, enter the name of the exception that your program is throwing. Set a breakpoint at phase2 and use the debugger to find the password for phase2 and replace the phase2 argument accordingly in bomb/BombMain.java. Remember, don’t edit Bomb.java! You can start the program from testBombPhase2 in tests/bomb/BombTest.java. NOTE: The password isn’t given explicitly like in the previous phases. Rather, your task is to “try to find it” using a conditional breakpoint. phase2 Method Breakdown . The phase2 method takes in your password from BombMain. The method adds 100,000 random integers to a Set called numbers. It then loops through them using a for-each loop, incrementing a variable i as it goes along. On the 1338th iteration (because Java is zero-indexed, i == 1337 on iteration 1338), we check whether your password is equal to the current number. At this point, you should be able to run the tests in tests/bomb/BombTest.java and have all of them pass with a green checkmark. ",
    "url": "/labs/lab02/#bomb",
    
    "relUrl": "/labs/lab02/#bomb"
  },"212": {
    "doc": "Lab 02: Debugging (Part 1)",
    "title": "Deliverables and Scoring",
    "content": "Make sure you did not edit Bomb.java or BombTest.java. There are tests on the autograder that check if you edited those files and you will not pass if there are changes in the file (this includes adding comments). The local tests prevent you from editing Bomb.java, but not BombTest.java (this is only on the autograder), so do not touch those files! . The lab is out of 5 points. | Find all the passwords in BombMain.java and ensure that you pass all tests locally before submitting to Gradescope. | . ",
    "url": "/labs/lab02/#deliverables-and-scoring",
    
    "relUrl": "/labs/lab02/#deliverables-and-scoring"
  },"213": {
    "doc": "Lab 02: Debugging (Part 1)",
    "title": "Submission",
    "content": "Just as you did in Lab 1, add, commit, then push your Lab 2 code to GitHub. Then, submit to Gradescope to test your code. If you need a refresher, check out the instructions in the Lab 1 spec and the Assignment Workflow Guide. ",
    "url": "/labs/lab02/#submission",
    
    "relUrl": "/labs/lab02/#submission"
  },"214": {
    "doc": "Lab 02: Debugging (Part 1)",
    "title": "Acknowledgements",
    "content": "This assignment is adapted from Adam Blank.** . ",
    "url": "/labs/lab02/#acknowledgements",
    
    "relUrl": "/labs/lab02/#acknowledgements"
  },"215": {
    "doc": "Lab 02: Debugging (Part 1)",
    "title": "Lab 02: Debugging (Part 1)",
    "content": " ",
    "url": "/labs/lab02/",
    
    "relUrl": "/labs/lab02/"
  },"216": {
    "doc": "Project 2A: Ngordnet (NGrams)",
    "title": "FAQ",
    "content": "Each assignment will have an FAQ linked at the top. You can also access it by adding “/faq” to the end of the URL. The FAQ for Project 2A is located here. ",
    "url": "/projects/proj2a/#faq",
    
    "relUrl": "/projects/proj2a/#faq"
  },"217": {
    "doc": "Project 2A: Ngordnet (NGrams)",
    "title": "Introduction",
    "content": "In this project, we will build a browser based tool for exploring the history of word usage in English texts. We have provided the front end code (in Javascript and HTML) that collects user inputs and displays outputs. Your Java code will be the back end for this tool, accepting input and generating appropriate output for display. A video introduction to this project can be found below (or at this link). To support this tool, you will write a series of Java packages that will allow for data analysis. Along the way we’ll get lots of experience with different useful data structures. The early part of the project (proj2a) will start by telling you exactly what functions to write and classes to create. The later part (proj2b) will be more open to your own design. You can view the staff solution to the project at ngordnet.datastructur.es. ",
    "url": "/projects/proj2a/#introduction",
    
    "relUrl": "/projects/proj2a/#introduction"
  },"218": {
    "doc": "Project 2A: Ngordnet (NGrams)",
    "title": "Getting Started",
    "content": "To get started, use git pull skeleton main as usual. You’ll also need to download the Project 2 data files (not provided via GitHub for space reasons). Download the data files at this link. You should unzip this file into the proj2 directory such that the data folder is at the same level as the src and static folders. | How to unzip folders on Windows | How to unzip folders on Mac | . Once you are done with this step, your proj2a directory should look like this: . proj2a ├── data │ └── ngrams ├── src ├── static ├── tests . Note that we’ve set up hidden .gitignore files in the skeleton code so that Git will avoid uploading these data files. This is intentional. Uploading the data files to GitHub will result in a lot of headaches for everybody, so please don’t mess with any files called .gitignore. If you need to work on multiple machines, you should download the zip file once for each machine. If NgordnetQuery doesn’t compile, make sure you are using Java version 15 (preview) or higher (preferably 17+). A video guide to setting up your computer for this project can be found at this link. Note that some files/filenames may be slightly different; in particular, the hugbrowsermagic directory in the video is now just called browser in your skeleton files. ",
    "url": "/projects/proj2a/#getting-started",
    
    "relUrl": "/projects/proj2a/#getting-started"
  },"219": {
    "doc": "Project 2A: Ngordnet (NGrams)",
    "title": "Building An NGrams Viewer",
    "content": "The Google Ngram dataset provides many terabytes of information about the historical frequencies of all observed words and phrases in English (or more precisely all observed ngrams). Google provides the Google Ngram Viewer on the web , allowing users to visualize the relative historical popularity of words and phrases. For example, the link above plots the weighted popularity history of the phrases “global warming” (a 2gram) and “to the moon” (a 3gram). In Project 2A, you will be build a version of this tool that only handles 1grams. In other words, you’ll only be able to handle individual words. We’ll only use a small subset (around 300 megabytes) of the full 1grams dataset, as larger datasets will require more sophisticated techniques that are out of scope for this class. ",
    "url": "/projects/proj2a/#building-an-ngrams-viewer",
    
    "relUrl": "/projects/proj2a/#building-an-ngrams-viewer"
  },"220": {
    "doc": "Project 2A: Ngordnet (NGrams)",
    "title": "TimeSeries",
    "content": "A TimeSeries is a special purpose extension of the existing TreeMap class where the key type parameter is always Integer, and the value type parameter is always Double. Each key will correspond to a year, and each value a numerical data point for that year. You can find the TreeMap API from here to see which methods are available to you. For example, the following code would create a TimeSeries and associate the year 1992 with the value 3.6 and 1993 with 9.2. TimeSeries ts = new TimeSeries(); ts.put(1992,3.6); ts.put(1993,9.2); . The TimeSeries class provides some additional utility methods to the TreeMap class, which it extends. Fill out the TimeSeries class (located in the src/ngrams/TimeSeries.java file) according to the API provided in the file. Be sure to read the comments above each method. For an example of how TimeSeries objects are used, check out the test named testFromSpec() in the TimeSeriesTest.java file that we’ve provided. This test creates a TimeSeries of cat and dog populations and then computes their sum. Note that there is no value for 1993 because that year does not appear in either TimeSeries. You may not add additional public methods to this class. You’re welcome to add additional private methods. TimeSeries Tips . | TimeSeries objects should have no instance variables. A TimeSeries is-a TreeMap. That means your TimeSeries class also has access to all methods that a TreeMap has; see the TreeMap API. | Several methods require that you compare the data of two TimeSeries. You should not have any code which fills in a zero if a year or value is unavailable. | The provided TimeSeriesTest class provides a simple test of the TimeSeries class. Feel free to add your own tests. | Note that the unit tests we gave you do not evaluate the correctness of the dividedBy method. | . | You’ll notice in testFromSpec() that we did not directly compare expectedTotal with totalPopulation.data(). This is because doubles are prone to rounding errors, especially after division operations (for reasons that you will learn in 61C). Thus, assertThat(x).isEqualTo(y) may unexpectedly return false when x and y are doubles. Instead, you should use assertThat(x).isWithin(1E-10).of(y), which returns true as long as x and y are within $10^{-10}$ of each other. | You may assume that the dividedBy operation never divides by zero. | . ",
    "url": "/projects/proj2a/#timeseries",
    
    "relUrl": "/projects/proj2a/#timeseries"
  },"221": {
    "doc": "Project 2A: Ngordnet (NGrams)",
    "title": "NGramMap",
    "content": "The NGramMap class will provide various convenient methods for interacting with Google’s NGrams dataset. This task is more open-ended and challenging than the creation of the TimeSeries class. As with TimeSeries, you’ll be filling in the methods of an existing NGramMap.java file. NGramMap should not extend any class. If you call a method that returns a TimeSeries, and there is no available data for the given method call, you should return an empty TimeSeries. For example, ngm.weightHistory(\"asdfasdf\") should return a TimeSeries with nothing in it, since \"asdfasdf\" is not a word in the dataset. As another example, ngm.countHistory(\"adopt\", 1400, 1410) should also return a TimeSeries with nothing in it, since \"adopt\" has no data during those years. Fill out the NGramMap class (located in the src/ngrams/NGramMap.java file) according to the API provided in the file. Once again, be sure to read the comments above each method. For an example of an NGramMap at work, the testOnLargeFile() in NGramMapTest creates an NGramMap from the top_14377_words.csv and total_counts.csv files (described below). It then performs various operations related to the occurrences of the words \"fish\" and \"dog\" in the period between 1850 and 1933. You may not add additional public methods to this class. You’re welcome to add additional private methods. Input File Formats . The NGram dataset comes in two different file types. The first type is a “words file”. Each line of a words file provides tab separated information about the history of a particular word in English during a given year. airport 2007 175702 32788 airport 2008 173294 31271 request 2005 646179 81592 request 2006 677820 86967 request 2007 697645 92342 request 2008 795265 125775 wandered 2005 83769 32682 wandered 2006 87688 34647 wandered 2007 108634 40101 wandered 2008 171015 64395 . The first entry in each row is the word. The second entry is the year. The third entry is the number of times that the word appeared in any book that year. The fourth entry is the number of distinct sources that contain that word. Your program should ignore this fourth column. For example, from the text file above, we can observe that the word “wandered” appeared 171,015 times during the year 2008, and these appearances were spread across 64,395 distinct texts. For this project, we never care about the fourth entry (total number of volumes). The other type of file is a “counts file”. Each line of a counts file provides comma separated information about the total corpus of data available for each calendar year. 1470,984,10,1 1472,117652,902,2 1475,328918,1162,1 1476,20502,186,2 1477,376341,2479,2 . The first entry in each row is the year. The second is the total number of words recorded from all texts that year. The third number is the total number of pages of text from that year. The fourth is the total number of distinct sources from that year. Your program should ignore the third and fourth columns. For example, we see that Google has exactly one English language text from the year 1470, and that it contains 984 words and 10 pages. For the purposes of our project the 10 and the 1 are irrelevant. You may wonder why one file is tab separated and the other is comma separated. I didn’t do it, Google did. Luckily, this difference won’t be too hard to handle. NGramMap Tips . There is a lot to think about for this part of the project. We’re trying to mimic the situation in the real world where you have some big open-ended problem and have to figure out the approach from scratch. This can be intimidating! It will likely take some time and a lot of experimentation to figure out how to proceed. To help keep things from being too difficult, we’ve at least provided a list of methods to implement. Keep in mind that in the real world (and in proj2b and proj3), even the list of methods will be your choice. Your code should be fast enough that you can create an NGramMap using top_14377_words.csv. Loading should take less than 60 seconds (maybe a bit longer on an older computer). If your computer has enough memory, you should also be able to load top_49887_words.csv. | The bulk of your work in this class will be implementing the constructor. You’ll need to parse through the provided data files and store this data in a data structure (or structures) of your choice. | This choice is important, since picking the right data structure(s) can make your life a lot easier when implementing the rest of the methods. Thus, we recommend taking a look at the rest of the methods first to help you decide what data structure might be best; then, begin implementing the constructor. | . | Avoid using a HashMap or TreeMap as an actual type argument for your maps. This is usually a sign that what you actually want is a custom defined type. In other words, if your instance variables include a nested mapping that looks like HashMap&lt;blah, HashMap&lt;blah, blah&gt;&gt;, then a TimeSeries or some other class you come up with might be useful to keep in mind instead. | We have not taught you how to read files in Java. We recommend using the In class. The official documentation can be found here. However, you’re welcome to use whatever technique you’d like that you learn about online. We provide an example class FileReaderDemo.java that gives examples of how to use In. | If you use In, don’t use readAllLines or readAllStrings. These methods are slow. Instead, read inputs one chunk at a time. See src/main/FileReaderDemo.java for an example. | Additionally, to check if there are any lines left in a file, you should use hasNextLine (and not isEmpty). | . | Our provided tests only cover some methods, but some methods are only tested on a very large file. You will need to write additional tests. | Rather than using one of the large input files (e.g. top_14377_words.csv), we recommend starting with one of the smaller input files, either very_short.csv or words_that_start_with_q.csv. | . | Like in TimeSeries, you should not have any code which fills in a zero if a value is unavailable. | If it helps speed up your code, you can assume year arguments are between 1400 and 2100. These variables are stored as constants MIN_YEAR and MAX_YEAR in the TimeSeries class. | NGramMap should not extend any other class. | Your methods should be simple! If you pick the right data structures, the methods should be relatively short. | If the word is invalid, return an empty TimeSeries. | . ",
    "url": "/projects/proj2a/#ngrammap",
    
    "relUrl": "/projects/proj2a/#ngrammap"
  },"222": {
    "doc": "Project 2A: Ngordnet (NGrams)",
    "title": "HistoryTextHandler",
    "content": "In this final part of Project 2A, we’ll do a bit of software engineering to set up a web server that can handle NgordnetQueries. While this content isn’t strictly related to data structures, it is incredibly important to be able to take projects and deploy them for real world use. Note: You should only begin this part when you are fairly confident that TimeSeries and NGramMap are working properly. | In your web browser, open up the ngordnet_2a.html file in the static folder. You can do this from your finder menu in your operating system, or by right-clicking on the ngordnet_2a.html in IntelliJ, clicking “Open in”, then “Browser”. You can use whatever browser you want, though TAs will be most familiar with Chrome. You’ll see a web browser based interface that will ultimately (when you’re done with the project) allow a user to enter a list of words and display a visualization. | Try entering “cat, dog” into the “words” box, then click History (Text). You’ll see that nothing useful shows up. Optional: If you open the developer tools in your web browser (see Google for how to do this), you’ll see an error that looks like either “CONNECTION_REFUSED” or “INVALID_URL”. The problem is that the Javascript tries to access a server to generate the results, but there is no web server running that can handle the request to see the history of cat and dog. | Open the main.Main class. This class’s main method first creates a NgordnetServer object. The API for this class is as follows: First, we call startUp on the NgordnetServer object, then we “register” one or more NgordnetQueryHandler using the register command. The precise details here are beyond the scope of our class. The basic idea is that when you call hns.register(\"historytext\", new DummyHistoryTextHandler(ngm)), an object of type DummyHistoryTextHandler is created that will handle any clicks to the History (Text) button. | Try running the main.Main class. In the terminal output in IntelliJ you should see the line: INFO org.eclipse.jetty.server.Server - Started..., which means the server started correctly. Now open the ngordnet_2a.html file again, enter “cat, dog” again, then click History (Text). This time, you should see a message that says: . You entered the following info into the browser: Words: [cat, dog] Start Year: 2000 End Year: 2020 . | Now open main.DummyHistoryTextHandler, you’ll see a handle method. This is called whenever the user clicks the History (Text) button. The expected behavior should instead be that when the user clicks History (Text) for the prompt above, the following text should be displayed: . | . cat: {2000=1.71568475416827E-5, 2001=1.6120939684412677E-5, 2002=1.61742010630623E-5, 2003=1.703155141714967E-5, 2004=1.7418408946715716E-5, 2005=1.8042211615010028E-5, 2006=1.8126126955841936E-5, 2007=1.9411504094739293E-5, 2008=1.9999492186117545E-5, 2009=2.1599428349729816E-5, 2010=2.1712564894218663E-5, 2011=2.4857238078766228E-5, 2012=2.4198586699546612E-5, 2013=2.3131865569578688E-5, 2014=2.5344693375481996E-5, 2015=2.5237182007765998E-5, 2016=2.3157514119191215E-5, 2017=2.482102172595473E-5, 2018=2.3556758130732888E-5, 2019=2.4581322086049953E-5} dog: {2000=3.127517699525712E-5, 2001=2.99511426723737E-5, 2002=3.0283458650225453E-5, 2003=3.1470761877596034E-5, 2004=3.2890514515432536E-5, 2005=3.753038415155302E-5, 2006=3.74430614362125E-5, 2007=3.987077208249744E-5, 2008=4.267197824115907E-5, 2009=4.81026086549733E-5, 2010=5.30567576173992E-5, 2011=6.048536820577008E-5, 2012=5.179787485962082E-5, 2013=5.0225599367200654E-5, 2014=5.5575537540090384E-5, 2015=5.44261096781696E-5, 2016=4.805214145459557E-5, 2017=5.4171157785607686E-5, 2018=5.206751570646653E-5, 2019=5.5807040409297486E-5} . To pass on the autograder, the formatting of the output must match exactly. | All lines of text, including the last line, should end in a new line character. | All whitespace and punctuation (commas, braces, colons) should follow the example above. | . These numbers represent the weighted popularity histories of the words cat and dog in the given years. Due to rounding errors, your numbers may not be exactly the same as shown above. Your format should be exactly as shown above: specifically the word, followed by a colon, followed by a space, followed by a string representation of the appropriate TimeSeries where key-value pairs are given as a comma-separated list inside curly braces, with an equals sign between the key and values. Note that you don’t need to write any code to generate the string representation of each TimeSeries, you can just use the toString() method. Now it’s time to implement the HistoryText button! . Create a new file called HistoryTextHandler.java that takes the given NgordnetQuery and returns a String in the same format as above. Then, modify Main.java so that your HistoryTextHandler is used when someone clicks History (Text). In other words, instead of registering DummyHistoryTextHandler, you should register your HistoryTextHandler class instead. You might notice that Main.java prints out a link when the server has started up. If you find it more convenient, you can just click this link instead of opening the ngordnet_2a.html file manually. HistoryTextHandler Tips . | The constructor for HistoryTextHandler should be of the following form: public HistoryTextHandler(NGramMap map). | Use the DummyHistoryTextHandler.java as a guide, pattern matching where appropriate. Being able to tinker with example code and bend it to your will is an incredibly important real world skill. Experiment away, don’t be afraid to break something! | For Project 2A, you can ignore the k instance variable of NgordnetQuery. | Use the .toString() method built into the TimeSeries class that gets inherited from TreeMap. | For your HistoryTextHandler to be able to do something useful, it’s going to need to be able to access the data stored in your NGramMap. DO NOT MAKE THE NGRAM MAP INTO A STATIC VARIABLE! This is known as a “global variable” and is rarely the appropriate solution for any problem. Hint: Your HistoryTextHandler class can have a constructor. | If word is invalid, think about how NGramMap is handling this situation. | . ",
    "url": "/projects/proj2a/#historytexthandler",
    
    "relUrl": "/projects/proj2a/#historytexthandler"
  },"223": {
    "doc": "Project 2A: Ngordnet (NGrams)",
    "title": "HistoryHandler",
    "content": "The text based history from the previous section is not useful for much other than auto-grading your work. Actually using our tool to discover interesting things will require visualization. The main.PlotDemo provides example code that uses your NGramMap to generate a visual plot showing the weighted popularity history of the words cat and dog between 1900 and 1950. Try running it. If your NGramMap class is correct, you should see a very long string printed to your console that might look something like: . iVBORw0KGg... This string is a base 64 encoding of an image file. To visualize it, go to codebeautify.org. Copy and paste this entire string into the website, and you should see a plot similar to the one shown below: . What’s going on here? The string your code printed IS THE IMAGE. Keep in mind that any data can be represented as a string of bits. This website knows how to decode this string into the corresponding image, using a predefined standard. If you look at the plotting library, this code relies on the ngordnet.Plotter.generateTimeSeriesChart method, which takes two arguments. The first is a list of strings, and the second is a List&lt;TimeSeries&gt;. The TimeSeries are all plotted in a different color, and each is assigned the label given in the list of strings. Both lists must be of the same length (since the ith string is the label for the ith time series). The ngordnet.Plotter.generateTimeSeriesChart method returns an object of type XYChart. This object can in turn either be converted into base 64 by the ngordnet.Plotter.encodeChartAsString method, or can be displayed to the screen directly by ngordnet.Plotter.displayChart. In your web browser, again open up the ngordnet_2a.html file in the static folder. With your main.Main class running, enter “cat, dog” into the “words” box, then click “history”. You’ll see the strange image below: . You’ll note that the code is not plotting the history of cat and dog, but rather a parabola and a sinusoid. If you open DummyHistoryHandler, you’ll see why. Create a new file called HistoryHandler.java that takes the given NgordnetQuery and returns a String that contains a base-64 encoded image of the appropriate plot. Then, modify the Main.java so that your HistoryHandler is called when someone clicks the History button. HistoryHandler Tips . | The constructor for HistoryHandler should be of the following form: public HistoryHandler(NGramMap map). | Just like before, use DummyHistoryHandler.java as a guide. As mentioned in the previous section, we really want you to learn the skill of tinkering with complex library code to get the behavior you want. | . ",
    "url": "/projects/proj2a/#historyhandler",
    
    "relUrl": "/projects/proj2a/#historyhandler"
  },"224": {
    "doc": "Project 2A: Ngordnet (NGrams)",
    "title": "Deliverables and Scoring",
    "content": "You are responsible for implementing four classes: . | TimeSeries (12 pts): Correctly implement TimeSeries.java. | NGramMap Count (8 pts): Correctly implement countHistory() and totalCountHistory() in NGramMap.java. | NGramMap Weight (12 pts): Correctly implement weightHistory() and summedWeightHistory() in NGramMap.java. | HistoryTextHandler (4 pts): Correctly implement HistoryTextHandler.java. | HistoryHandler (4 pts): Correctly implement HistoryHandler.java. | . Submission . To submit the project, add and commit your files, then push to your remote repository. Then, go to the relevant assignment on Gradescope and submit there. The autograder for this assignment will have the following velocity limiting scheme: . | From the release of the project to the due date, you will have 8 tokens; each of these tokens will refresh every 24 hours. | . ",
    "url": "/projects/proj2a/#deliverables-and-scoring",
    
    "relUrl": "/projects/proj2a/#deliverables-and-scoring"
  },"225": {
    "doc": "Project 2A: Ngordnet (NGrams)",
    "title": "Acknowledgements",
    "content": "The WordNet part of this assignment is loosely adapted from Alina Ene and Kevin Wayne’s Wordnet assignment at Princeton University. ",
    "url": "/projects/proj2a/#acknowledgements",
    
    "relUrl": "/projects/proj2a/#acknowledgements"
  },"226": {
    "doc": "Project 2A: Ngordnet (NGrams)",
    "title": "Project 2A: Ngordnet (NGrams)",
    "content": " ",
    "url": "/projects/proj2a/",
    
    "relUrl": "/projects/proj2a/"
  },"227": {
    "doc": "Lab 05: Project 1 Review",
    "title": "FAQ Page",
    "content": "Please use our common issues and frequently asked questions page as a resource. We’ll be updating this FAQ page on the website throughout the week! . ",
    "url": "/labs/lab05/#faq-page",
    
    "relUrl": "/labs/lab05/#faq-page"
  },"228": {
    "doc": "Lab 05: Project 1 Review",
    "title": "Introduction",
    "content": "In this lab, you will compare your solution to Project 1 with 1-3 other students in your lab. On-time attendance is required this week. If you cannot attend your regular lab, you may attend any other lab instead, barring room capacity. If you are physically unable to attend any lab at all, please fill out this exemption form by Friday, February 28th (2/28). If you have approved extensions for Project 1A/1B that extend past the Lab 5 deadline, please also fill out the form. Do NOT fill out the form unless you have approved extensions. We will be verifying each form submission manually, and those with invalid submissions will not be checked off. We will not be accepting any new form submissions after 2/28, and will be emailing checkoff instructions during the weekend of March 1st (3/1). As part of this lab, TAs will go over part of the solution for Project 1. Do not attend this lab before you have made your final Project 1A and 1B submission to Gradescope, otherwise you will get marked for academic dishonesty. Please find the Lab 5 FAQ here. This lab is due Friday, February 28. Good luck! . ",
    "url": "/labs/lab05/#introduction",
    
    "relUrl": "/labs/lab05/#introduction"
  },"229": {
    "doc": "Lab 05: Project 1 Review",
    "title": "Skeleton",
    "content": "Please run git pull skeleton main in order to receive the lab05 starter files. Make sure your current changes are committed and pushed before pulling! . ",
    "url": "/labs/lab05/#skeleton",
    
    "relUrl": "/labs/lab05/#skeleton"
  },"230": {
    "doc": "Lab 05: Project 1 Review",
    "title": "LinkedListDeque61B Overview",
    "content": "Your TA will start the lab by giving a brief overview of the staff solution to LinkedListDeque61B. LinkedListDeque61B Peer Review . Group up with 1-3 other students and compare solutions. You should form groups with other students in Discord rooms. Don’t be afraid of meeting someone new! Programmers in 61B vary widely in their level of experience and comfort with programming. Our goal here is to help each other get better. Please be nice, and don’t feel bad if your solution is less elegant or even downright ugly. I’ve certainly written incredibly ugly, inelegant code! Why here’s a 1600 line monstrosity I wrote in 1997, and a video demo of it running if you’re curious what it does. knaveos will not be on any exam. Avoid the temptation to explain exactly how your implementation works to your partner. Instead focus your discussion on more specific questions. Some suggested questions are listed below: . | What was the most annoying bug you had and how did you fix it? Did you use the debugger? Did you fix it by adding special cases? Did you do any change-and-pray (where you make a tiny change and hope the AG approves)? | Did you end up cutting anything out to make your code simpler? If so, what? | Do you have any special cases in your code? | Do you have any private helper methods? | Does your code repeat itself anywhere? Would private helper methods have helped? | Were you able to call or reuse code anywhere? | . After discussion, fill out self_reflection.txt with your own self reflection. ",
    "url": "/labs/lab05/#linkedlistdeque61b-overview",
    
    "relUrl": "/labs/lab05/#linkedlistdeque61b-overview"
  },"231": {
    "doc": "Lab 05: Project 1 Review",
    "title": "ArrayDeque61B Overview",
    "content": "Your TA will go over the ArrayDeque61B solution. ArrayDeque61B Peer Review . Now, pair up again and discuss your ArrayDeque61B solutions as you did for LinkedListDeque61B. Fill out your self_reflection.txt. We recommend that you talk to different people than you did for ArrayDeque61B, but it’s OK to stick with your group for ArrayDeque61B. ",
    "url": "/labs/lab05/#arraydeque61b-overview",
    
    "relUrl": "/labs/lab05/#arraydeque61b-overview"
  },"232": {
    "doc": "Lab 05: Project 1 Review",
    "title": "Self Reflection and Submission",
    "content": "Make sure you’ve filled out at least 4 of the questions for both ArrayDeque61B and LinkedListDeque61B in the self_reflection.txt document provided in the skeleton. You should answer a minimum of 8 questions in total. Ask a TA to check your self_reflection.txt and give you the magic word to put in magic_word.txt. Push to Github and submit to Gradescope. ",
    "url": "/labs/lab05/#self-reflection-and-submission",
    
    "relUrl": "/labs/lab05/#self-reflection-and-submission"
  },"233": {
    "doc": "Lab 05: Project 1 Review",
    "title": "Lab 05: Project 1 Review",
    "content": " ",
    "url": "/labs/lab05/",
    
    "relUrl": "/labs/lab05/"
  },"234": {
    "doc": "Project 1A: LinkedListDeque61B",
    "title": "Due: Monday, February 10 at 11:59 PM PT",
    "content": " ",
    "url": "/projects/proj1a/#due-monday-february-10-at-1159-pm-pt",
    
    "relUrl": "/projects/proj1a/#due-monday-february-10-at-1159-pm-pt"
  },"235": {
    "doc": "Project 1A: LinkedListDeque61B",
    "title": "FAQ",
    "content": "Each assignment will have an FAQ linked at the top. You can also access it by adding “/faq” to the end of the URL. The FAQ for Project 1A is located here. ",
    "url": "/projects/proj1a/#faq",
    
    "relUrl": "/projects/proj1a/#faq"
  },"236": {
    "doc": "Project 1A: LinkedListDeque61B",
    "title": "Introduction",
    "content": "In Project 0, you implemented game logic for 2048. In Project 1A and 1B (and some upcoming labs), you will implement your own versions of data structures! In Project 1, you’ll begin by building your own versions of the list-like structure: implementations of a new abstract data type called a Double Ended Queue (deque, pronounced “deck”). By the end of Project 1A, you will… . | Gain an understanding of the usage of a backing linked list in data structures. | Have experience with using testing and test-driven development to evaluate the correctness of your own data structures. | . For Project 1A, we will provide a significant amount of scaffolding by giving explicit instructions. In Project 1B, you’ll be doing a similar task, but with much less scaffolding. This section assumes you have watched and fully digested the lectures up till the DLList lecture, Lecture 5. For this project, you must work alone! Please carefully read the Policy on Collaboration and Cheating to see what this means exactly. In particular, do not look for solutions online. It should also go without saying that you may not use any of the built-in java.util data structures in your implementation! The whole point is to build your own versions! There are a few places where you may use specific data structures outside of tests, and we will clearly say where. Velocity Limiting . On this project, you will have a max of 4 submission tokens to the autograder, each with a refresh rate of 24 hours. Unlike previous assignments, not all tests will be provided locally, so it is up to you to write tests to verify the correctness of your own code. See the Writing Tests section for more details. We will not grant extensions for failing to understand the token limiting policy. If you have questions, please ask! . Style . On this project, we will be enforcing style. You must follow the style guide, or you will be penalized on the autograder. You can and should check your style locally with the CS 61B plugin. We will not remove the velocity limit for failing to check style. We will not be enforcing style for tests so you can use magic numbers! . Getting the Skeleton Files . Follow the instructions in the Assignment Workflow guide to get the skeleton code and open it in IntelliJ. For this project, we will be working in the proj1a directory. You see a proj1a directory appear in your repo with the following structure: . proj1a ├── src │ └── Deque61B.java └── tests ├── LinkedListDeque61BTest.java └── PreconditionTest.java . If you get some sort of error, STOP and either figure it out by carefully reading the git WTFs or seek help at OH or Ed. You’ll potentially save yourself a lot of trouble vs. guess-and-check with git commands. If you find yourself trying to use commands recommended by Google like force push, don’t. Don’t use force push, even if a post you found on Stack Overflow says to do it! . You can also watch Professor Hug’s demo about how to get started and this video if you encounter some git issues. ",
    "url": "/projects/proj1a/#introduction",
    
    "relUrl": "/projects/proj1a/#introduction"
  },"237": {
    "doc": "Project 1A: LinkedListDeque61B",
    "title": "Deque61B: ADT and API",
    "content": "The double ended queue is very similar to the SLList and AList classes that we’ve discussed in class. Here is a definition from the Java standard library. A linear collection that supports element insertion and removal at both ends. The name deque is short for “double ended queue” and is usually pronounced “deck”. Most Deque implementations place no fixed limits on the number of elements they may contain, but this interface supports capacity-restricted deques as well as those with no fixed size limit. We don’t need all the methods defined in Java’s Deque, and have defined our own interface, which can be found in src/Deque61B.java. For example, the get method is described as follows, in something called a Javadoc comment: . /** ... * @param index index to get * @return element at {@code index} in the deque */ T get(int index); . Here, @param indicates a parameter to the method, and @return indicates the return value of the method. The @code tag is used to format as code. If you hover over the method name in IntelliJ, you’ll see a popup that looks like this, which is useful if you want to know what a method does: . Begin by opening the Deque61B.java file and reading the documentation in it. We will not repeat information that is in the interface file in the specification – so, it is on you to make sure that you are reading it as you complete the project. You should not edit Deque61B.java. It is on you to read the descriptions of the other methods. Seriously. Do not skip this. You will spend hours confused if you skip this step. Please save yourself the time and stress! . ",
    "url": "/projects/proj1a/#deque61b-adt-and-api",
    
    "relUrl": "/projects/proj1a/#deque61b-adt-and-api"
  },"238": {
    "doc": "Project 1A: LinkedListDeque61B",
    "title": "LinkedListDeque61B",
    "content": "Assignment Philosophy . A common beginner mistake is to write a large amount of code and hope that it all works once you’re finished. This makes life very difficult for a programmer. Imagine implementing all the methods above, submitting to the autograder, and getting back a message that says something like “call to get returned 9, expected 7”. You have no idea if the problem is the get method itself, or if some other necessary methods are broken. To help encourage better programming habits, in Project 1A, we’re going to hold your hands through the development process. You are not strictly required to follow the recommended steps, i.e. if you pass the autograder, then you get all the points, but we strongly encourage you to follow the steps outlined in this spec. For the intended experience, follow these steps in order. If you do something else and ask us for help, we will refer you back to these steps. Creating the File . Start by creating a file called LinkedListDeque61B. This file should be created in the proj1a/src directory. To do this, right-click on the src directory, navigate to “New -&gt; Java Class”, and give it the name LinkedListDeque61B. We want our LinkedListDeque61B to be able to hold several different types. For example, a LinkedListDeque61B&lt;String&gt; holds Strings and a LinkedListDeque61B&lt;Integer&gt; holds Integers. To enable this, you should edit the declaration of your class so that it reads: . public class LinkedListDeque61B&lt;T&gt; . Recall from lecture that it doesn’t actually matter if we use T or some other string like LinkedListDeque61B&lt;Glerp&gt;. However, we recommend using &lt;T&gt; for consistency with other Java code. We also want to tell Java that every LinkedListDeque61B is a Deque61B, so that users can write code like Deque61B&lt;String&gt; lld1 = new LinkedListDeque61B&lt;&gt;();. To enable this, change the declaration of your class so that it reads: . public class LinkedListDeque61B&lt;T&gt; implements Deque61B&lt;T&gt; . However, this creates an error. In order for a LinkedListDeque61B to be a Deque61B, it needs to implement all the Deque61B methods. However your mouse over the red squiggle, and click the “implement methods” button when the error message box pops up. This will autogenerate the method headers for you. The below GIF goes through these steps: . Lastly, you should create an empty constructor. To do this, add the following code to your file, leaving the constructor blank for now. public LinkedListDeque61B() { } . Note: You can also generate the constructor by clicking “Code”, then “Generate” then “Constructor”, though we prefer the typing-the-code-manually approach. Now you’re ready to get started! . JUnit Tests . LinkedListDeque61BTest . Now open the LinkedListDeque61BTest.java file. You’ll see that every line has a // preceding it. Let’s remove all of the // comments except last line. To do this, highlight all the lines of the file that start with //. Then click “Code” in the top menu bar, then “Comment with Line Comment”. All the lines should now be uncommented. You can also use Ctrl+/ (Windows / Linux) or ⌘ / / Cmd+/ (Mac). Now click and run all the tests. You should fail nearly all the tests since you haven’t implemented any methods yet. Before you can pass these tests, there’s a lot of work you’ll need to do, so we’re going to set aside the tests for now and come back to them much later. PreconditionTest . In this test file, we’ve provided a few tests that check that your LinkedListDeque61B file to check your code structure for correctness. You do not need to understand these tests, but you should be able to run them. Writing and Verifying the Constructor . This section assumes you have watched and fully digested the lectures up to and including the DLList lecture, Lecture 5. A “topology” is a structure that you can use to represent the linked list. Though there are numerous choices as discussed in lecture, for this project, you are required to implement a circular, doubly-linked topology with a sentinel: . The empty list is represented by a single sentinel node that points at itself. There is a single instance variable called sentinel that points at this sentinel. See this slide. As mentioned in lecture, though this last approach seems the most complicated at first, it will ultimately lead to the simplest implementation. Implement the constructor for LinkedListDeque61B to match the appropriate topology. Along the way you’ll need to create a Node class and introduce one or more instance variables. This may take you some time to understand fully. Your nodes should be doubly-linked, and have exactly the necessary fields (instance variables) for a doubly-linked node. Additionally, you should only have one node class, and this node class must be an inner, or nested class inside LinkedListDeque61B. The design of your Node class is a strict requirement. If your Node class does not meet the specfication listed above (nested class, with the fields of a doubly linked node) you will not pass the autograder. When you’re done, set a breakpoint on the first line of addFirstTestBasic. Run the test in debug mode, and use the Step Over () feature. Use the Java Visualizer to verify that your created object matches the expected topology. Task: Implement the constructor. Your LinkedListDeque61B` constructor must take 0 arguments. Implement a node class. (You would also probably need some instance variables.) . If PreconditionTest fails, your implementation is insufficient in some way. The test should give you a hint as to what is wrong. Some common mistakes: . | You may be using an incorrect topology. (If you run into a NullPointerException, this is likely the case.) | Node might be defined in a separate file. | Node might be using an incorrect type to store data. Remember that Deque61B is generic. | LinkedListDeque61B might have a constructor that takes additional arguments. | It might have too few or too many fields (instance variables) for a doubly-linked node. | It might have non-primitive or non-node fields. | . The other tests may not work until you complete toList. Writing and Verifying addFirst and addLast . addFirst and addLast may not use looping or recursion. A single add operation must take \"constant time,\" that is, adding an element should take approximately the same amount of time no matter how large the deque is. This means that you cannot use loops that iterate through all / most elements of the deque. Fill in the addFirst and addLast methods. Then, debug addFirstAndAddLastTest. This test will not pass because you haven’t written toList yet, but you can use the debugger and visualizer to verify that your code is working correctly. Task: Implement addFirst and addLast, and verify that they are correct using addFirstAndAddLastTest and the Java visualizer. The tests will not work until you complete the next section, toList. Writing and Verifying toList . You may have found it somewhat tedious and unpleasant to use the debugger and visualizer to verify the correctness of your addFirst and addLast methods. There is also the problem that such manual verification becomes stale as soon as you change your code. Imagine that you made some minor but uncertain change to addLast. To verify that you didn’t break anything you’d have to go back and do that whole process again. Yuck. (Also, we have just under 1500 students! No way we’re doing that to grade everyone’s work.) . What we really want are some automated tests. But unfortunately there’s no easy way to verify correctness of addFirst and addLast if those are the only two methods we’ve implemented. That is, there’s currently no way to iterate over our list and get back its values and see that they are correct. That’s where the toList method comes in. When called, this method returns a List representation of the Deque61B. For example, if the Deque61B has had addLast(5), addLast(9), addLast(10), then addFirst(3) called on it, then the result of toList() should be a List with 3 at the front, then 5, then 9, then 10. If printed in Java, it’d show up as [3, 5, 9, 10]. Write the toList method. The first line of the method should be something like List&lt;T&gt; returnList = new ArrayList&lt;&gt;(). This is one location where you are allowed to use a Java data structure. You can import ArrayList by using IntelliJ’s auto import or copying this statement: . import java.util.ArrayList; // import the ArrayList class . To verify that your toList method is working correctly, you can run the tests in LinkedListDeque61BTest. If you pass all the tests, you’ve established a firm foundation upon which to continue working on the project. Woo! If not, use the debugger and carefully investigate to see what’s wrong with your toList method. If you get really stuck, go back and verify that your addFirst and addLast methods are working. Some later methods might seem easy if you use toList. You may not call toList inside LinkedListDeque61B; there is a test that checks for this. Task: Implement toList, and verify that it is correct with the tests in LinkedListDeque61BTest. The Testing Component . In Project 0, we gave you a full suite of unit tests that you could use to test your code locally. In this project, you’ll be required to write your own unit test suite that provides similar coverage. To give a bit of insight about how this works, we will essentially be taking your test file (LinkedListDeque61BTest.java) and using it to “test” our staff solution of LinkedListDeque61B. Using some autograder magic, we’re able to determine which edge cases your tests are able to hit, thus telling us the “coverage” of your test suite. So, in order to get a full score on this component, you should try to think of any and all corner cases for each of the methods! . Our staff solution also only has a constructor that takes 0 arguments, which means that your tests should only use a constructor that takes 0 arguments. Sharing tests are considered academic misconduct and cheating. Please don’t. This is for you to develop testing skills. Writing Tests . To write tests, we will use Google’s Truth assertions library. We use this library over JUnit assertions for the following reasons: . | Better failure messages for lists. | Easier to read and write tests. | Larger assertions library out of the box. | . We often write tests using the Arrange-Act-Assert pattern: . | Arrange the test case, such as instantiating the data structure or filling it with elements. | Act by performing the behavior you want to test. | Assert the result of the action in (2). | . We will often have multiple “act” and “assert” steps in a single test method to reduce the amount of boilerplate (repeated) code. You should write your tests in LinkedListDeque61BTest.java. Note: The tests that you write in this project will be checked for the different \"scenarios\" they cover. You will need to cover sufficiently many scenarios, including a few edge cases. Passing the coverage checker does not mean that your tests are perfect! There might still be edge cases that you are missing, as we do not require 100% coverage, and we cannot possibly test every single case. We recommend that you write your own tests to check your code in cases that fail, and not just rely on the coverage checker. While the coverage checker can check how much you do to the deque, it doesn’t check what you assert about the deque. If you find yourself failing autograder tests that you think you have coverage for, a good next step is to add additional assertions to your own tests. Examples include verifying the result of every call, checking the entire deque between every call, or checking the results of other deque methods. Truth Assertions . A Truth assertion takes the following format: . assertThat(actual).isEqualTo(expected); . To add a message to the assertion, we can instead use: . assertWithMessage(\"actual is not expected\") .that(actual) .isEqualTo(expected); . We can use things other than isEqualTo, depending on the type of actual. For example, if actual is a List, we could do the following to check its contents without constructing a new List: . assertThat(actualList) .containsExactly(0, 1, 2, 3) .inOrder(); . If we had a List or other reference object, we could use: . assertThat(actualList) .containsExactlyElementsIn(expected) // `expected` is a List .inOrder(); . Truth has many assertions, including isNull and isNotNull; and isTrue and isFalse for booleans. IntelliJ’s autocomplete will often give you suggestions for which assertion you can use. If you do not assert anything, you will pass your own tests, even if your implementation is incorrect! For example, the following test will pass, even if addFirst does nothing: . @Test public void noAssertionTest() { Deque61B&lt;String&gt; lld = new LinkedListDeque61B&lt;&gt;(); lld.addFirst(\"front\"); } . You also must remember to use .isTrue() or .isFalse() when asserting boolean statements. For example, the following test will always pass, even if isEmpty always returns false! . @Test public void isEmptyTest() { Deque61B&lt;String&gt; lld = new LinkedListDeque61B&lt;&gt;(); assertThat(lld.isEmpty()); } . The last line of the above test should instead be assertThat(lld.isEmpty()).isTrue();. Example Test . Let’s break down the provided addLastTestBasic: . @Test /** In this test, we use only one assertThat statement. * Sometimes, the tedious work of adding the extra assertion statements isn't worth it. */ public void addLastTestBasic() { Deque61B&lt;String&gt; lld1 = new LinkedListDeque61B&lt;&gt;(); lld1.addLast(\"front\"); // after this call we expect: [\"front\"] lld1.addLast(\"middle\"); // after this call we expect: [\"front\", \"middle\"] lld1.addLast(\"back\"); // after this call we expect: [\"front\", \"middle\", \"back\"] assertThat(lld1.toList()).containsExactly(\"front\", \"middle\", \"back\").inOrder(); } . | @Test tells Java that this is method is a test, and should be run when we run tests. | Arrange: We construct a new Deque61B, and add 3 elements to it using addLast. | Act: We call toList on Deque61B. This implicitly depends on the earlier addLast calls. | Assert: We use a Truth assertion to check that the toList contains specific elements in a specific order. | . The Remaining Methods . Now you should test and implement all the remaining methods. For the rest of this project, we’ll describe our suggested steps at a high level. We strongly encourage you to follow the remaining steps in the order given. In particular, write tests before you implement. This is called “test-driven development,” and helps ensure that you know what your methods are supposed to do before you do them. isEmpty and size . These two methods must take constant time. That is, the time it takes to for either method to finish execution should not depend on how many elements are in the deque. Write one or more tests for isEmpty and size. Run them and verify that they fail. Your test(s) should verify more than one interesting case, such as checking both an empty and a nonempty list, or checking that the size changes. For these tests, you can use the isTrue or isFalse methods on your assertThat statements. Your tests can range from very fine-grained, e.g. testIsEmpty, testSizeZero, testSizeOne to very coarse grained, e.g. testSizeAndIsEmpty. It’s up to you to explore and find what granularity you prefer. Task: Write tests for the isEmpty and size methods, and check that they fail. Then, implement the methods. get . Write a test for the get method. Make sure to test the cases where get receives an invalid argument, e.g. get(28723) when the Deque61B only has 1 item, or a negative index. In these cases get should return null. get must use iteration. Task: After you’ve written tests and verified that they fail, implement get. getRecursive . Since we’re working with a linked list, it is interesting to write a recursive get method, getRecursive. Copy and paste your tests for the get method so that they are the same except they call getRecursive. (While there is a way to avoid having copy and pasted tests, though the syntax is not worth introducing – passing around functions in Java is a bit messy.) . Task: After you’ve copy-pasted tests and verified that they fail, implement getRecursive. removeFirst and removeLast . Lastly, write some tests that test the behavior of removeFirst and removeLast, and again ensure that the tests fail. For these tests you’ll want to use toList! Use addFirstAndAddLastTest as a guide. Do not maintain references to items that are no longer in the deque. The amount of memory that your program uses at any given time must be proportional to the number of items. For example, if you add 10,000 items to the deque, and then remove 9,999 items, the resulting memory usage should amount to a deque with 1 item, and not 10,000. Remember that the Java garbage collector will “delete” things for us if and only if there are no pointers to that object. If Deque61B is empty, removing should return null. removeFirst and removeLast may not use looping or recursion. Like addFirst and addLast, these operations must take \"constant time.\" Refer to the section on writing addFirst and addLast for more information on what this means. Task: After you’ve written tests and verified that they fail, implement removeFirst and removeLast. Submit to the Autograder . Once you’ve written local tests and passed them, try submitting to the autograder. You may or may not pass everything. | If you fail any of the coverage tests, it means that there is a case that your local tests did not cover. Here is a list of test cases that you should cover. | If you fail any of the timing tests, it means that your implementation does not meet the timing constraints described above. | You will have a token limit of 4 tokens every 24 hours. We will not reinstate tokens for failing to add/commit/push your code, run style, etc. | Scoring . | . This project, similar to Project 0, is divided into individual components, each of which you must implement completely correctly to receive credit. | Empty list (15%): Define a valid Node class and correctly implement the constructor. | Adding (25%): Correctly implement addFirst, addLast, and toList. | isEmpty, size (5%): Correctly implement isEmpty and size with add methods working. | get (5%): Correctly implement get. | getRecursive (5%): Correctly implement getRecursive. | Removing (25%): Correctly implement removeFirst and removeLast. | Integration (10%): Pass an integration test suite that randomly calls all the methods. | Test Coverage (10%): Write tests to capture a sufficient number of flags. | . For the test coverage component, we will run your tests against a staff solution and check how many scenarios and edge cases are tested. You can receive partial credit for this component. You can find the list of scenarios here. Credits . | Ring buffer figures from Wikipedia. | This assignment adapted from Kevin Wayne’s Guitar Heroine assignment. | . ",
    "url": "/projects/proj1a/#linkedlistdeque61b",
    
    "relUrl": "/projects/proj1a/#linkedlistdeque61b"
  },"239": {
    "doc": "Project 1A: LinkedListDeque61B",
    "title": "Project 1A: LinkedListDeque61B",
    "content": " ",
    "url": "/projects/proj1a/",
    
    "relUrl": "/projects/proj1a/"
  },"240": {
    "doc": "Lab 04: Git",
    "title": "FAQ",
    "content": "The FAQ for Lab 04 is here. ",
    "url": "/labs/lab04/#faq",
    
    "relUrl": "/labs/lab04/#faq"
  },"241": {
    "doc": "Lab 04: Git",
    "title": "Introduction",
    "content": "Up until this point, we’ve been using Git and Github to submit assignments, but haven’t talked much beyond what is needed. In this lab assignment, we’ll revisit some previous git commands that we’ve shown as well as introduce new ones, so that you’ll gain more familiarity with Git (and Github). There will be exercises throughout this lab to help reinforce your understanding of Git. Please don’t skip around in this lab and do not run commands you find online if you get stuck (this could lead to potential issues in the lab). When going through this lab, read through the commands and instructions and make sure you understand them! . Please make sure to pull from the skeleton in your sp25-s*** repository to obtain the required files. In this lab, we will only have one file, magic_word.txt. ",
    "url": "/labs/lab04/#introduction",
    
    "relUrl": "/labs/lab04/#introduction"
  },"242": {
    "doc": "Lab 04: Git",
    "title": "Git vs Github",
    "content": "Before we explore the Git commands, let’s talk about the difference between Git and Github. Git . Git is a version control system that is free and open-source (this means that the source code is available for use by users and developers). As a version control system, we use Git to help manage different versions of code and track changes made in the source code. This makes it even more useful if there are multiple developers working on one program. Without a version control system, there wouldn’t be much communication between developers and changes to the source code will go unknown to other developers. For the most part, Git’s data model or representation is based on a linked list. We’ll talk more about this a little later, but whenever we want to save a snapshot of our repository, we commit it (like we’ve been doing up until this point when we want to submit an assignment). These commits are, in a way, chained together. Here’s a visualization of what that looks like below: . This linked list of commits forms a history of the changes you’ve made. The most recent commit/latest snapshot is the green circle above. Github . Github is an online hosting service for git repositories. Git repositories are central locations where any changes made to our files and directories are tracked and managed (this is your sp25-s*** repository). Repositories can be made locally on your computer as well as on Github. Github allows for easier collaboration with other developers, as you can more easily share code, and also allows us to save our code on a remote server. If you have some code stored locally, you can save it to Github. You’ll then have a copy of your code saved somewhere else in the event that your local code is somehow destroyed. This is why we say to commit often so you save your work and progress on assignments! . ",
    "url": "/labs/lab04/#git-vs-github",
    
    "relUrl": "/labs/lab04/#git-vs-github"
  },"243": {
    "doc": "Lab 04: Git",
    "title": "Git Commands",
    "content": "In this section, we describe some of the more common Git commands you might end up using. Please keep in mind that this is not comprehensive of all the Git commands that may be available. Let’s begin! . init . The following command can be run in a directory that you want to make into a Git repository: . git init . This initializes a git repository in that directory. add, commit . When we want to save the changes we’ve made in a git repository, we want to first select what changes should be saved: . git add some_file.txt . If you want to select all changes that have been made, you can run the following shortcut: . git add . The changes we’ve selected have not actually been saved yet. When we add certain files/changes, this means we’ve put them into a staging area, which stores information about what will go into our next commit. To actually save our changes, or take a snapshot of our current repository, we run git commit -m, like below: . git commit -m \"We put a commit message here to describe what changes we made.\" . When we commit any changes, it’s good practice to place a descriptive commit message - this makes it easier to keep track of what changes are made over time as well as make it easier for other developers to understand what you’ve changed. status . If you want to see what changes have been made, you can run git status in your repository. It might look a little bit different from below, but it will show what files have been modified. If they are under “changes not staged for commit”, it means they haven’t been added to the staging area. Once they are added, those files will show up under “Changes to be committed”. On branch main Your branch is up to date with 'origin/main'. Changes not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git restore &lt;file&gt;...\" to discard changes in working directory) modified: proj1a/src/LinkedListDeque61B.java modified: proj1b/src/ArrayDeque61B.java modified: proj1b/tests/ArrayDeque61BTest.java . In this example, git status shows that we’ve modified three files that have not been staged for commit. Once we git add them, git status will change: . On branch main Your branch is up to date with 'origin/main'. Changes to be committed: (use \"git restore --staged &lt;file&gt;...\" to unstage) modified: proj1a/src/LinkedListDeque61B.java modified: proj1b/src/ArrayDeque61B.java modified: proj1b/tests/ArrayDeque61BTest.java . In both cases, “Changes not staged for commit” and “Changes to be committed” are for files that are already tracked or have been saved before in a previous version of your repository. Git will also show untracked files, which have not been saved in a previous version of your repository. log . Running git log in a git repository will display all the history of our committed history. For example, you would get something similar to the below: . $ git log commit 8g955d88159fc8e4504d7220e33fad34f8f2c6bd Author: Diego Huezo &lt;huezodiego@Huezos-MacBook-Pro.local&gt; Date: Tue Feb 7 19:06:48 2016 -0800 Added common Git problems to lab04. What this means is that you’re able to view the entire history of all the commits you made. Remember the message you always add when you commit? It will show up in git log. In this example, the commit message would be “Added common Git problems to lab04.” That is to say, we ran git commit -m \"Added common Git problems to lab04.\" when we committed. To scroll up and down in git log, you can use the up and down arrow keyboard keys. To exit out of git log, press the keyboard key q. Another important thing is what is besides the “commit” heading. It looks like a long string of random characters and numbers, but it represents the commit id. The commit id is a unique id that Git assigned to identify the specific changes that were made in the commit. It is important for the next section. restore . What if we want to restore changes from a previous version of our program? We can use git restore! There are a couple ways to do this. If we want to restore files to the versions in the most recent commit, then we can run git restore without specifying a commit id: . git restore [path_to_file] . If we want to restore to a specific commit, we can identify that commit’s id and restore the files from that commit. git restore --source=[commitID] [path_to_file] . ",
    "url": "/labs/lab04/#git-commands",
    
    "relUrl": "/labs/lab04/#git-commands"
  },"244": {
    "doc": "Lab 04: Git",
    "title": "Git Exercise (Part 1.1)",
    "content": "Now you’re ready to start using git! Your next task is to work through a small git workflow by setting up a repository and making a couple commits. At the end, you will need to be checked off by filling out the form linked on Beacon. This is meant to be done on your local computer, but outside your sp25-s*** repository. Make sure you don’t initialize a repository in your sp25-s***! . If you need help with creating directories, creating files, changing directories, etc., refer back to How to Use the Terminal. | Create a directory called lab04-checkoff. You can put this directory anywhere on your computer (but not in your sp25-s*** repo). | Move into the lab04-checkoff directory, and initialize a git repository. | Create a file called 61b.txt in any way you’d like. In this text file, add the text “Created 61b.txt”. | Create another file called 61boba.txt in any way you’d like. In this text file, add the text “Created 61boba.txt”. | Begin tracking only 61b.txt, and create a new commit containing just this file, with the following commit message: Add 61b.txt. | Make a modification in 61b.txt by changing the text in the file to: “61b.txt changed to version 2”. | Make another commit, this time containing both 61b.txt and 61boba.txt. The commit message should be: Updated 61b.txt and added 61boba.txt. | Make one more modification to 61b.txt by changing the text in the file to: “61b.txt changed to final version”. Don’t commit this version. At this point, if you were to type in git status and git log, you’d see something similar to the following: . | Using git only, restore 61b.txt to the version in the most recent commit. | Using git only, restore 61b.txt to the version in the first commit. | . Be sure to save this repository and directory until you complete the form on Beacon. Do the steps above, and complete the first google form. There is a second google form to fill out before you get the magic word. ",
    "url": "/labs/lab04/#git-exercise-part-11",
    
    "relUrl": "/labs/lab04/#git-exercise-part-11"
  },"245": {
    "doc": "Lab 04: Git",
    "title": "Git Commands Continued",
    "content": "Let’s continue on! In this section, we go a little more in-depth about remote repositories and what branching is. remote add . Sometimes, we want to be able to pull changes from another repository, specifically one that is hosted on Github. To do so, we can add that repository as a “remote”. For example, in Lab01, we used the following command to add the skeleton repository in our personal repository: . git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp25.git . Let’s break this down. When we want to add a remote, we specify the name of the remote, as well as the remote URL. In this example, the name is skeleton and the url is https://github.com/Berkeley-CS61B/skeleton-sp25.git. We can then refer to the remote repository with its name when we want to pull or push from it. So, to add a remote, we can run the following command: . git remote add [remote-name] [remote-url] . You can run git remote -v in your repository to check what remotes have been added. switch . We haven’t talked a lot about another feature of Git, which is branches! You won’t use it much (or at all!) in this class (except this lab), but it is a useful thing to know. Most version control systems have some kind of branching system. When we say branching, it means that we “diverge” away from the “main” branch. Branches allow us to keep track of multiple versions of our work at the same time (think of it like alternate dimensions). A reason why we would want to create another branch is if we want to develop another feature of our program, but we still wanted to maintain the current version that we had. Let’s consider a visualization. In this image above, there are two branches, master and cool_branch. Notice that we’ve already made several commits. At some point, we ended up “branching” away from master (at the commit with the message “diverge commit”) and diverging away from that specific branch. Now, if we wanted to stop working on our current branch (cool_branch), we can switch back to our master branch. We do this by running the following command: . git switch [branch-name] . In this example, we would run git switch master. Notice that the HEAD tag is now pointing back to the latest commit on master. We won’t cover it here, but feel free to look up how you might create a branch. If you get an error that the .idea folder is untracked when you try to switch out of a branch, you can create another commit including the .idea folder using git add and git commit. You do not have to push these changes. restore Revisited . Now that we have an idea of what remotes and branches are, let’s revisit the restore command. In the earlier section, we talked about using restore to revert back to previous commits based on the most recent commit or based on a commit id, but we can also use the command to revert a change back based on a remote repository and a specified branch. This is what it would look like: . git restore --source=[remote-name]/[branch-name] [file_name] . It would revert the file back based on the contents of the latest commit on the branch of the remote repository. push . If we want to push any commits we made on our local computer to a remote repository, we can use git push: . git push [remote-name] [branch] . In this class, we use git push origin main to push any of our changes from the local repository to our remote repository. origin is the remote repo that represents our personal repository that’s hosted on Github and main is the branch that we work off of. Here’s a visualization of what this looks like with a couple of local commits we haven’t pushed yet. The local repository is on the left, and the remote one is on the right. After pushing, our commits are now saved in our remote repository: . pull . Conversely, if we want to pull any changes from our remote repository to our local one, we can run git pull: . git pull [remote-name] [branch] . We’ve done this before when pulling from the skeleton: git pull skeleton main. Here’s a visualization of what this looks like with a couple of remote commits we haven’t pulled from yet: . After pulling, our remote commits are now in our local repository: . ",
    "url": "/labs/lab04/#git-commands-continued",
    
    "relUrl": "/labs/lab04/#git-commands-continued"
  },"246": {
    "doc": "Lab 04: Git",
    "title": "Common Git Issues",
    "content": "In this section, we’ll cover some common issues you might see with Git. This is not comprehensive of all issues you may see. You can read more about git issues in our Using Git guide here and Git WTFs here. While this is meant to help diagnose a Git issue and go through the common ways to resolve them, always ask for help if you aren’t too sure! . Fatal: refusing to merge unrelated histories . This occurs when the history of your local respository and the remote repository are separate. This usually happens when someone has changed files in the skeleton code after you have pulled. To fix, run git pull &lt;remote-repo&gt; main --allow-unrelated-histories --no-rebase. This may force a merge conflict (more information below). Merge Conflict . Merge conflict messages can show up like below: . $ git pull origin main From github.com:Berkeley-CS61B/course-materials-sp16 * branch main -&gt; FETCH_HEAD Auto-merging proj/proj0/solution/canonical/Planet.java CONFLICT (content): Merge conflict in proj/proj0/solution/canonical/Planet.java Automatic merge failed; fix conflicts and then commit the result. Merge conflicts occur when different modifications have been made to the same file that impact the same lines of code, and thus, cannot coexist. Git will indicate which files have conflicts; to fix them, open the files in IntelliJ and resolve them manually. These conflicts will appear like below in the file: . public Planet(Planet p) { &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD this.xPos = p.xPos; this.yPos = p.yPos; ======= this.xxPos = p.xxPos; this.yyPos = p.yyPos; &gt;&gt;&gt;&gt;&gt;&gt;&gt; 27ddd0c71515e5cfc7f58a43bcf0e2144c127aed . Everything between &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD and ======= is from your local version. Everything between ======= and 27ddd0c71515e5cfc7f58a43bcf0e2144c127aed is from your remote repository. Between these two options, choose the modifications that you would like to keep. Once you have resolved all conflicts, add and commit your changes. Run git status to check the state of your repo. We’ve provided more reading on merge conflicts here and here. Your branch is ahead of ‘origin/main’ by X commits. This occurs when the local repo is no longer in sync with its remote counterpart. If you want to keep the local versions of your files, use git push. If you want to overwrite your local changes with the versions in the remote repo, use git reset --hard origin/main. ",
    "url": "/labs/lab04/#common-git-issues",
    
    "relUrl": "/labs/lab04/#common-git-issues"
  },"247": {
    "doc": "Lab 04: Git",
    "title": "Git Exercise (Part 1.2)",
    "content": "Just as you did in Part 1.1, navigate to Beacon and complete the second form. Once you finish both google forms (in Part 1.1 and 1.2) and receive full credit, you should be able to obtain a magic word. Place this magic word on the first line of magic_word.txt. ",
    "url": "/labs/lab04/#git-exercise-part-12",
    
    "relUrl": "/labs/lab04/#git-exercise-part-12"
  },"248": {
    "doc": "Lab 04: Git",
    "title": "Git Exercise (Part 2)",
    "content": "In this exercise, we’ll have you clone a git repository, and you’ll be using some of the commands you’ve learned to find the passwords that are hidden away in the repository. Copy and paste the following command to clone your repository, outside your sp25-s*** repository and outside your lab04-checkoff repository that you created in part 1.1. The exact location is up to you, as long as it’s not in another repository or in one of the repositories we mentioned in the previous sentence. Before running the command, double check that you are not in your personal repository or the lab04-checkoff repository. If you are, a message will show up preventing you from cloning the repository inside your sp25-s*** and lab04-checkoff repository. curl -sS https://sp25.datastructur.es/labs/lab04/lab04.sh | bash . Check that a repository called git-exercise-sp25 shows up. If it’s there, cd into it, open up git-exercise-sp25 in IntelliJ, and you’re ready to continue on with the exercise! . Part 2.1 . When you open up the repository, you’ll notice a password.txt file. This is where the password for the first task will be in. It doesn’t seem to be here, but it might be in a previous commit… See if you can find that commit and revert back to the commit with some of the commands we’ve learned (you may need to scroll using the arrow keys!). Find the password for Task 1. When you do, you can store the password on the second line of magic_word.txt file in your lab04 directory. You will also want to restore your file to the most recent commit before moving on. Part 2.2 . Once you’ve completed Task 1, let’s try to figure out where the second password it is. The repository you cloned has multiple branches, but the branch called erik might have something we want. Let’s try switching to the branch and seeing if the password is in there. Find the password for Task 2. You can verify that it is the password by checking the commit message of the commit that you are on. When you do, you can store the password on the third line of magic_word.txt file in your lab04 directory. When you find the password, switch back to the main branch. Part 2.3 . It doesn’t seem like the third password is in this repository, but in another one! The password is in this repository (note that this is not a command, but the ssh url): . git@github.com:Berkeley-CS61B/git-exercise-remote.git . We want to try pulling from it, so first, add this repository as a remote in our git-exercise-sp25 repository. You may give the remote a name of your choosing. Once it’s added, run the following command (without the brackets around the remote’s name): . git pull [remote-name] main --allow-unrelated-histories --no-rebase . The reason we add the flags --allow-unrelated-histories and --no-rebase is because our two repositories don’t have any related history, so we’re going to try to merge these two branches (our local one and the one we’re pulling from). Do not add the flags if you are not sure if it should be used. If you do use the flag without it being needed, you may end up putting yourself into an interactive rebase and destroying some of your work. In most, if not all cases of pulling from the skeleton in your personal repository, this flag should not be added, and running git pull skeleton main is enough. Once you’ve pulled, you’ll see Git trying to merge the branches. Go ahead and merge it and the final password should show up in your IntelliJ. You can store the password on the fourth line of magic_word.txt. ",
    "url": "/labs/lab04/#git-exercise-part-2",
    
    "relUrl": "/labs/lab04/#git-exercise-part-2"
  },"249": {
    "doc": "Lab 04: Git",
    "title": "Submission",
    "content": "At this point, you should have four passwords on each line, as specified in the previous exercises. Ensure that they are in the specific order mentioned and that there are no extra spaces at the end. Your magic word text file should look similar to below: . git_exercise_1_password git_exercise_2.1_password git_exercise_2.2_password git_exercise_2.3_password . The passwords should be placed at the top 4 lines of your magic_word.txt. When you are ready, please submit only magic_word.txt to Gradescope. You will not submit the lab04-checkoff or git-exercise-sp25 repositories. If you want to play around with the visualizer which we used to make some of the images in this lab, you can find it here. ",
    "url": "/labs/lab04/#submission",
    
    "relUrl": "/labs/lab04/#submission"
  },"250": {
    "doc": "Lab 04: Git",
    "title": "Lab 04: Git",
    "content": " ",
    "url": "/labs/lab04/",
    
    "relUrl": "/labs/lab04/"
  },"251": {
    "doc": "Project 0: 2048",
    "title": "Hard Mode Project",
    "content": "If you are a strong programmer, you might be interested in the hard mode version of this project. In the hard mode version, you’ll solve the same problem as the standard version of this project, but there will be no handholding and you’ll have to come up with the design yourself. There is no extra credit for completing the hard mode version instead of the standard version. ",
    "url": "/projects/proj0/#hard-mode-project",
    
    "relUrl": "/projects/proj0/#hard-mode-project"
  },"252": {
    "doc": "Project 0: 2048",
    "title": "FAQ",
    "content": "Each assignment will have an FAQ linked at the top. You can also access it by adding /faq to the end of the URL. The FAQ for Project 0 is located here. Note that this project has limited submission tokens. Please see Submission and Grading for more details. ",
    "url": "/projects/proj0/#faq",
    
    "relUrl": "/projects/proj0/#faq"
  },"253": {
    "doc": "Project 0: 2048",
    "title": "Overview",
    "content": "Prerequisites: . | Lab 1 (required for setup) | HW0A (recommended, for Java syntax) | HW0B (recommended, for Java syntax) | Lectures 1-2 | 61B Style Guide (we are checking your style in autograder!) | Lab 2 (optional but recommended prerequisite - helpful for debugging) | . In this mini-project, you’ll get some practice with Java by creating a playable game of 2048. We’ve already implemented the graphics and user interaction code for you, so your job is to implement the logic of the game. Note: This version of the project is much more straightforward than previous offerings of this project. If you find online resources (e.g. videos) from previous semesters of 61B, they do not apply to this version of the project. If you’re not familiar with 2048, you can try out a demo at this link. There’s a lot of starter code that uses Java syntax that you might not have seen before, but it’ll be OK! In the real world, you’ll often work with codebases that you don’t fully understand. Ideally, the system is designed in a modular way so that someone working on one part of the system doesn’t need to know the details of the rest of the system. In fact, for this project, we’ve set everything up so that you don’t need to open any of the files except for GameLogic.java, though you’re welcome to browse. Using Git . It is important that you commit work to your repository at frequent intervals. Version control is a powerful tool for saving yourself when you mess something up or your dog eats your project, but you must use it regularly if it is to be of any use. Feel free to commit every 15 minutes; Git only saves what has changed, even though it acts as if it takes a snapshot of your entire project. The command git status will tell you what files you have modified, removed, or possibly added since the last commit. It will also tell you how much you have not yet sent to your GitHub repository. The typical commands would look something like this: . git status # To see what needs to be added or committed. git add &lt;file or folder path&gt; # To add, or stage, any modified files. git commit -m \"Commit message\" # To commit changes. Use a descriptive message. git push origin main # Reflect your local changes on GitHub so Gradescope can see them. Then you can carry on working on the project until you’re ready to commit and push again, in which case you’ll repeat the above. It is in your best interest to get into the habit of committing frequently with informative commit messages so that in the case that you need to revert back to an old version of code, it is not only possible, but easy. We suggest you commit every time you add a significant portion of code or reach some milestone (passing a new test, for example). 2048 Rules: Basic Rules . 2048 is played on a grid of squares. Each square can either be empty or contain a numbered tile. The player chooses a direction (using the arrow keys) to tilt the board: north, south, east, or west. All tiles slide in that direction until there is no empty space left in the direction of motion. As a tile slides, it can possibly merge with another tile with the same number. You’ll implement this in Tasks 2-7. Each time two tiles merge to form a larger tile, the player earns the number of points on the new tile. We’ve implemented the score tracking already. One tile (with value 2 or 4) is randomly generated when the game begins. After each tilt, a single randomly generated tile will be added to the board on an empty square. Note that if the tilt did not change the board state, then no new tiles will be randomly generated. Your code will not be adding any new tiles! We’ve already done this part for you. The game ends when the current player has no available moves (no tilt can change the board), or a move forms a square containing 2048. If you would like to try the game out yourself, feel free to try it here. ",
    "url": "/projects/proj0/#overview",
    
    "relUrl": "/projects/proj0/#overview"
  },"254": {
    "doc": "Project 0: 2048",
    "title": "Setup",
    "content": "Getting the Skeleton Files . Follow the instructions in the Assignment Workflow Guide to get the skeleton code and open it in IntelliJ. For this project, we will be working in the proj0/ directory. If you get some sort of error, STOP and either figure it out by carefully reading the git WTFs or seek help at OH or Ed. You’ll save yourself a lot of trouble vs. guess-and-check with git commands. If you find yourself trying to use commands recommended by Google like force push, don’t. Don’t use git push -f, even if a post you found on Stack Overflow says to do it! . If you can’t get Git to work, watch this video as a last resort to submit your work. File Structure . The proj0 folder is separated into two packages, game2048logic and game2048rendering. Though we won’t talk about them too much in 61B, packages are a way to organize code into different folders. For example, all the code for the graphics is in the game2048rendering package, and all the code for the game logic is in the game2048logic package. You can see this in the file structure below: . proj0 ├── game2048logic | ├── GameLogic.java | ├── MatrixUtils.java ├── game2048rendering ├── Board.java ... (some other files) ... ├── Main.java ├── Side.java ├── Tile.java . For the entirety of this project, you will only need to read and modify the game2048logic/GameLogic.java file. Changes to other files will not be recognized by Gradescope. There’s no need to read any of the code in game2048rendering, though you’re welcome to if you’d like. Running the Game . You can run your game by running the Main.java file in the game2048rendering package. You can do this by right-clicking the file and selecting “Run ‘Main.main()’”: . If everything is set up properly, you should get something like the following image: . Right now, your game won’t do anything when you press the arrow keys, but by the end of this project, you’ll have a fully functioning 2048 implementation! . ",
    "url": "/projects/proj0/#setup",
    
    "relUrl": "/projects/proj0/#setup"
  },"255": {
    "doc": "Project 0: 2048",
    "title": "Task 1: Understanding Tilts",
    "content": "In this project, you’ll implement the logic that tilts the board. Rules: Tilting . The animation above shows a few tilt operations. Here are the full rules for when merges occur that are shown in the image above. | Two tiles of the same value merge into one tile containing double the initial number. | A tile that is the result of a merge will not merge again on that tilt. For example, if we have [X, 2, 2, 4], where X represents an empty space, and we move the tiles to the left, we should end up with [4, 4, X, X], not [8, X, X, X]. This is because the leftmost 4 was already part of a merge so it should not merge again. | When three adjacent tiles in the direction of motion have the same number, then the leading two tiles in the direction of motion merge, and the trailing tile does not. For example, if we have [X, 2, 2, 2] and move tiles left, we should end up with [4, 2, X, X] not [2, 4, X, X]. | . As a corollary of these rules, if there are four adjacent tiles with the same number in the direction of motion, they form two merged tiles. For example, if we have [4, 4, 4, 4], then if we move to the left, we end up with [8, 8, X, X]. This is because the leading two tiles will be merged as a result of rule 3, then the trailing two tiles will be merged, but because of rule 2 these merged tiles (8 in our example) will not merge themselves on that tilt. You’ll find applications of each of the 3 rules listed above in the animated GIF above, so watch through it a few times to get a good understanding of these rules. Tilting Rules Quiz . Your task: complete this optional Google Form quiz to check your understanding of the tilting rules. This quiz (and this task) is not part of your 61B course grade. Implementing Tilts . Implementing tilts is surprisingly challenging. We have to account for four different possible directions, three different merging rules, etc. Computer science is essentially about one thing: managing complexity. In order to implement this complicated functionality, we need to break the problem into smaller pieces and tackle them one at a time. In future assignments, it’ll be your job to figure out how to break problems into smaller pieces. For this project, here’s an outline of how we’ve decided to tackle the tilt problem: . | Four directions: Instead of worrying about tilting in all four directions at once, let’s start with just the up direction. Later, in the final task (task 6), we’ll show you a clever trick to generalize your code and deal with the other three directions with just a few extra lines of code. | Key observation: When you tilt the board up, each of the four columns can be processed independently. The tiles in one column have no effect on the tiles in a different column. Inspired by this observation, we’ll write a helper method for tilting one column. Then, to tilt the entire board up (task 5), we’ll call that helper method to tilt each of the columns, one by one. | Another key observation: When you tilt a column up, we need to compute the final landing squares for each tile in that column. We could do this all in a single method, but that’s going to get complicated quickly. Instead, let’s write another helper method for moving a single tile. Then, to tilt the entire column (Task 4), we’ll call that helper method to move each tile, one by one. | Merging rules: Before we even deal with merging, let’s try to implement tiles tilting up. Then, once the tiles are properly tilting up, we can add logic to implement merging (Task 3). | . ",
    "url": "/projects/proj0/#task-1-understanding-tilts",
    
    "relUrl": "/projects/proj0/#task-1-understanding-tilts"
  },"256": {
    "doc": "Project 0: 2048",
    "title": "Task 2: Move Tile Up (No Merging)",
    "content": "In GameLogic.java, fill in the moveTileUpAsFarAsPossible(int[][] board, int r, int c, int minR) method. Don’t modify any other files or functions in that file. This method should move the tile at position (r, c) as far up in its column as possible. For this task, you should ignore the minR parameter completely. Remember that a tile can move up through empty squares, until the tile either reaches the top row, or the tile reaches an empty square with another tile directly above it. For this task, don’t worry about merges yet. We’ll add logic for merging in the next task. Below are four before-and-after board pairs that illustrate how the moveTileUpAsFarAsPossible(int[][] board, int r, int c, int minR) function should behave. For each example, the first table is the board before the method call, and the second table is the board after the method call. The values of r and c are explicitly stated for clarity. Remember that, for this task, merging is ignored and minR should also be ignored. Example 1 . Method call: moveTileUpAsFarAsPossible(board, r=3, c=0, minR=0) . Before: . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 2 | 0 | 0 | 0 | . After: . | 2 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . The tile at (3, 0) moves straight up to the top row (0, 0). Example 2 . Method call: moveTileUpAsFarAsPossible(board, r=2, c=1, minR=0) . Before: . | 0 | 4 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 2 | 0 | 0 | . | 0 | 0 | 0 | 0 | . After: . | 0 | 4 | 0 | 0 | . | 0 | 2 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . The tile at (2, 1) moves up until it is just below the 4, i.e. it lands at (1, 1). Example 3 . Method call: moveTileUpAsFarAsPossible(board, r=0, c=2, minR=0) . Before: . | 0 | 0 | 4 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . After: . | 0 | 0 | 4 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . The tile at (0, 2) is already at the top row, so it does not move. Testing and Debugging . To test your method, run the tests in TestTask2.java by right-clicking the file and selecting “Run ‘TestTask2’”. (You can also run all the tests in the entire folder by right-clicking tester2048 &gt; “Run ‘Tests in ‘tester2048’’”.) . Alternatively, you may open the TestTask2.java file and click the green arrow next to public class TestTask2 to run the tests. An example animation from a previous semester is given below. The files are a bit different, but the process is the same: . You may also run individual tests in the same manner. You will run all tests in the same way for the rest of the project (and course!). Running the provided tests will test the three examples above. If your implementation is correct, all tests should pass. Here is what the error message would look like if you failed one of the tests: . On the left-hand side, you’ll see the list of all tests that were run. The red exclamation mark means the program errored, the yellow X means we failed a test (program ran but gave the wrong output), and the green check means we passed it. On the right, you’ll see some useful error messages. To look at a single test and its error message in isolation, click the test on the left-hand side. For example, let’s say we want to look at the two tiles, different values test. The right-hand side is now the isolated error message for this test. The top line has a useful message: Boards should match followed by a String representation of the expected (what should happen) and actual (what your code generated) boards. You’ll see that the 2 stayed in its position even though it was supposed to move up to the position below the 4, which is causing this test to fail. The javadoc comment at the top of the code for the test also has some useful information in case you’re failing a test. You can click on the text underlined in blue to see the contents of the test. One common error that you might encounter is an ArrayIndexOutOfBoundsException. Here is what an ArrayIndexOutOfBoundsException error message might look like: . ArrayIndexOutOfBoundsExceptions occur when we attempt to access a value at an illegal index. For example, the array arr = [4, 2, 2, 4] has legal indexes 0, 1, 2, and 3. Attempting to access arr[4] or arr[-1] would throw an ArrayIndexOutOfBoundsException. We can evaluate where an ArrayIndexOutOfBoundsException is happening in our code by examining the stack trace provided in the test output. Taking a closer look at the previous example: . The stack trace shows us which lines of code were executed leading up to the error, with the top line being the most recent. The line at game2048logic.GameLogic.moveTileUpAsFarAsPossible(GameLogic.java:30) tells us a few things about our error. First, we can see that our ArrayIndexOutOfBoundsException was triggered in the game2048logic.GameLogic class, within the moveTileUpAsFarAsPossible method. GameLogic.java:30 specifies that line 30 triggered the error. This was called by line 33 in the testOneTile method in the TestTask2 class, and so on. The stack trace is a useful starting place for debugging. You can click on the blue underlined section of the stack trace to jump directly to that line of code. ",
    "url": "/projects/proj0/#task-2-move-tile-up-no-merging",
    
    "relUrl": "/projects/proj0/#task-2-move-tile-up-no-merging"
  },"257": {
    "doc": "Project 0: 2048",
    "title": "Task 3: Merging Tiles",
    "content": "Modify the moveTileUpAsFarAsPossible method so that it accounts for the possibility of the tile merging. Remember that a tile can move up through empty squares. When the tile sees a non-empty square, if that square contains another tile of the same value, then the two tiles should merge. If there is a merge, moveTileUpAsFarAsPossible should return 1 + the row number where the merge occurred. If there is no merge, it should return 0. This might seem quite arbitrary. We’ll see why this is useful in task 4. As in task 2, you should ignore the minR argument. Method call: moveTileUpAsFarAsPossible(board, r=3, c=0, minR=0) . Before: . | 2 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 2 | 0 | 0 | 0 | . After: . | 4 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . Tiles of the same value (2 and 2) merge into 4 at the top of the column. The method should return 1 because a merge occurred in row 0. Method call: moveTileUpAsFarAsPossible(board, r=2, c=0, minR=0) . Before: . | 8 | 0 | 0 | 0 | . | 4 | 0 | 0 | 0 | . | 8 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . After: . | 8 | 0 | 0 | 0 | . | 4 | 0 | 0 | 0 | . | 8 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . The 8 at (2, 0) cannot merge with (0, 0) because there is a 4 in between. The method should return 0 because there was no merge. Method call: moveTileUpAsFarAsPossible(board, r=3, c=2, minR=0) . Before: . | 0 | 0 | 2 | 0 | . | 0 | 0 | 2 | 0 | . | 0 | 0 | 2 | 0 | . | 0 | 0 | 2 | 0 | . After: . | 0 | 0 | 2 | 0 | . | 0 | 0 | 2 | 0 | . | 0 | 0 | 4 | 0 | . | 0 | 0 | 0 | 0 | . The bottom tile (3, 2) merges with (2, 2), forming 4. It cannot merge again in this single move. The method should return 3 because the merge occurred in row 2. Method call: moveTileUpAsFarAsPossible(board, r=2, c=2, minR=0) . Before: . | 0 | 0 | 2 | 0 | . | 0 | 0 | 2 | 0 | . | 0 | 0 | 2 | 0 | . | 0 | 0 | 4 | 0 | . After: . | 0 | 0 | 2 | 0 | . | 0 | 0 | 4 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 4 | 0 | . The tile at (2, 2) merges with (1, 2) to form a 4. The tile in (3, 2) remains a 4 at the bottom until it might move later. The method should return 2 because the merge occurred in row 1. Testing and Debugging . To test your method, run the tests in TestTask3.java, which tests on the examples above. If your implementation is correct, all tests should pass. ",
    "url": "/projects/proj0/#task-3-merging-tiles",
    
    "relUrl": "/projects/proj0/#task-3-merging-tiles"
  },"258": {
    "doc": "Project 0: 2048",
    "title": "Task 4: Merging Tiles up to MinR",
    "content": "In GameLogic.java,modify your moveTileUpAsFarAsPossible(int[][] board, int r, int c, int minR) method so that the tile is not allowed to move any higher than the row given by minR. Note: It should not be clear why minR is going to be helpful later. You’ll see why it’s useful in task 5! . Example 1 . Method call: moveTileUpAsFarAsPossible(board, r=3, c=0, minR=0) . Before: . | 2 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 2 | 0 | 0 | 0 | . After: . | 4 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . Explanation: The bottom tile (3,0) moves up to (0,0) and merges with 2 to become 4. Since a merge occurred, the return value is 1. Example 2 . Method call: moveTileUpAsFarAsPossible(board, r=3, c=0, minR=1) . Before: . | 2 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 2 | 0 | 0 | 0 | . After: . | 2 | 0 | 0 | 0 | . | 2 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . Explanation: With minR = 1, the tile at (3,0) can move only up to (1,0) and does not merge with the tile at (0,0). Since no merge occurred, the method returns 0. Example 3 . Method call: moveTileUpAsFarAsPossible(board, r=3, c=0, minR=3) . Before: . | 2 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 2 | 0 | 0 | 0 | . After: . | 2 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 2 | 0 | 0 | 0 | . Explanation: With minR = 3, the tile at (3,0) is not allowed to move up at all, so the board remains unchanged, and no merge occurs. The method should return 0. Testing and Debugging . To test your method, run the tests in TestTask4.java. If your implementation is correct, all tests should pass. The test file contains more tests than shown above. If you fail these tests, you might want to look at the code for these tests to understand what’s going wrong. ",
    "url": "/projects/proj0/#task-4-merging-tiles-up-to-minr",
    
    "relUrl": "/projects/proj0/#task-4-merging-tiles-up-to-minr"
  },"259": {
    "doc": "Project 0: 2048",
    "title": "Task 5: Tilt Column",
    "content": "Now that we’ve fully implemented moveTileUpAsFarAsPossible, we can use it to implement tiltColumn in GameLogic.java. This function will tilt an entirely column upwards. This method should tilt the given column at coordinate x up, moving all of the tiles in that column into their rightful place, and merging any tiles in that column that need to be merged. Remember to use your moveTileUpAsFarAsPossible helper method to keep things simple! Consider: What tiles should you call this helper method on, and in what order? How should you use the return value of moveTileUpAsFarAsPossible to avoid double merges? . Note: The clever design of moveTileUpAsFarAsPossible will make the code for this task relatively short and simple. My implementation of tiltColumn is only 8 lines long including brackets and definition. You’ll find throughout the course that it is far easier to implement a system if you have a clean design, e.g. helper methods like moveTileUpAsFarAsPossible, which was designed to naturally avoid double merges. Example 1: No merge . Method call: tiltColumn(board, 0) . Before: . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 4 | 0 | 0 | 0 | . | 2 | 0 | 0 | 0 | . After: . | 4 | 0 | 0 | 0 | . | 2 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . Explanation: The tiles 4 and 2 simply move up in column 0 without merging. Example 2: One merge required . Method call: tiltColumn(board, 1) . Before: . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 4 | 0 | 0 | . | 4 | 4 | 4 | 4 | . After: . | 0 | 8 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . | 4 | 0 | 4 | 4 | . Explanation: Only column 1 is processed. The 4 at (2,1) and 4 at (3,1) merge into 8 at (0,1). The rest of row 3 remains unchanged for columns 2 and 3. Example 3: Same tiles separated, no merge through intervening tiles . Method call: tiltColumn(board, 3) . Before: . |   |   |   |   | . | 4 | 0 | 0 | 4 | . | 0 | 0 | 0 | 0 | . | 8 | 0 | 0 | 8 | . | 4 | 0 | 0 | 4 | . After: . |   |   |   |   | . | 4 | 0 | 0 | 4 | . | 0 | 0 | 0 | 8 | . | 8 | 0 | 0 | 4 | . | 4 | 0 | 0 | 0 | . Explanation: Only column 3 tilts upward. The tiles stack as far up as possible, but 4 at (0,3) doesn’t merge with 8 at (2,3). Similarly, the two 4s at (2,3) and (3,3) don’t merge because one is actually 8. Example 4: No merge with merged tiles . Method call: tiltColumn(board, 2) . Before: . |   |   |   |   | . | 0 | 0 | 2 | 0 | . | 0 | 0 | 2 | 0 | . | 0 | 0 | 4 | 0 | . | 0 | 0 | 0 | 0 | . After: . |   |   |   |   | . | 0 | 0 | 4 | 0 | . | 0 | 0 | 4 | 0 | . | 0 | 0 | 0 | 0 | . | 0 | 0 | 0 | 0 | . Explanation: Column 2 tilts upward. The 2 at (0,2) and 2 at (1,2) merge to become 4 at (0,2). However, the resulting 4 does not merge with the existing 4 at (2,2) in the same move, so they stack up at rows 0 and 1. Testing and Debugging . To test your method, run the tests in TestTask5.java. If your implementation is correct, all tests should pass. ",
    "url": "/projects/proj0/#task-5-tilt-column",
    
    "relUrl": "/projects/proj0/#task-5-tilt-column"
  },"260": {
    "doc": "Project 0: 2048",
    "title": "Task 6: Tilt Up",
    "content": "In GameLogic.java, fill in the tiltUp(int[][] board) method. This method should tilt the entire board up, moving all tiles in all columns into their rightful place, and merging any tiles that need to be merged. Testing and Debugging . To test your method, run the tests in TestTask6.java. If your implementation is correct, all tests should pass. Unlike the earlier tasks, we do not provide any examples in this spec. See the code for TestTask6.java for such examples. ",
    "url": "/projects/proj0/#task-6-tilt-up",
    
    "relUrl": "/projects/proj0/#task-6-tilt-up"
  },"261": {
    "doc": "Project 0: 2048",
    "title": "Task 7: Tilt in Four Directions",
    "content": "Now that we’ve written tiltUp working for the up direction, our game should work but only if the user presses up. We need to implement the other three directions. One possible approach is to create three more functions moveTileRightAsFarAsPossible, moveTileDownAsFarAsPossible, and moveTileLeftAsFarAsPossible, which we can use to ultimately implement tiltRight, tiltDown, and tiltLeft. This is a terrible idea. This leads to messy, hard-to-read code, with ample opportunity to introduce obscure bugs, e.g. what if you fix something in one copy, but not the other three copies? . Instead, we’ll take advantage of the provided rotateLeft and rotateRight methods, which rotate the board. Fill in the provided tilt method so that it handles all four directions properly. Testing and Debugging . To test your method, run the tests in TestTask7.java. If your implementation is correct, all tests should pass. Testing files such as TestIntegration.java test all the things you write in coordination with each other. Such a test is called an integration test and is incredibly important in testing. While unit tests run things in isolation, integration tests run things all together and are designed to catch obscure bugs that occur as a result of the interaction between different functions you’ve written. Do not attempt to debug TestIntegration.java until you’re passing the rest of the tests! . ",
    "url": "/projects/proj0/#task-7-tilt-in-four-directions",
    
    "relUrl": "/projects/proj0/#task-7-tilt-in-four-directions"
  },"262": {
    "doc": "Project 0: 2048",
    "title": "Playing the Game",
    "content": "Now that you’ve implemented the logic for the game, you can play the game by running Main.java! . Note: If you haven’t passed all of the tests, the game may behave strangely or crash. ",
    "url": "/projects/proj0/#playing-the-game",
    
    "relUrl": "/projects/proj0/#playing-the-game"
  },"263": {
    "doc": "Project 0: 2048",
    "title": "Style",
    "content": "Starting with this project, we will be enforcing style. You must follow the style guide, or you will be penalized on the autograder. You can and should check your style locally with the CS 61B plugin. We will not remove the velocity limit for failing to check style. ",
    "url": "/projects/proj0/#style",
    
    "relUrl": "/projects/proj0/#style"
  },"264": {
    "doc": "Project 0: 2048",
    "title": "Submission and Grading",
    "content": "We will not remove the velocity limit for failing to submit the correct files because you didn’t add, commit, or push. You have been warned. Velocity Limiting . For this project we will be limiting the number of times you can submit your code to the autograder. You will get 4 submission “tokens” that each regenerate after 24 hours. Grading Overview . Your code will be graded based on whether it passes the tests we provided. There are no hidden tests; the score you see on Gradescope is your score for this project. Gradescope will only grade your GameLogic.java file. If you edit any other files, your edits will not be recognized, so don’t edit any other files. Tests are “all or nothing” in their own fields. If you fail one of the subtests in the test category, you will not receive credit for that category although you might have passed different test cases. For example, you’ll see in Gradescope TestModel category 5 subtests. Here is a breakdown of the weight of each part: . | TestTask2: 15% | TestTask3: 20% | TestTask4: 20% | TestTask5: 8% | TestTask6: 4% | TestTask7: 8% | TestIntegration: 25% | . Once you’ve pushed your code to GitHub (i.e. you’ve run git push), then you may go to Gradescope, find the proj0 assignment, and submit the code there. Keep in mind that the version of code that Gradescope uses is the most recent commit you’ve pushed, so if you do not run git push before you submit on Gradescope, old code will be tested instead of the most recent code you have on your computer. There are no hidden tests. The score you see on Gradescope is your score for this project. ",
    "url": "/projects/proj0/#submission-and-grading",
    
    "relUrl": "/projects/proj0/#submission-and-grading"
  },"265": {
    "doc": "Project 0: 2048",
    "title": "Project 0: 2048",
    "content": "Deadline: Monday, February 3rd, 11:59 PM PT. ",
    "url": "/projects/proj0/",
    
    "relUrl": "/projects/proj0/"
  },"266": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "FAQ",
    "content": "Each assignment will have an FAQ linked at the top. You can also access it by adding “/faq” to the end of the URL. The FAQ for Project 2B is located here. ",
    "url": "/projects/proj2b/#faq",
    
    "relUrl": "/projects/proj2b/#faq"
  },"267": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Checkpoint &amp; Design Doc Due 3/21/2025",
    "content": " ",
    "url": "/projects/proj2b/#checkpoint--design-doc-due-3212025",
    
    "relUrl": "/projects/proj2b/#checkpoint--design-doc-due-3212025"
  },"268": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Coding Due 4/4/2025",
    "content": "In this project, you’ll complete your implementation of the NGordnet tool. As this is a quite new project, there may be occasional bugs or confusion with the spec. If you notice anything of this sort, please post on Ed. IMPORTANT NOTE: After you read the 2B spec, you may be tempted to start coding. Don’t do this! . Before implementing ANY code for 2B, complete the Project 2B: Checkpoint and Design Document before starting coding. Design Notes . When designing your project, think about all of the requirements in advance. Planning ahead will ensure you don’t need to rewrite all of your code when you get to certain points in the project. If you find yourself copy-pasting or repeating a lot of the same code you’ve already written, there is probably an opportunity to reuse it directly, or slightly modify it so you don’t have to repeat yourself as often. ",
    "url": "/projects/proj2b/#coding-due-442025",
    
    "relUrl": "/projects/proj2b/#coding-due-442025"
  },"269": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Project Setup",
    "content": "THE SETUP FOR THIS PROJECT IS DIFFERENT THAN THE OTHER LABS / PROJECTS. PLEASE DO NOT SKIP THIS STEP! . Skeleton Setup . | Similar to other assignments in this class, run git pull skeleton main to get the skeleton code for this project. | Download the data files for this project using this link and move them into your proj2b folder on the same level as src. | Copy your implementation from 2A for ngrams, including TimeSeries and NGramMap, into the proj2b.src.ngrams package. | . If you did not complete 2A, skip step 3 of the Skeleton Setup. We have provided a stripped-down solution for 2A in the skeleton files. It contains an implementation for NGramMap that supports the countHistory method, which should be sufficient for completing 2B. However, it does not contain an implementation for TimeSeries. Many parts of the skeleton files expect a TimeSeries class to be defined to compile, so you will have to either comment out these sections or add your own implementation of a TimeSeries. In past semesters, some inefficient implementations of NGramMap and TimeSeries passed the 2A autograder, but failed on 2B. We recommend restoring to the staff solution for 2A if you are experiencing autograder timeouts. If you replaced NGramMap with your own implementation but realized later that you would prefer to use the staff solution, you should git restore back to the original skeleton version (inspect your git log). You can read more about this in Lab 4. Alternatively, you can copy and paste from this part of the skeleton repo. Once you are done, your proj2b directory should look like this: . proj2b ├── data │ ├── ngrams │ └── wordnet ├── src │ ├── &lt;2B helper files&gt; │ ├── browser │ ├── demo │ ├── main │ ├── ngrams │ │ ├── &lt;Your NGramMap implementation from 2A&gt; │ │ └── &lt;Your TimeSeries implementation from 2A&gt; │ └── plotting ├── static └── tests . ",
    "url": "/projects/proj2b/#project-setup",
    
    "relUrl": "/projects/proj2b/#project-setup"
  },"270": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Getting Started",
    "content": "IMPORTANT NOTE: You should really complete Project 2B: Checkpoint first before starting coding, or even designing your project. We think this would be helpful for your understanding of the project. We will also require you to submit a design document to Gradescope. More details about the design document can be found in Deliverables and Scoring. Complete Project 2B: Checkpoint . After finishing the checkpoint, complete and submit your Design Document . This part of the project is designed for you to come up with efficient and correct design for your implementation. The design you come up with will be very important to handle these cases. Please read the 2B spec carefully before starting your design document. The course staff has created a couple of introductory videos to the project and the starter code available here. Bear in mind we have changed the structure of the project so some information might be outdated! . We’ve also created two wonderful tools that you can (and should!) use to explore the dataset, see how the staff solution behaves for specific inputs, and get expected outputs for your unit tests (see Testing Your Code). We’ll link them here, as well as in other relevant parts of the spec. | Wordnet Visualizer: Useful for visually understanding how synsets and hyponyms work and testing different words/lists of words for potential test case inputs. Click on the “?” bubbles to learn how to use the various features of this tool! | Staff Solution Webpage: Useful for generating expected outputs for different test case inputs. Use this to write your unit tests! | . ",
    "url": "/projects/proj2b/#getting-started",
    
    "relUrl": "/projects/proj2b/#getting-started"
  },"271": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Using the WordNet Dataset",
    "content": "Before we can incorporate WordNet into our project, we first need to understand the WordNet dataset. WordNet is a “semantic lexicon for the English language” that is used extensively by computational linguists and cognitive scientists; for example, it was a key component in IBM’s Watson. WordNet groups words into sets of synonyms called synsets and describes semantic relationships between them. One such relationship is the is-a relationship, which connects a hyponym (more specific synset) to a hypernym (more general synset). For example, “change” is a hypernym of “demotion”, since “demotion” is-a (type of) “change”. “change” is in turn a hyponym of “action”, since “change” is-a (type of) “action”. A visual depiction of some hyponym relationships in English is given below: . Each node in the graph above is a synset. Synsets consist of one or more words in English that all have the same meaning. For example, one synset is “jump, parachuting” , which represents the act of descending to the ground with a parachute. “jump, parachuting” is a hyponym of “descent”, since “jump, parachuting” is-a “descent”. Words in English may belong to multiple synsets. This is just another way of saying words may have multiple meanings. For example, the word “jump” also belongs to the synset “jump, leap” , which represents the more figurative notion of jumping (e.g. a jump in attendance) rather the literal meaning of jump from the other synset (e.g. a jump over a puddle). The hypernym of the synset “jump, leap” is “increase”, since “jump, leap” is-an “increase”. Of course, there are other ways to “increase” something: for example, we can increase something through “augmentation,” and thus it is no surprise that we have an arrow pointing downwards from “increase” to “augmentation” in the diagram above. Synsets may include not just words, but also what are known as collocations. You can think of these as single words that occur next to each other so often that they are considered a single word, e.g. nasal_decongestant . To avoid ambiguity, we will represent the constituent words of collocations as being separated with an underscore _ instead of the usual convention in English of separating them with spaces. For simplicity, we will refer to collocations as simply “words” throughout this document. A synset may be a hyponym of multiple synsets. For example, “actifed” is a hyponym of both “antihistamine” and “ nasal_decongestant”, since “actifed” is both of these things. If you’re curious, you can browse the Wordnet database by using the web interface , though this is not necessary for this project. ",
    "url": "/projects/proj2b/#using-the-wordnet-dataset",
    
    "relUrl": "/projects/proj2b/#using-the-wordnet-dataset"
  },"272": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Hyponyms (Basic Case)",
    "content": "Setting up a HyponymsHandler . | In your web browser, open the ngordnet.html file in the static folder. As a refresher, you can find how to do that here in bullet point 1. You’ll see that there is a new button: “Hyponyms”. Note that there is also a new input box called k. | Try clicking the Hyponyms button. You’ll see nothing happens (and if you open the developer tools feature of your web browser, you’ll see that your browser shows an error). | . In Project 2B, your primary task is to implement this button, which will require reading in a different type of dataset and synthesizing the results with the dataset from Project 2A. Unlike 2A, it will be entirely up to you to decide what classes you need to support this task. | Edit the file called HyponymsHandler to simply return the word “Hello!” when the user clicks the Hyponyms button in the browser. You’ll need to make the HyponymsHandler class extend the NgordnetQueryHandler class. See your other Handler classes for examples. Make sure when you register your handler that you use the string “hyponyms” as the first argument to the register method, and not “hyponym”. | Start by opening your ngordnet.main.Main.java file. | Once you’ve modified Main so that your new handler is registered to handle hyponyms requests, start up Main and try clicking the Hyponyms button in your web browser again. You should see text appear that says “Hello”. | . If you see some error like “Could not load file some_file_here.txt”, it probably means that your project is not set up correctly. Be sure that you have the same structure as stated in the Project Setup section. Hyponyms Handler (Basic Case) . Next, you’ll create a partial implementation of the Hyponyms button. For now, this button should: . | Assume that the “words” entered is only a single word. | Ignore startYear, endYear, and k. | Return a string representation of a list of the hyponyms of the single word, including the word itself. The list should be in alphabetical order, with no repeated words. | . For example, suppose the WordNet dataset looks like the diagram below (given to you as the input files synsets11.txt and hyponyms11.txt). Suppose that the user enters “descent” and clicks on the Hyponyms button. In this case, the output of your handler should be the string representation of a list containing “descent”, “jump” and “ parachuting”, i.e [descent, jump, parachuting]. Note that the words are in alphabetical order. As another example, suppose we’re using a bigger dataset such as the one below (given to you as the input files synsets16.txt and hyponyms16.txt): . Suppose the user enters “change” and clicks on the Hyponyms button. In this case, the hyponyms are all the words in the blue nodes in the diagram below: . That is the output is [alteration, change, demotion, increase, jump, leap, modification, saltation, transition, variation]. Note that even though “change” belongs to two different synsets, it only appears once. Note: Try not to overthink this. Specifically, observe that the output does not include: . | Synonyms of synonyms (e.g. does not include \"adjustment\") | Hyponyms of synonyms (e.g. does not include \"conversion\") | Hyponyms of other definitions of hyponyms (e.g. does not include \"flashback\", which is a hyponym of another definition of \"transition\") | . Implement HyponymsHandler.java and any helper classes. Note: Please read the tips below, since you shouldn’t be writing all of your code in this class. To complete this task, you’ll need to decide what classes you need to create to support the HyponymsHandler. DO NOT DO ALL THE WORK IN HYPONYMS HANDLER. Instead, you should have helper classes. For example, in 2A, to handle the \"History\" button, we created an NGramMap class. You’ll want to do something similar in 2B, with your own classes. You’ll also need to understand the input format of the WordNet dataset. This description is given in the section below. For this part, you may NOT import any existing graph library into your code. That is you can’t import, for example, the graph implementations from the optional Princeton algorithms textbook. Instead, you should build your own graph class or classes. Tips . | Just like 2A’s NGramMap, you’ll want your helper classes to only parse the input files once, in the constructor. DO NOT CREATE METHODS WHICH HAVE TO READ THE ENTIRE INPUT FILE EVERY TIME THEY ARE CALLED. This will be too slow! | We strongly recommend creating at least two classes for this part of the project as follows: One which implements the idea of a directed graph. One which reads in the WordNet dataset and constructs an instance of the directed graph class. This second class should also be able to take a word and return its hyponyms. You may also want additional helper classes that represent the idea of a traversal but this is not required - you can implement your traversal within your graph class as well. | Don’t worry about writing Truth tests yet, we’ll talk about how to do that later in the spec. Simply use the web front end to check the two input examples (“descent” and “change”) from the diagrams above for synsets16.txt and hyponyms16.txt. | While you can (and should) write unit tests for the helper classes/methods that you create for this project, another good way to test and see what’s going on with your code is to simply run Main.java, open ngordnet.html, enter some inputs into the boxes, and click the “Hyponyms” button. You may find visual debugging can lead to some useful discoveries in this project. | . WordNet File Format . We now describe the two types of data files that store the WordNet dataset. These files are in comma separated format, meaning that each line contains a sequence of fields, separated by commas. | File Type #1: List of noun synsets. The file synsets.txt (and other smaller files with synset in the name) lists all the synsets in WordNet. The first field is the synset id (an integer), the second field is the synonym set (or synset), and the third field is its dictionary definition. For example, the line . 6829,Goofy,a cartoon character created by Walt Disney . means that the synset { Goofy } has an id number of 6829, and its definition is “a cartoon character created by Walt Disney”. The individual nouns that comprise a synset are separated by spaces (and a synset element is not permitted to contain a space). The S synset ids are numbered 0 through S − 1; the id numbers will appear consecutively in the synset file. The id numbers are useful because they also appear in the hyponym files, described as file type #2. | File Type #2: List of hyponyms. The file hyponyms.txt (and other smaller files with hyponym in the name) contains the hyponym relationships: The first field is a synset id; subsequent fields are the id numbers of the synset’s direct hyponyms. For example, the following line . 79537,38611,9007 . means that the synset 79537 (“viceroy vicereine”) has two hyponyms: 38611 (“exarch”) and 9007 (“Khedive”), representing that exarchs and Khedives are both types of viceroys (or vicereine). The synsets are obtained from the corresponding lines in the file synsets.txt: . 79537,viceroy vicereine,governor of a country or province who rules... 38611,exarch,a viceroy who governed a large province in the Roman Empire 9007,Khedive,one of the Turkish viceroys who ruled Egypt between... There may be more than one line that starts with the same synset ID. For example, in hyponyms16.txt, we have . 11,12 11,13 . This indicates that both synsets 12 and 13 are direct hyponyms of synset 11. These two could also have been combined on to one line, i.e. the line below would have the exact same meaning, namely that synsets 12 and 13 are direct hyponyms of synset 11. 11,12,13 . You might ask why there are two ways of specifying the same thing. Real world data is often messy, and we have to deal with it. | . Suggested Steps to Take . To get the “Hyponyms” button working you’ll need to: . | Develop a graph class. If you aren’t familiar with this data structure, take a look at lectures 22 and 23. You should test this with operations that are independent of the given data files. For example, our tests evaluated that our createNode and addEdge functions yielded appropriate graphs by using our graph classes’s getNodes and neighbors functions. For inspiration, you can check out Lecture 22 and 23. | Write code that converts the WordNet dataset files into a graph. This could be part of your graph class, or it could be a class that uses your graph class. | Write code that takes a word, and uses a graph traversal to find all hyponyms of that word in the given graph. | . We strongly recommended writing tests that evaluate queries on the examples above (for example, you might look at the hyponyms of “descent” in synsets11/hypernyms11, or the hyponyms of “change” in synsets16/hypernyms16). Tests should be written at a level of abstraction appropriate to what they’re evaluating. For example, we have a class called TestGraph that evaluates various aspects of our Graph class. Or as another example, our code has a class called TestWordNet containing the function below. @Test public void testHyponymsSimple(){ WordNet wn=new WordNet(\"./data/wordnet/synsets11.txt\",\"./data/wordnet/hyponyms11.txt\"); assertThat(wn.hyponyms(\"antihistamine\")).isEqualTo(Set.of(\"antihistamine\",\"actifed\")); } . Note that your WordNet class may not have the same functions as ours so the test shown will probably not work verbatim with your code. Note that our test does NOT use an NGramMap anywhere, nor is it using a HyponymsHandler, nor is it directly invoking an object of type Graph. It is specifically tailored to testing the WordNet class. Relying on only browser tests will be incredibly frustrating (and slow!). Use your JUnit skills to build confidence in the foundational abstractions that you build (e.g. Graph, WordNet, etc.). Design Tips . This project involves having to do all sorts of different lookups, graph operations, and data processing operations. There is no one right way to do this. Some example lookups that you might need to perform: . | Given a word (e.g. “change”), what nodes contain that word? . | Example in synsets16.txt: change is in synsets 2 and 8 | . | Given an integer, what node goes with that index? . | Necessary for processing hyponyms.txt. For example in hyponyms16.txt, we know that the node with synset 8 points at synsets 9 and 10, so we need to be able to find node 8 to get its neighbors. | . | Given a node, what words are in that node? . | Example in synsets16.txt: synset 11 contains alteration, modification, and adjustment | . | . Some example graph operations you might need to perform: . | Creating a node, e.g. each line of synsets16.txt contains the information for a node. | Adding an edge to a node, e.g. each line of hyponyms16.txt contains one or more edges that should be added to the corresponding node. | Finding reachable vertices, e.g. the vertices reachable from vertex #7 in hyponyms16.txt are 7, 8, 9, 10. | . Your life will be a lot easier if you select instance variables and/or data structures for your classes that naturally help solve all six of the problems above. Some example data processing operations: . | Given a collection of things, how do you find all non-duplicate items? (Hint: There is a data structure that makes this very easy and efficient). Don’t be afraid to also Google documentation for the data structure that you choose (e.g. if you choose to use a TreeMap for whatever reason, feel free to look up “TreeMap methods java”, “Map methods java”, or “Collection methods java”, etc). | Given a collection of things, how do you sort them? (Hint: Google how to sort the collection that you’re using) | . Also, a reminder from proj2a: Deeply nested generics are a warning sign that you are doing something too complicated. Either find a simpler way or create a helper class to help manage the complexity. For example, if you find yourself trying to use something like Map&lt;Set&lt;Set&lt;…, you have started a walk down an unnecessarily difficult path. As usual, if you have a design that is painful and with which you cannot make progress, don’t be afraid to delete your existing instance variables and try again. The hard part of this project is the design, not the programming. You can always use git to recover your old design if you decide you actually liked it. ",
    "url": "/projects/proj2b/#hyponyms-basic-case",
    
    "relUrl": "/projects/proj2b/#hyponyms-basic-case"
  },"273": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Handling Lists of Words",
    "content": "Your next task is to handle lists of words. As an example, if the user enters “change, occurrence” for the diagram below, we should only return common hyponyms of each word, i.e. [alteration, change, increase, jump, leap, modification, saltation, transition]. “Demotion” and “variation” are not included because they are not hyponyms of both words; specifically, they are not hyponyms of “occurrence”. As you can see, we only want to return words which are hyponyms of ALL words in the list. Furthermore, note that the list of words provided by the user can include more than just 2 words, even though our examples in this spec do not. Note that it is possible for two words to share hyponyms without necessarily sharing nodes. Take a look at this example. If the user enters “car, bug” for the diagram below, we should get [beetle], not [] (empty list)! This example shows that we are getting the intersection of words, not nodes. For some more examples which demonstrate the usefulness of this feature, let’s say we are using the full synsets.txt and hyponyms.txt. | Entering “video, recording” in the words box and clicking “Hyponyms” should display [video, video_recording, videocassette, videotape], as these are all the words which are hyponyms of “video” and “recording”. | Entering “pastry, tart” in the words box and then clicking “Hyponyms” should display [apple_tart, lobster_tart, quiche, quiche_Lorraine, tart, tartlet ]. | . Modify your HyponymsHandler and the rest of your implementation to deal with the List of Words case. To test this part of your code, we recommend manually constructing examples using synsets16.txt and hyponyms16.txt and using the provided front end to evaluate correctness. ",
    "url": "/projects/proj2b/#handling-lists-of-words",
    
    "relUrl": "/projects/proj2b/#handling-lists-of-words"
  },"274": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Handling k != 0",
    "content": "Above, we handled the situation where k == 0, which is the default value when the user does not enter a k value. Your required task is to handle the case where the user enters k. k represents the maximum number of hyponyms that we want in our output. For example, if someone enters the word “dog”, and then enters k = 5, your code would return at most 5 words. To choose the 5 hyponyms, you should return the k words which occurred the most times in the time range requested. For example, if someone entered words = [\"food\", \"cake\"], startYear = 1950, endYear = 1990, and k = 5, then you would find the 5 most popular words in that time period that are hyponyms of both food and cake. Here, the popularity is defined as the total number of times the word appears over the entire time period requested. The words should then be returned in alphabetical order. In this case, the answer is [cake, cookie, kiss, snap, wafer] if we’re using top_14377_words.csv, total_counts.csv, synsets.txt, and hyponyms.txt. (The autograder and staff solution doesn’t use these files, which is why they return empty lists for this query.) . Be sure you are getting the words that appear with the highest counts, not the highest weights. Otherwise, you will run into issues that are very difficult to debug! . Note that if the frontend doesn’t supply a year, default values of startYear = 1900 and endYear = 2020 are provided by NGordnetQueryHandler.readQueryMap. It might be hard to figure out the hyponyms of words with k != 0 on the big files, so we are providing data that is easier to visualize! Below, you’ll see a modified version of EECS class requirements, inspired by HKN. We have also provided the data that represents the graph below (frequency-EECS.csv, hyponyms-EECS.txt, synsets-EECS.txt). If someone entered words = [\"CS61A\"], startYear = 2010, endYear = 2020, and k = 4, you should receive \"[CS170, CS61A, CS61B, CS61C]\". This frequency-EECS.csv is a bit different from the previous one since it has values with the same frequencies. We highly recommend that you take a look at frequency-EECS.csv. While you are designing your implementation, in mind that we can give you words with the same frequencies. If a word never occurs in the time frame specified, i.e. the count is zero, it should not be returned. In other words, if k &gt; 0, we should not show any words that do not appear in the ngrams dataset. If there are no words that have non-zero counts, you should return an empty list, i.e. []. If there are fewer than k words with non-zero counts, return only those words. For example if you enter the word \"potato\" and enter k = 15, but only 7 hyponyms of \"potato\" have non-zero counts, you’d return only 7 words. This task will be a little trickier since you’ll need to figure out how to pass information around so that the HyponymsHandler knows how to access a useful NGramMap. Modify your HyponymsHandler and the rest of your implementation to deal with the k != 0 case. The EECS-course guide is not available on the interactive web staff solution so it won’t return anything if you give the input CS61A. However, the autograder will provide the query information and expected response for any failing test using the EECS dataset. We recommend using this information to replicate the autograder tests locally and debug from there. DO NOT MAKE A STATIC NGRAMMAP FOR THIS TASK! It might be tempting to simply make some sort of public static NGramMap that can be accessed from anywhere in your code. This is called a \"global variable\". We strongly discourage this way of thinking about programming, and instead suggest that you should be passing an NGramMap to either constructors or methods. We’ll come back to talking about this during the software engineering lectures. Tips . | Until you use the autograder, you’ll need to construct your own test cases. We provided one in the previous section: words = [\"food\", \"cake\"] , startYear = 1950, endYear = 1990, k = 5. | When constructing your own test cases, consider making your own input files. Using the large input files we provide is extremely tedious. | . ",
    "url": "/projects/proj2b/#handling-k--0",
    
    "relUrl": "/projects/proj2b/#handling-k--0"
  },"275": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Deliverables and Scoring",
    "content": "For Project 2B, the only required deliverable is the HyponymsHandler.java file, in addition to any helper classes. However, we will not be directly grading these classes, since they can vary from student to student. | Project 2B Checkpoint: 2.5 points - Due March 21st | Project 2B Design Document: 2.5 points - Due March 21st | Project 2B Coding: 80 points - Due April 4th . | HyponymsHandler k = 0, single word, single query per test | HyponymsHandler k = 0, single word, multiple queries per test | HyponymsHandler k = 0, multiple words, single query per test | HyponymsHandler k = 0, multiple words, multiple queries per test | HyponymsHandler k != 0, single word, single query per test | HyponymsHandler k != 0, single word, multiple queries per test | HyponymsHandler k != 0, multiple words, single query per test | HyponymsHandler k != 0, multiple words, multiple queries per test | HyponymsHandler Invalid Inputs | . | . As noted above, you will have to turn in your design document. This will be worth 2.5 points and it is due March 21st. The design document’s main purpose is to serve as a foundation for your project. It is important to think and ideate before coding. What we are looking for in the design document: . | Identify the data structures we have learned in the class that you will be using in your implementation. | Pseudocode / general overiview of your algorigthm for your implementation. | . Your design document should be around 1 - 2 pages long. Design document will be mainly graded on effort, thought, and completion. Please make a copy of this template and submit to Gradescope. Don’t worry if you decide to change your design document after. You are free to do so! We want you to think about the implementation before coding therefore we require you to submit your design as the part of the project. The token limiting policy for this project will be as follows: You will start with 8 tokens, each of which has a 24-hour refresh time. ",
    "url": "/projects/proj2b/#deliverables-and-scoring",
    
    "relUrl": "/projects/proj2b/#deliverables-and-scoring"
  },"276": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Testing Your Code",
    "content": "We’ve provided you with two short unit test files for this project in the proj2b/tests directory: . | TestOneWordK0Hyponyms.java | TestMultiWordK0Hyponyms.java | . The two provided test files correspond to the first two cases that you solved in this project, that is: . | Finding hyponyms of a single word where k = 0. | Finding hyponyms of multiple words where k = 0 (e.g. gallery, bowl). | . You will need to complete AutograderBuddy.java to test your code. See the Submitting Your Code section for more details. These test files are not comprehensive; in fact, they each only contain one sanity check test. You should fill each file with more unit tests, and also use them as a template to create two new test files for the respective cases. If you need help figuring out what the expected outputs of your tests should be, you should use the two tools that we linked in the Getting Started section. ",
    "url": "/projects/proj2b/#testing-your-code",
    
    "relUrl": "/projects/proj2b/#testing-your-code"
  },"277": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Debugging Tips",
    "content": ". | Use the small files while testing! This decreases the startup time to run Main.java and makes it easier to reason about the code. If you’re running Main.java, these files are set in the first few lines of the main method. For unit tests, the file names are passed into the getHyponymsHandler method. | You can run Main.java with the debugger to debug different inputs quickly. After clicking the “Hyponyms” button, your code will execute with the debugger - breakpoints will be triggered, you can use the variables window, etc. | There are a lot of moving parts to this project. Don’t start by debugging line-by-line. Instead, narrow down which function/region of your code is not working correctly then search more closely in those lines. | Check the FAQ for common issues and questions. | . ",
    "url": "/projects/proj2b/#debugging-tips",
    
    "relUrl": "/projects/proj2b/#debugging-tips"
  },"278": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Submitting Your Code",
    "content": "Throughout this assignment, we’ve had you use your front end to test your code. Our grader is not sophisticated enough to pretend to be a web browser and call your code. Instead, we’ll need you to provide a method in the proj2b.src.main.AutograderBuddy class that provides a handler that can deal with hyponyms requests. When you ran git pull skeleton main at the start of this spec, you should have received a file called AutograderBuddy.java. Open AutograderBuddy.java and fill in the getHyponymsHandler method such that it returns a HyponymsHandler that uses the four given files. Your code here should be quite similar to your code in Main.java. Now that you’ve created proj2b.src.main.AutograderBuddy, you can submit to the autograder. If you fail any tests, you should be able to replicate them locally as JUnit tests by building on the test files above. If any additional datafiles are needed, they will be added to this section as links. ",
    "url": "/projects/proj2b/#submitting-your-code",
    
    "relUrl": "/projects/proj2b/#submitting-your-code"
  },"279": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Acknowledgements",
    "content": "The WordNet part of this assignment is loosely adapted from Alina Ene and Kevin Wayne’s Wordnet assignment at Princeton University. ",
    "url": "/projects/proj2b/#acknowledgements",
    
    "relUrl": "/projects/proj2b/#acknowledgements"
  },"280": {
    "doc": "Project 2B: Ngordnet (Wordnet)",
    "title": "Project 2B: Ngordnet (Wordnet)",
    "content": " ",
    "url": "/projects/proj2b/",
    
    "relUrl": "/projects/proj2b/"
  },"281": {
    "doc": "Home",
    "title": "Mock CS 61B (T550 Version)",
    "content": " ",
    "url": "/#mock-cs-61b-t550-version",
    
    "relUrl": "/#mock-cs-61b-t550-version"
  },"282": {
    "doc": "Home",
    "title": "Weekly Schedule",
    "content": "Skip to current week . | Wk. | Date | Lecture(Playlist, Code) | Readings | Discussion | Lab | Homework | Skill-Building Projects | &quot;Build Your Own&quot; Project | . | 1Survey | WedJan 22 | 1. Intro, Instance VariablesVideo / Recording | Ch 1 | No Discussion | Lab 1: Setup, Git (due 1/24)Slides | Homework 0A (due 1/24) | | . | FriJan 24 | 2. Defining and Using Classes. Lists, Sets and MapsVideo / Recording | Ch 2 | Mini-Project 0: 2048 (due 2/3) | . | 2Survey | MonJan 27 | 3. References, Recursion, IntListsVideo / Recording | Ch 3 | 1. Introduction to JavaRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | Lab 2: Debugging (due 1/31)Slides | Homework 0B (due 1/29) | . | WedJan 29 | 4. SLLists, Nested Classes, Sentinel NodesVideo / Recording | Ch 4 | Homework 1 (due 02/7) | . | FriJan 31 | 5. DLLists, ArraysVideo / Recording | Ch 5, Ch 6 | . | 3Survey | MonFeb 03 | 6. TestingVideo / Recording Bonus Video . | Ch 7, TDD is dead, Unit Tests Are Waste, Response | 2. Scope, Static, Linked Lists, ArraysRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | Lab 3: Debugging (Part 2) (due 2/07)Slides | . | WedFeb 05 | 7. ArrayLists, ResizingVideo / Recording Bonus Video . | Ch 8 | Project 1A: LinkedListDeque (due 2/10) | . | FriFeb 07 | 8. Interface and Implementation InheritanceRecording | Ch 9, | . | 4Survey | MonFeb 10 | 9. Subtype Polymorphism, Comparators, Comparables, Generic FunctionsRecording | Ch 10 | 3. Interface Inheritance, Comparables/Comparators, Generic FunctionsRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | Lab 4: Git (due 2/14)Slides | | . | WedFeb 12 | 10. Iterators, Object MethodsVideo / Recording | Ch 12 | Project 1B: ArrayDeque, Deque (due 2/19) | . | FriFeb 14 | 11. Asymptotics IVideo / Recording | | . | 5Survey | MonFeb 17 | No Lecture (President’s Day) . | | 4. Iterators, Iterables, AsymptoticsRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | No Lab . | . | WedFeb 19 | 12. Ask Anything (midterm prep) | | . | WedFeb 19 | Midterm 1 (8pm - 10pm) . | | | . | FriFeb 21 | 13. Asymptotics IIRecording | Ch 13 | . | 6Survey | MonFeb 24 | 14. Asymptotics IIIVideo / Recording | Ch 15 | 5. Asymptotics IIRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | Lab 5: Project 1 Review (due 02/28) | . | WedFeb 26 | 15. Disjoint SetsVideo / Recording | Ch 14 | Homework 2 (due 03/07) | . | FriFeb 28 | 16. Extends, Sets, Maps, and BSTsVideo / Recording | Ch 16 | Project 2A: NGrams (due 3/12) | . | 7Survey | MonMar 03 | 17. B-Trees (2-3, 2-3-4 Trees)Video / Recording | Ch 17 | 6. Disjoint Sets, ADTs, BSTsRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | Lab 6: BSTMap (due 03/07)Slides | . | WedMar 05 | 18. Red Black TreesVideo / Recording | Ch 18 | . | FriMar 07 | 19. Hashing IVideo / Recording | Ch 19 | . | 8Survey | MonMar 10 | 20. Hashing IIVideo / Recording | Ch 20 | 7. B-Trees, LLRBs, HashingRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | Lab 7: HashMaps (due 3/14)Slides | Homework 3 (due 04/04) | . | WedMar 12 | 21. Heaps and Priority QueuesVideo / Recording | Ch 21 | . | FriMar 14 | 22. Tree and Graph TraversalsVideo / Recording | Ch 22 | Project 2B: Checkpoint (due 3/21) | . | 9Survey | MonMar 17 | 23. Graph Traversals and ImplementationsVideo / Recording | Ch 23 | 8. Graphs, HeapsRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | Lab 8: LLRBs (due 3/21)Slides | . | WedMar 19 | 24. Shortest PathsVideo / Recording | Ch 24 | . | FriMar 21 | 25. Minimum Spanning TreesVideo / Recording | Ch 25 | . | 10Survey | MonMar 24 | Spring Break . | | No Discussion | No Lab . | Project 2B: Wordnet (due 4/4) | . | WedMar 26 | . | FriMar 28 | . | 11 | MonMar 31 | 26. Directed Acyclic GraphsVideo / Recording | Ch 28 | 9. Shortest Paths, MSTsRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | Lab 9: Introduction to Project 3 (Optional) | . | TueApr 01 | 27. Tries and Midterm 2 ReviewVideo / Recording | Ch 26 | . | WedApr 02 | Midterm 2 (8pm - 10pm) . | | . | FriApr 04 | 28. Basic SortsVideo / Recording | Ch 29 | . | 12Survey | MonApr 07 | 29. Software Engineering I - Project 3Recording | | 10. Graphs II, TriesRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | Lab 10: Tetris (Optional) | | Project 3A: World Generation (due 4/18) | . | WedApr 09 | 30. Merge Sort, Insertion Sort, and Quick SortVideo / Recording | Ch 30 | . | FriApr 11 | 31. Software Engineering II [Optional]Recording | | . | 13Survey | MonApr 14 | 32. Software Engineering III - Project 3Video | Ch 32 | 11. SortingRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | Project 3 Workday . | Homework 4 (due 05/04) | . | WedApr 16 | 33. More Quicksort, Quick Select, StabilityVideo / Recording | Ch 32 | . | FriApr 18 | 34. Sorting and Algorithmic BoundsVideo / Recording | Ch 34 | . | 14Survey | MonApr 21 | 35. Software Engineering IV [Optional]Recording | | 12. Sorting IIRegular / Solutions&nbsp;/ Video&nbsp;/ Slides Exam Prep / Solutions&nbsp;/ Video&nbsp;/ Slides | Project 3 Workday . | Project 3B: Interactivity (due 4/29) | . | WedApr 23 | 36. Radix SortsVideo / Recording | Ch 35 | . | FriApr 25 | 37. Sorting Conclusion, Algorithm Design PracticeVideo / Recording | Ch 36 | . | 15Survey | MonApr 28 | 38. Compression [Optional]Recording | Ch 38 | 13. Goodbye, Fun | Project 3 Demos . | | . | WedApr 30 | 39. P vs NP [Optional]Recording | Ch 39 | . | FriMay 02 | 40. Summary, Fun [Optional]Recording | | . | 16 | MonMay 05 | No Lecture (RRR Week) . | | No Discussion | No Lab . | . | WedMay 07 | | . | FriMay 09 | . | 17 | MonMay 12 | Final Exam (Tue, May 13, 8–11am) . | | | | . ",
    "url": "/#weekly-schedule",
    
    "relUrl": "/#weekly-schedule"
  },"283": {
    "doc": "Home",
    "title": "Home",
    "content": ". ",
    "url": "/",
    
    "relUrl": "/"
  },"284": {
    "doc": "Project 1B: ArrayDeque61B",
    "title": "Due: Wednesday, February 19th, 11:59 PM PT",
    "content": " ",
    "url": "/projects/proj1b/#due-wednesday-february-19th-1159-pm-pt",
    
    "relUrl": "/projects/proj1b/#due-wednesday-february-19th-1159-pm-pt"
  },"285": {
    "doc": "Project 1B: ArrayDeque61B",
    "title": "FAQ",
    "content": "Each assignment will have an FAQ linked at the top. You can also access it by adding “/faq” to the end of the URL. The FAQ for Project 1B is located here. Note that this project has limited submission tokens. Please see Submit to the Autograder for more details. ",
    "url": "/projects/proj1b/#faq",
    
    "relUrl": "/projects/proj1b/#faq"
  },"286": {
    "doc": "Project 1B: ArrayDeque61B",
    "title": "Introduction",
    "content": "In Project 1A, we built LinkedListDeque61B. Now we’ll see a different implementation of the Deque61B interface that uses a backing array, rather than linked nodes. By the end of Project 1B, you will… . | Gain an understanding of the implementation of a backing array in data structures. | Have more experience using testing and test-driven development to verify the correctness of these data structures. | . Check out the Project 1B slides for some additional visually oriented tips. Check out the Getting Started Video for an overview of this project. We will provide relatively little scaffolding. In other words, we’ll say what you should do, but not how. This section assumes you have watched and fully digested the lectures up till the ArrayList lecture, Lecture 7. For this project, you must work alone! Please carefully read the Policy on Collaboration and Cheating to see what this means exactly. In particular, do not look for solutions online. It should (still) go without saying that you may not use any of the built-in java.util data structures in your implementation! The whole point is to build your own versions! There are a few places where you may use specific data structures outside of tests, and we will clearly say where. Style . As in Project 1A, we will be enforcing style. You must follow the style guide, or you will be penalized on the autograder. Note that style penalties do not apply to test files. You can and should check your style locally with the CS 61B plugin. We will not remove the velocity limit for failing to check style. Getting the Skeleton Files . Follow the instructions in the Assignment Workflow guide to get the skeleton code and open it in IntelliJ. For this project, we will be working in the proj1b directory. You see a proj1b directory appear in your repo with the following structure: . proj1b ├── src │ └── deque │ ├── Deque61B.java │ └── Maximizer61B.java └── tests ├── ArrayDeque61BPreconditionTest.java ├── ArrayDeque61BTest.java └── Maximizer61BTest.java . Note that you’ll also see a gh2 directory and the related test file TestGuitarString.java. These are related to an optional Guitar Hero section, which you can read about further down. If you get some sort of error, STOP and either figure it out by carefully reading the Git WTFs or seek help at OH or Ed. You’ll potentially save yourself a lot of trouble vs. guess-and-check with git commands. If you find yourself trying to use commands recommended by Google like force push, don’t. Don’t use force push, even if a post you found on Stack Overflow says to do it! . You can also watch Professor Hug’s demo about how to get started and this video if you encounter some git issues. ",
    "url": "/projects/proj1b/#introduction",
    
    "relUrl": "/projects/proj1b/#introduction"
  },"287": {
    "doc": "Project 1B: ArrayDeque61B",
    "title": "Deque: ADT and API",
    "content": "If you need a refresher on Deque61Bs, refer to the Project 1A spec and the Deque61B.java file. ",
    "url": "/projects/proj1b/#deque-adt-and-api",
    
    "relUrl": "/projects/proj1b/#deque-adt-and-api"
  },"288": {
    "doc": "Project 1B: ArrayDeque61B",
    "title": "Creating the File",
    "content": "Start by creating a file called ArrayDeque61B. This file should be created in the proj1b/src/deque directory. To do this, right-click on the deque directory, navigate to “New -&gt; Java Class”, and give it the name ArrayDeque61B. Just like you did in Project 1A We want our ArrayDeque61B to be able to hold several different types. To enable this, you should edit the declaration of your class so that it reads: . public class ArrayDeque61B&lt;T&gt; . Recall from lecture that it doesn’t actually matter if we use T or some other string like ArrayDeque61B&lt;Glerp&gt;. However, we recommend using &lt;T&gt; for consistency with other Java code. We also want to tell Java that every ArrayDeque61B is a Deque61B, so that users can write code like Deque61B&lt;String&gt; lld1 = new ArrayDeque61B&lt;&gt;();. To enable this, change the declaration of your class so that it reads: . public class ArrayDeque61B&lt;T&gt; implements Deque61B&lt;T&gt; . Once you’ve done this step, you’ll likely see a squiggly red line under the entire class declaration. This is because you said that your class implements an interface, but you haven’t actually implemented any of the interface methods yet. Hover over the red line with your mouse, and when the IntelliJ pop-up appears, click the “Implement methods” button. Ensure that all the methods in the list are highlighted, and click “OK”. Now, your class should be filled with a bunch of empty method declarations. These are the methods that you’ll need to implement for this project! . Lastly, you should create an empty constructor. To do this, add the following code to your file, leaving the constructor blank for now. public ArrayDeque61B() { } . Note: You can also generate the constructor by clicking “Code”, then “Generate” then “Constructor”, though I prefer the typing the code yourself approach. Now you’re ready to get started! . ",
    "url": "/projects/proj1b/#creating-the-file",
    
    "relUrl": "/projects/proj1b/#creating-the-file"
  },"289": {
    "doc": "Project 1B: ArrayDeque61B",
    "title": "ArrayDeque61B",
    "content": "As your second deque implementation, you’ll build the ArrayDeque61B class. This deque must use a Java array as the backing data structure. You may add any private helper classes or methods in ArrayDeque61B.java if you deem it necessary. Constructor . You will need to somehow keep track of what array indices hold the deque’s front and back elements. We strongly recommend that you treat your array as circular for this exercise. In other words, if your front item is at position 0, and you addFirst, the new front should loop back around to the end of the array (so the new front item in the deque will be the last item in the underlying array). This will result in far fewer headaches than non-circular approaches. See the Project 1B demo slides for more details. In particular, note that while the conceptual deque and the array contain the same elements, they do not contain them in the same order. We recommend using the floorMod(int a, int b) method from Java’s built-in Math class to assist you in designing a circular approach. Whereas a % b might return negative numbers when a is negative, floorMod(int a, int b) always return non-negative numbers. In practice, this means that the output will have the same sign as the divisor. Here are a few examples using the floorMod(int a, int b) method: . int value1 = Math.floorMod(16, 16); // value1 == 0 int value2 = Math.floorMod(-1, 16); // value2 == 15 int value3 = Math.floorMod(20, 16); // value3 == 4 . You can use the floorMod(int a, int b) method by adding the following import statement to the top of your file: import java.lang.Math;. You cannot create an array of generics (e.g. new T[1000]) in Java for reasons beyond the scope of this course. You will instead need to use the syntax (T[]) new Object[1000]. Declare the necessary instance variables, and implement the constructor. The starting size of your backing array must be 8. addFirst and addLast . As before, implement addFirst and addLast. These two methods must not use looping or recursion. A single add operation must take “constant time,” that is, adding an element should take approximately the same amount of time no matter how large the deque is (with one exception). This means that you cannot use loops that iterate through all / most elements of the deque. get . Unlike in LinkedListDeque61B, this method must take constant time. As before, get should return null when the index is invalid (too large or negative). You should disregard the skeleton code comments for Deque61B.java for this case. After you’ve written tests and verified that they fail, implement get. isEmpty and size . These two methods must take constant time. That is, the time it takes to for either method to finish execution should not depend on how many elements are in the deque. Write tests for the isEmpty and size methods, and check that they fail. Then, implement the methods. toList . toList will continue to be useful to test your Deque61B. Write the toList method. The first line of the method should be something like List&lt;T&gt; returnList = new ArrayList&lt;&gt;(). This is one location where you are allowed to use a Java data structure. Some later methods might seem easy if you use toList. You may not call toList inside ArrayDeque61B; there is a test that checks for this. Hint One of the other methods may be helpful for implementing this method. Implement toList. You are not given tests this time, so you will need to write them! . All that’s left is to test and implement all the remaining methods. For the rest of this project, we’ll describe our suggested steps at a high level. We strongly encourage you to follow the remaining steps in the order given. In particular, write tests before you implement the method’s functionality. This is called “test-driven development,” and helps ensure that you know what your methods are supposed to do before you do them. removeFirst and removeLast . Lastly, write some tests that test the behavior of removeFirst and removeLast, and again ensure that the tests fail. Do not maintain references to items that are no longer in the deque. removeFirst and removeLast may not use looping or recursion. Like addFirst and addLast, these operations must take \"constant time.\" Refer to the section on writing addFirst and addLast for more information on what this means. getRecursive . Although we are not using a linked list anymore for this project, it is still required to implement this method to keep consistent with our interface. This method technically shouldn’t be in the interface, but it’s here to make testing nice. You can just use this code block for it: . @Override public T getRecursive(int index) { throw new UnsupportedOperationException(\"No need to implement getRecursive for proj 1b\"); } . “Implement” getRecursive. Resizing . We recommend you complete the other methods first, verify that they are working correctly without resizing, and come back to resizing after. Resizing Up . The exception to an Array Deque’s “constant time” requirement is when the array fills, and you need to “resize” to have enough space to add the next element. In this case, you can take “linear time” to resize the array before adding the element. Correctly resizing your array is very tricky, and will require some deep thought. Try drawing out various approaches by hand. It may take you quite some time to come up with the right approach, and we encourage you to debate the big ideas with your fellow students or TAs. Make sure that your actual implementation is by you alone. Make sure to resize by a geometric factor. We do not recommend using arraycopy with a circular implementation. It will work, but results in a significantly more complex (and harder to debug!) implementation than necessary. Instead, we suggest thinking forward to how you might implement get and using a for loop in some way. Remember to implement addFirst and addLast first, and write tests to verify that they are correct. Make sure to add enough elements so that your backing array resizes! For more info on resizing, check out these slides. Resizing Down . The amount of memory that your program uses at any given time must be proportional to the number of items. For example, if you add 10,000 items to the deque, and then remove 9,999 items, you shouldn’t still be using an array that can hold 10,000 items. For arrays of length 16 or more, your usage factor should always be at least 25%. This means that before performing a remove operation, if the number of elements in the array is at or under 25% the length of the array, you should resize the array down. For arrays length 15 or less, your usage factor can be arbitrarily low. We, again, do not recommend using arraycopy with a circular implementation. If you followed our advice above to use a for loop to resize up, resizing down should look very similar to resizing up (perhaps a helper method?). After you’ve written tests and verified that they fail, implement removeFirst and removeLast. For the intended experience, follow these steps in order. If you do something else and ask us for help, we will refer you back to these steps. Writing Tests . Refer to the Project 1A spec for a review of how to write tests. Similar to Project 1A, you will be scored on the coverage of your unit tests for Project 1B. You might find some of your tests from Project 1A to be reusable in this project; don’t be afraid to copy them over! . Note that you should only be using variables and methods found in the Deque interface when writing your coverage tests. This is because we run our “own” Deque implementations against your tests to determine if they have enough coverage. You can test your coverage by submitting to the [UNGRADED] Project 1B: ArrayDeque Test Coverage assignment, which will not be graded and has no velocity limit. Your final test coverage grade component will be determined from your submission to the main Project 1B: ArrayDeque assignment. Suggestions . | Try to get everything working for a fixed-size array first. This would be good point to start to familiarize yourself. | Once you are confident working solution for a fixed-size array, try resizing - consider having a helper method for it! | DO NOT modify Deque61B interface. | When in doubt, draw it out! We suggest drawing box-and-pointer diagrams (or diagrams in general) when faced with issues in your methods, it will help you understand both your code as well as the intended logic better. | . ",
    "url": "/projects/proj1b/#arraydeque61b",
    
    "relUrl": "/projects/proj1b/#arraydeque61b"
  },"290": {
    "doc": "Project 1B: ArrayDeque61B",
    "title": "Deque61B Enhancements",
    "content": "In this section of the project, you are going to expand upon the functionality of the Deque61B interface. Object Methods . In order to implement the following methods, you should start by copying and pasting your Project 1A implementation of LinkedListDeque61B into the src directory. iterator() . One shortcoming of our Deque61B interface is that it can not be iterated over. That is, the code below fails to compile with the error “foreach not applicable to type”. Deque61B&lt;String&gt; lld1 = new LinkedListDeque61B&lt;&gt;(); lld1.addLast(\"front\"); lld1.addLast(\"middle\"); lld1.addLast(\"back\"); for (String s : lld1) { System.out.println(s); } . Similarly, if we try to write a test that our Deque61B contains a specific set of items, we’ll also get a compile error, in this case: “Cannot resolve method containsExactly in Subject”. public void addLastTestBasicWithoutToList() { Deque61B&lt;String&gt; lld1 = new LinkedListDeque61B&lt;&gt;(); lld1.addLast(\"front\"); // after this call we expect: [\"front\"] lld1.addLast(\"middle\"); // after this call we expect: [\"front\", \"middle\"] lld1.addLast(\"back\"); // after this call we expect: [\"front\", \"middle\", \"back\"] assertThat(lld1).containsExactly(\"front\", \"middle\", \"back\"); } . Again the issue is that our item cannot be iterated over. The Truth library works by iterating over our object (as in the first example), but our LinkedListDeque61B does not support iteration. To fix this, you should first modify the Deque61B interface so that the declaration reads: . public interface Deque61B&lt;T&gt; extends Iterable&lt;T&gt; { . Next, implement the iterator() method using the techniques described in lecture 10. Task: Implement the iterator() method in both LinkedListDeque61B and ArrayDeque61B according to lecture. You are not allowed to call toList here. equals() . Consider the following code: . @Test public void testEqualDeques61B() { Deque61B&lt;String&gt; lld1 = new LinkedListDeque61B&lt;&gt;(); Deque61B&lt;String&gt; lld2 = new LinkedListDeque61B&lt;&gt;(); lld1.addLast(\"front\"); lld1.addLast(\"middle\"); lld1.addLast(\"back\"); lld2.addLast(\"front\"); lld2.addLast(\"middle\"); lld2.addLast(\"back\"); assertThat(lld1).isEqualTo(lld2); } . If we run this code, we see that we fail the test, with the following message: . expected: [front, middle, back] but was : (non-equal instance of same class with same string representation) . The issue is that the Truth library is using the equals method of the LinkedListDeque61B class. The default implementation is given by the code below: . public boolean equals(Object obj) { return (this == obj); } . That is, the equals method simply checks to see if the addresses of the two objects are the same. We want to be able to check whether the two Deque61B objects are equal in terms of elements and order so therefore we need a different equals method. Override the equals method in the ArrayDeque61B and LinkedListDeque61B classes. For guidance on writing an equals method, see the lecture slides or the lecture code repository. Note: You might ask why we’re implementing the same method in two classes rather than providing a default method in the Deque61B interface. Interfaces are not allowed to provide default methods that override Object methods. For more see https://stackoverflow.com/questions/24595266/why-is-it-not-allowed-add-tostring-to-interface-as-default-method. However, one workaround for this is to provide a default, non-Object helper method in the Deque61B interface and have the implementing classes call it. Override the equals() method in the LinkedListDeque61B and ArrayDeque61B classes. Important: You should not use getClass, and there’s no need to do any casting in your equals method. That is, you shouldn’t be doing (ArrayDeque61B) o. Such equals methods are old fashioned and overly complex. Use instanceof instead. Note: The instanceof operator behaves a little strangely with generic types, for reasons beyond the scope of this course. For example, if you want to check if lst is an instance of a List&lt;Integer&gt;, you should use lst instanceof List&lt;?&gt; rather than lst instanceof List&lt;Integer&gt;. Unfortunately, this is not able to check the types of the elements, but it’s the best we can do. Important: Make sure you use the @Override tag when overriding methods. A common mistake in student code is to try to override equals(ArrayList&lt;T&gt; other) rather than equals(Object other). Using the optional @Override tag will prevent your code from compiling if you make this mistake. @Override is a great safety net. You are not allowed to call toList here. toString() . Consider the code below, which prints out a LinkedListDeque61B. Deque61B&lt;String&gt; lld1 = new LinkedListDeque61B&lt;&gt;(); lld1.addLast(\"front\"); lld1.addLast(\"middle\"); lld1.addLast(\"back\"); System.out.println(lld1); . This code outputs something like deque.proj1a.LinkedListDeque61B@1a04f701. This is because the print statement implicitly calls the LinkedListDeque61B toString method. Since you didn’t override this method, it uses the default, which is given by the code below (you don’t need to understand how this code works). public String toString() { return getClass().getName() + \"@\" + Integer.toHexString(hashCode()); } . In turn the hashCode method, which you have also not overridden, simply returns the address of the object, which in the example above was 1a04f701. Task: Override the toString() method in the LinkedListDeque61B and ArrayDeque61B classes, such that the code above prints out [front, middle, back]. Hint: Java’s implementation of the List interface has a toString method. Hint: There is a one line solution (see hint 1). Hint: Your implementation for LinkedListDeque61B and ArrayDeque61B should be exactly the same. Testing The Object Methods . We haven’t provided you with test files for these three object methods; however, we strongly encourage you to use the techniques you have learned so far to write your own tests. You can structure these tests however you’d like, since we won’t be testing them. One possible (and suggested) structure is to create a new file in the tests directory called LinkedListDeque61BTest so that you have a testing file for each implementation. ",
    "url": "/projects/proj1b/#deque61b-enhancements",
    
    "relUrl": "/projects/proj1b/#deque61b-enhancements"
  },"291": {
    "doc": "Project 1B: ArrayDeque61B",
    "title": "Maximizer61B",
    "content": "This section requires information covered in Lecture 9: Subtype Polymorphism, Comparators and Lecture 10: Iterators, Object Methods. For the final part of this project you will build the Maximizer61B class. This class is independent of the part where you wrote ArrayDeque61B. This part of the project is admittedly disconnected from the previous parts, but we wanted to get you some practice with Iterables, Comparables, and Comparators. The Maximizer61B class has two static methods: . | public static &lt;T extends Comparable&lt;T&gt;&gt; T max(Iterable&lt;T&gt; iterable): returns the maximum element in the given iterable. | public static &lt;T&gt; T max(Iterable&lt;T&gt; iterable, Comparator&lt;T&gt; comp): returns the maximum element in the given iterable according to the specified comparator. | . If the iterable is empty, simply return null. ",
    "url": "/projects/proj1b/#maximizer61b",
    
    "relUrl": "/projects/proj1b/#maximizer61b"
  },"292": {
    "doc": "Project 1B: ArrayDeque61B",
    "title": "Guitar Hero (Optional)",
    "content": "Now that you have created a deque, let’s use it for something interesting! In this part of the project, we will create another package for generating synthesized musical instruments using the deque package we just made. We’ll get the opportunity to use our data structure for implementing an algorithm that allows us to simulate the plucking of a guitar string. The GH2 Package . The gh2 package has just one primary component that you will edit: . | GuitarString, a class which uses a Deque61B&lt;Double&gt; to implement the Karplus-Strong algorithm to synthesize a guitar string sound. | . We’ve provided you with skeleton code for GuitarString which is where you will use your deque package that you made in the first part of this project. GuitarString . We want to finish the GuitarString file, which should use the deque package to replicate the sound of a plucked string. Note that this file uses the word “buffer”, which is a synonym for “deque” in this context. We’ll be using the Karplus-Strong algorithm, which is quite easy to implement with a Deque61B. It is simply the following three steps: . | Replace every item in a Deque61B with random noise (double values between -0.5 and 0.5). | Play the double at the front of the Deque61B. | Remove the front double in the Deque61B and average it with the next double in the Deque61B (hint: use removeFirst) and get()) multiplied by an energy decay factor of 0.996 (we’ll call this entire quantity newDouble). Then, add newDouble to the back of the Deque61B. Go back to step 2 (and repeat forever). | . Or visually, if the Deque61B is as shown on the top, we’d play the 0.2, remove it, combine it with the 0.4 to form 0.2988, and add the 0.2988. You can play a double value with the StdAudio.play method. For example StdAudio.play(0.333) will tell the diaphragm of your speaker to extend itself to 1/3rd of its total reach, StdAudio.play(-0.9) will tell it to stretch its little heart backwards almost as far as it can reach. Movement of the speaker diaphragm displaces air, and if you displace air in nice patterns, these disruptions will be interpreted by your consciousness as pleasing thanks to billions of years of evolution. See this page for more. If you simply do StdAudio.play(0.9) and never play anything again, the diaphragm shown in the image would just be sitting still 9/10ths of the way forwards. Complete GuitarString.java so that it implements the Karplus-Strong algorithm. Note that you will have to fill your Deque61B buffer with zeros in the GuitarString constructor. Part of the process will be handled by the client of the GuitarString class. You are only required to complete the tasks labeled with TODO. Do not call StdAudio.play in GuitarString.java. This will cause the autograder to break. GuitarPlayer.java does this for you already. Make sure to add the libraries, as usual, otherwise IntelliJ won’t be able to find StdAudio. For example, the provided TestGuitarString class provides a sample test testPluckTheAString that attempts to play an A-note on a guitar string. If you run the test should hear an A-note when you run this test. If you don’t, you should try the testTic method and debug from there. Consider adding a print or toString method to GuitarString.java that will help you see what’s going on between tics. Why It Works . The two primary components that make the Karplus-Strong algorithm work are the ring buffer feedback mechanism and the averaging operation. | The ring buffer feedback mechanism. The ring buffer models the medium (a string tied down at both ends) in which the energy travels back and forth. The length of the ring buffer determines the fundamental frequency of the resulting sound. Sonically, the feedback mechanism reinforces only the fundamental frequency and its harmonics (frequencies at integer multiples of the fundamental). The energy decay factor (.996 in this case) models the slight dissipation in energy as the wave makes a round trip through the string. | The averaging operation. The averaging operation serves as a gentle low-pass filter (which removes higher frequencies while allowing lower frequencies to pass, hence the name). Because it is in the path of the feedback, this has the effect of gradually attenuating the higher harmonics while keeping the lower ones, which corresponds closely with how a plucked guitar string sounds. | . GuitarHeroLite . You should now also be able to use the GuitarHeroLite class. Running it will provide a graphical interface, allowing the user (you!) to interactively play sounds using the gh2 package’s GuitarString class. Submit to the Autograder . Once you’ve written local tests and passed them, try submitting to the autograder. You may or may not pass everything. | If you fail any of the coverage tests, it means that there is a case that your local tests did not cover. The autograder test name and the test coverage component will give you hints towards the missing case. | If you fail a correctness test, this means that there is a case that your local tests did not cover, despite having sufficient coverage for flags. This is expected. Coverage flags are an approximation! They also do not provide describe every single behavior that needs to be tested, nor do they guarantee that you assert everything. Here is a list of them! | If you fail any of the timing tests, it means that your implementation does not meet the timing constraints described above. | You will have a token limit of 4 tokens every 24 hours. We will not reinstate tokens for failing to add/commit/push your code, run style, etc. | You may find messages in the autograder response that look something like this: WARNING: A terminally deprecated method in java.lang.System has been called. You can safely ignore any line tagged as a WARNING. | . Scoring . This project, similar to Project 0, is divided into individual components, each of which you must implement completely correctly to receive credit. | Adding (20%): Correctly implement addFirst, addLast, and toList. | isEmpty, size (3.33%): Correctly implement isEmpty and size with add methods working. | get (3.33%): Correctly implement get. | Removing (20%): Correctly implement removeFirst and removeLast. | Memory (16.67%): Correctly implement resizing so that you do not use too much memory. | LinkedListDeque61B Object Methods (10%): Correctly implement iterator, equals, and toString in LinkedListDeque61B. | ArrayDeque61B Object Methods (10%): Correctly implement iterator, equals, and toString in ArrayDeque61B. | Maximizer61B Functionality (10%): Correctly implement max() and max(Comparator&lt;T&gt; comp) in Maximizer61B. | Test Coverage (6.67%): Write tests to capture a sufficient number of flags. | . For the test coverage component, we will run your tests against a staff solution and check how many scenarios and edge cases are tested. You can receive partial credit for this component. Here is a list of them! . ",
    "url": "/projects/proj1b/#guitar-hero-optional",
    
    "relUrl": "/projects/proj1b/#guitar-hero-optional"
  },"293": {
    "doc": "Project 1B: ArrayDeque61B",
    "title": "Project 1B: ArrayDeque61B",
    "content": " ",
    "url": "/projects/proj1b/",
    
    "relUrl": "/projects/proj1b/"
  },"294": {
    "doc": "Projects",
    "title": "Projects",
    "content": " ",
    "url": "/projects/",
    
    "relUrl": "/projects/"
  },"295": {
    "doc": "Conceptual Resources",
    "title": "Java",
    "content": ". | Java 17 Documentation | JavaTutor | Java Visualizer | JUnit Documentation | . ",
    "url": "/resources/conceptual/#java",
    
    "relUrl": "/resources/conceptual/#java"
  },"296": {
    "doc": "Conceptual Resources",
    "title": "Data Structures and Algorithms",
    "content": ". | Professor Hilfinger’s Data Structures Into Java Book | Data Structures Wikibook | Data Structures Visualizations | USFCA Visualizations | VisuAlgo | PathFinding.js | . ",
    "url": "/resources/conceptual/#data-structures-and-algorithms",
    
    "relUrl": "/resources/conceptual/#data-structures-and-algorithms"
  },"297": {
    "doc": "Conceptual Resources",
    "title": "Asymptotics",
    "content": ". | Big-O Cheat Sheet | . ",
    "url": "/resources/conceptual/#asymptotics",
    
    "relUrl": "/resources/conceptual/#asymptotics"
  },"298": {
    "doc": "Conceptual Resources",
    "title": "Past TA Resources",
    "content": "Pre-FA23 . | Omar’s Asymptotics Guide | Allen Guo’s Website | Daniel Nguyen’s Website | Matt Sit’s Website | Kevin Lin’s Website | Wayne Li’s Website | Christine Zhou’s Materials | Kartik’s Textbook and Practice Midterms | Nicole’s videos on typing, overloading, and overriding | Antares’ and Vivian’s notes on inheritance | Small Group Tutoring (SP23) | . ",
    "url": "/resources/conceptual/#past-ta-resources",
    
    "relUrl": "/resources/conceptual/#past-ta-resources"
  },"299": {
    "doc": "Conceptual Resources",
    "title": "Conceptual Resources",
    "content": " ",
    "url": "/resources/conceptual/",
    
    "relUrl": "/resources/conceptual/"
  },"300": {
    "doc": "Academic Resources",
    "title": "Advising",
    "content": "Most departments have advisors that can guide you through academic and career decisions. | Data Science Advising | College of Engineering Advising | L&amp;S CS Advising | . ",
    "url": "/resources/academic/#advising",
    
    "relUrl": "/resources/academic/#advising"
  },"301": {
    "doc": "Academic Resources",
    "title": "Tutoring",
    "content": "Computer Science Mentors (CSM) . Computer Science Mentors (CSM) run small-group tutoring sessions that follow the content schedule. Each section consists of 4-6 students and is led by a mentor who has taken the course before. CSM also holds review sessions and provides other resources throughout the semester. Sections open during the first couple weeks of school, keep an eye on Ed! . CAEE . The Center for Access to Engineering Excellence (CAEE) provides free tutoring for CS 61B. The weekly schedule can be found on their website. HKN . HKN provides drop-in tutoring throughout the semester in their Cory office. For their tutoring schedule, see the website. CSUA . CSUA is an undergraduate computer science student organization on campus. They hold tutoring sessions in their Soda office–the schedule can be found here. UPE . UPE helps students navigate computer science at Berkeley. They provide career and academic office hours that you can sign up. ",
    "url": "/resources/academic/#tutoring",
    
    "relUrl": "/resources/academic/#tutoring"
  },"302": {
    "doc": "Academic Resources",
    "title": "Other",
    "content": ". | HKN Course Prerequisite Charts | . ",
    "url": "/resources/academic/#other",
    
    "relUrl": "/resources/academic/#other"
  },"303": {
    "doc": "Academic Resources",
    "title": "Academic Resources",
    "content": " ",
    "url": "/resources/academic/",
    
    "relUrl": "/resources/academic/"
  },"304": {
    "doc": "Support Resources",
    "title": "Student Support Meetings",
    "content": "During your time in CS 61B, we want to support you to the best of our ability. If you would like to meet with one of our student support TAs to discuss academics, external circumstances, or anything else, please setup an appointment here. ",
    "url": "/resources/support/#student-support-meetings",
    
    "relUrl": "/resources/support/#student-support-meetings"
  },"305": {
    "doc": "Support Resources",
    "title": "CAPS",
    "content": "UHS Counseling and Psychological Services (CAPS) provides counseling and consultation services to all Berkeley students. Their services include drop-in counseling as well as crisis appointments. ",
    "url": "/resources/support/#caps",
    
    "relUrl": "/resources/support/#caps"
  },"306": {
    "doc": "Support Resources",
    "title": "PATH to Care",
    "content": "The PATH to Care Center provides support to survivors of sexual violence and sexual harassment. ",
    "url": "/resources/support/#path-to-care",
    
    "relUrl": "/resources/support/#path-to-care"
  },"307": {
    "doc": "Support Resources",
    "title": "STEP",
    "content": "The Student Technology Equity Program (STEP) provides free on-campus tech support and leads device-lending programs. If during the semester, you lose access to a computer, you may be able to temporarily receive a device through this program. ",
    "url": "/resources/support/#step",
    
    "relUrl": "/resources/support/#step"
  },"308": {
    "doc": "Support Resources",
    "title": "Support Resources",
    "content": " ",
    "url": "/resources/support/",
    
    "relUrl": "/resources/support/"
  },"309": {
    "doc": "Gitbugs",
    "title": "When to make a Gitbug",
    "content": "A Gitbug should be the last resort for you. The assumption is that you’ve tried to debug your code and even after this you couldn’t find the bug. For example, if you’re completing a method in a project and failing the provided/graded test for it, do not immediately submit a Gitbug! Developing debugging skills is an official part of the course, so we do expect you to run into bugs and solve them on your own. On the other side of things, we don’t want you to be stuck on a bug for 10 hours, so we have Gitbugs to help you get unstuck. We trust that you can make the decision for yourself as to whether you’ve put in honest effort looking for the bug, but be warned that if it is obvious you haven’t tried debugging your own code, we will reject the Gitbug. ",
    "url": "/resources/guides/gitbug/#when-to-make-a-gitbug",
    
    "relUrl": "/resources/guides/gitbug/#when-to-make-a-gitbug"
  },"310": {
    "doc": "Gitbugs",
    "title": "Making a Gitbug",
    "content": "When making a Gitbug, please follow these exact steps to keep everything organized for us and make sure we don’t reject your Gitbug: . | Select the big blue ‘New Thread’ button in the top left corner | Select ‘Question’ as your type of post | Give a useful title to your Gitbug post, for example: “Project 1: Array upsizing works, but downsizing throws ArrayIndexOutOfBoundException errors” | Select the Category as Gitbug and the Subcategory as whichever assignment this is | Choosing the Gitbug category on Ed should show you a template for the question asking you important questions to help us debug your code. If you don’t see it, you didn’t do step 2. It should look like the below screenshot. | Fill out the questions in full sentences and if the questions tell you to do something then make sure you do it (i.e. ensuring you’ve pushed your code to GitHub). We will automatically reject Gitbugs without thorough explanations. | Make sure you’ve made your post private | Post your Gitbug! | . It’s important that you fill out the Gitbug template exactly and put in reasonable effort here, otherwise we won’t have all the important information to help you solve the problem. We will not be helping with low effort Gitbugs and will reject them. You should be spending anywhere from 5-10 minutes creating your Gitbug to ensure it is of high quality. The better your Gitbug is, the faster we can solve it and we can reciprocate with a high quality answer too since we have all the details neccessary to see tell what errors you made/misconceptions you have. It’s highly unlikely that a screenshot will make your Gitbug better, so please don’t add any screenshots unless you truly think it’s useful. Remember that we’ll be able to see your code when we pull your GitHub repository, so no need to screenshot IntelliJ or something like that. If you had an error message that you think is important to the bug, please copy and paste that error message into the post so that it’s easily searchable. It’s really important that you have a good description of what the bug is and what you’ve done to try and solve it so far. Here is an example of Omar doing a bad job: . Notice how Omar doesn’t even address the question. He should add to his response the specific test that failed (i.e. number) and maybe even what the error message is. Also, it’s clear that Omar didn’t try to debug since he said he just looked at the code. Maybe he did try and debug but just didn’t include it: even if he thinks his debugging was useless, he should still include it as it can give really good insight/hints into what is going on, and it’ll save the TA a ton of time. Sorry for Omar, but this Gitbug gets rejected. Now let’s look at what a good Gitbug looks like: . Omar did a great job here! There is a clear test that he is failing and he has even provided the error message for us. There is also ample evidence that he has tried to debug the code and even some hypothesis that he has plus things he already tried. Omar has also provided specific lines he has placed breakpoints at as well as what they saw when they debugged. This saves the TA time and Omar will get a very clear response on what the bug is since his question is so specific. Great job Omar! . After submitting your Gitbug you just sit tight and continue working on something else in the meanwhile. Additionally, if you submit a Gitbug and were able to resolve it before we responded, update the post by leaving a comment that the bug is resolved. We will not process any of your future Gitbugs if we clone you code and see that you have already resolved a bug without updating your Gitbug post. Once your Gitbug has been answered, do not reply. We won’t be doing any back and forth on Gitbugs. If you still have another bug, you should instead make a new Gitbug. The one exception is if you want to say “thank you” or something like that :) . ",
    "url": "/resources/guides/gitbug/#making-a-gitbug",
    
    "relUrl": "/resources/guides/gitbug/#making-a-gitbug"
  },"311": {
    "doc": "Gitbugs",
    "title": "Gitbugs",
    "content": "Gitbugs are your way to get debugging help on your assignments (labs, homeworks, projects). Submitting a Gitbug is as simple as you creating a private Ed post, following a particular template, and then waiting to get a response. After you submit your Gitbug, all staff members will see it and we can clone your GitHub repository on our own computers, look for the bug, and then give you a hint/explain where you should be looking. We try to get a 24 hour turnaround, but please be patient with us the day before or the day of a deadline as we get a huge influx during those times. ",
    "url": "/resources/guides/gitbug/",
    
    "relUrl": "/resources/guides/gitbug/"
  },"312": {
    "doc": "Discord Guide - FA23",
    "title": "How is Discord Used?",
    "content": "In Fall 2023, CS 61B will host remote Lab sections on Discord servers. The invitation links will be available in this guide, on Ed, and on the course website. ",
    "url": "/resources/guides/discord/#how-is-discord-used",
    
    "relUrl": "/resources/guides/discord/#how-is-discord-used"
  },"313": {
    "doc": "Discord Guide - FA23",
    "title": "Joining a Discord Server",
    "content": "To join one of our servers, you will have to complete the following steps. | Download the Discord app to your personal computer. | Create a Discord account here, using your Berkeley email. You must ensure that your Discord username includes your name in Beacon or else you may be removed from our servers. | Use this invitation link to join the Zephyr’s Lab. | Upon joining the CS 61B lab server, set your nickname to your full name as it is in Beacon. You can use the /nick command to do this. We may remove accounts that we can’t match with a student in this course. | . ",
    "url": "/resources/guides/discord/#joining-a-discord-server",
    
    "relUrl": "/resources/guides/discord/#joining-a-discord-server"
  },"314": {
    "doc": "Discord Guide - FA23",
    "title": "Lab Discord Policies",
    "content": "Lab sections will usually start with a presentation given by the lab TA, overviewing the lab assignment. Then, students will be given time to work on the assignment for the majority of the lab. The lab TA and academic interns will be available to provide help with the assignment, and process help requests off a queue. In some labs, the lab TA deliver another presentation towards the end of the section. These presentations will be held in Zoom. At the beginning of your designated lab time, join the zoom link of the TA whose section you’d like to attend. The Lab Discord server will have the following important channels: . | #Lab Presentation Room-x: the main video call rooms of the lab server. This is where TAs/AIs can go to give presentations to address common issues in lab. If the help queue is empty, the TA and academic interns will hang out in this channel for any casual questions. Any presentations will be announced via the #lab-announcements channel. | #Room-x: The Lab server will have multiple “room” video channels which are spaces for students to work with each other or get help from TAs and academic interns. When in lab, you should spend most of your time in one of these channels. | #lab-queue: This text channel serves as the place to queue up for help with the lab assignment. Simply drop a message with the room number you are in. When a TA or an academic intern is coming to assist you, they will react to your message with a thumbs up. When they are done helping, they will react to your message with a checkmark. If you are assisted by an academic intern, and the problem needs to be escalated to the lab TA, the academic intern will react to your message with an up-arrow, indicating that a TA should come to you when they become available. These reactions will help you and other students see how the queue is being processed. | . | Case | Example | . | Being Helped | | . | Resolved | | . | Escalated to a TA | | . | Escalated then Resolved | | . In Lab sections, we may prioritize helping lab assignments, but also feel free to ask for help on other assignments. Finally, you should never send a direct message to a TA or academic intern on Discord. All direct messages will be ignored. Please refer to our course policies to see what are the appropriate channels to communicate with staff. TAs and academic interns will never respond to DMs on Discord! . ",
    "url": "/resources/guides/discord/#lab-discord-policies",
    
    "relUrl": "/resources/guides/discord/#lab-discord-policies"
  },"315": {
    "doc": "Discord Guide - FA23",
    "title": "Discord Guide - FA23",
    "content": " ",
    "url": "/resources/guides/discord/",
    
    "relUrl": "/resources/guides/discord/"
  },"316": {
    "doc": "Lab 09: Introduction to Project 3 (Optional)",
    "title": "Introduction",
    "content": "This lab will help you with Project 3: Build Your Own World (BYOW). In this lab, you’ll learn how to use graphical user interface libraries to render your world and collect input from the user. In the first part of this lab, you’ll learn how to use “tiles” to generate shapes on your screen. This will apply to building the rooms, hallways, and other features of your world in Project 3. In the second part, you’ll add interactivity, drawing boxes in response to key presses. ",
    "url": "/labs/lab09/#introduction",
    
    "relUrl": "/labs/lab09/#introduction"
  },"317": {
    "doc": "Lab 09: Introduction to Project 3 (Optional)",
    "title": "Optional",
    "content": "Please note that this lab is optional but highly recommended to help you complete the project! The unofficial due date is 4/4 to keep you on track, however feel free to use more time to complete the lab as needed. As follows, the lab is worth 0 points and there will be no lab sections for this week. Note that there are some parts labeled below as “Optional”. These are additional implementations you can attempt to further test your understanding. ",
    "url": "/labs/lab09/#optional",
    
    "relUrl": "/labs/lab09/#optional"
  },"318": {
    "doc": "Lab 09: Introduction to Project 3 (Optional)",
    "title": "Pre-Lab",
    "content": "Some steps to complete before getting started on this lab: . | As usual, run git pull skeleton main | Understand that project 3 will be a marathon and not a sprint. Don’t wait until the last minute. You and your partner should start thinking about your design NOW. | Optional: Watch a previous semester’s project 3 getting started video at this link. The names and API may have changed slightly, but the bigger picture still applies. | Optional: Read over Phase 1/skim over the project 3 spec and understand the main ideas. Spec may not yet be available when you start this lab. | . This lab will give you a chance to learn about and practice many of the subtle and tricky parts of project 3, but in the context of a much simpler problem. ",
    "url": "/labs/lab09/#pre-lab",
    
    "relUrl": "/labs/lab09/#pre-lab"
  },"319": {
    "doc": "Lab 09: Introduction to Project 3 (Optional)",
    "title": "Part I: Meet the Tile Rendering Engine",
    "content": "Boring World . Open up the skeleton and check out the BoringWorldDemo file in the demo folder. Try running it and you should see a window appear that looks like the following: . This world consists of empty space, except for the rectangular block near the bottom middle. The code to generate this world consists of three main parts: . | Initializing the tile rendering engine. | Generating a two dimensional TETile[][] array. | Using the tile rendering engine to display the TETile[][] array. | . Read through the code to see an example of how the tile rendering API works. After creating a TERenderer object, you need to call the initialize method, specifying the width and height of your world, where the width and height are given in terms of the number of tiles. Each tile is 16 pixels by 16 pixels, so for example, if we called ter.initialize(10, 20), we’d end up with a world that is 10 tiles wide and 20 tiles tall, or equivalently 160 pixels wide and 320 pixels tall. The code also demonstrates how to work with TETile objects. You can either build them from scratch using the TETile constructor (see TETile.java), or you can choose from a palette of pregenerated tiles in the file Tileset.java. For example, the code from BoringWorldDemo.java below generates a 2D array of tiles and fills them with the pregenerated tile given by Tileset.NOTHING. TETile[][] world = new TETile[WIDTH][HEIGHT]; for (int x = 0; x &lt; WIDTH; x++) { for (int y = 0; y &lt; HEIGHT; y++) { world[x][y] = Tileset.NOTHING; } } . Of course, we can overwrite existing tiles. For example, the code below from BoringWorld.java creates a 15 x 5 tile region made up of the pregenerated tile Tileset.WALL and writes it over some of the NOTHING tiles created by the loop code shown immediately above. for (int x = 20; x &lt; 35; x++) { for (int y = 5; y &lt; 10; y++) { world[x][y] = Tileset.WALL; } } . (0, 0) is the bottom-left corner of the world (not the top-left as you may be used to). For example, for position (5, 4), we would go 5 units to the right and then 4 units up. We will work with this orientation in the lab. The last step in rendering is to call ter.renderFrame(world), where ter is a TERenderer object. Changes made to the tiles array will not appear on the screen until you call the renderFrame method. Try changing the tile specified to something else in the Tileset class other than WALL and see what happens (like Tileset.GRASS or Tileset.WATER). Also, try experimenting with changing the constants in the loop and see how the world changes. Tiles themselves are immutable! You cannot do something like world[x][y].character = 'X'. Look at TETile to help understand! . Why do we initialize the world to Tileset.NOTHING, rather than just leaving it untouched? The reason is that the renderFrame method cannot handle any tiles that are null. If you don’t initialize the world to Tileset.NOTHING, you’ll get a NullPointerException when you try to call renderFrame. Task 1: Tree World . Open Task1.java in the Lab9 folder. Complete the following: . | Fill in the fillWithTrees(TETile[][] world) function, which should fill the entire 2D tile array with trees. | Fill in the main method so that it: . | Creates and initializes a TERenderer of width 30 and height 20. | Creates a 2D TETile array of width 30 and height 15, i.e. TETile[][] world = new TETile[30][15] | Calls fillWithTrees | Calls ter.renderFrame(world); | . | . Run the program and verify that you get an image like the one shown below. Note that because the TETile[][] array is height 15 and the world is height 20, 5 empty rows are left blank. We’ll use that empty space in task 3. Note that it’s best practice to use constants instead of having numbers hard coded into your declarations, e.g. private static final int WORLD_HEIGHT = 15;, and new TETile[WORLD_WIDTH][WORLD_HEIGHT];. This is because you might want to use these constants in other places, and you don’t want to accidentally change it in one place but not another. For this reason, the style checker will yell at you if you later submit code for project 3 that looks like TETile[][] world = new TETile[30][15]. For this lab, there’s nothing to submit, so you don’t need to worry about this if you don’t want to. Random World . Now open up RandomWorldDemo.java. Try running it and you should see something like this: . This world is sheer chaos – walls and flowers everywhere! If you look at the RandomWorldDemo.java file, you’ll see that we’re doing a few new things: . | We create and use an object of type Random that is a “pseudorandom number generator”. | We use a new type of conditional called a switch statement. | We have delegated work to functions instead of doing everything in main. | . A random number generator does exactly what its name suggests, it produces an infinite stream of numbers that appear to be randomly ordered. The Random class provides the ability to produce pseudorandom numbers for us in Java. For example, the following code generates and prints 3 random integers: . Random r = new Random(1000); System.out.println(r.nextInt()); System.out.println(r.nextInt()); System.out.println(r.nextInt()); . We call Random a pseudorandom number generator because it isn’t truly random. Underneath the hood, it uses cool math to take the previously generated number and calculate the next number. We won’t go into the details of this math, but see Wikipedia if you’re curious. More importantly, the sequence generated is deterministic, and the way we get different sequences is by choosing what is called a “seed”. This pseudorandomness will be a core part of Project 3. In the above code snippet, the seed is the input to the Random constructor, so 1000 in this case. Having control over the seed is pretty useful since it allows us to indirectly control the output of the random number generator. If we provide the same seed to the constructor, we will get the same sequence values. For example, the code below prints 4 random numbers, then prints the SAME 4 random numbers again. Since the seed is different from the previous code snippet, the 4 numbers will likely be different from the 3 numbers printed above. This will be super helpful in Project 3, as it will give us deterministic randomness: your worlds look totally random, but you can recreate them consistently for debugging (and grading) purposes. Random r = new Random(82731); System.out.println(r.nextInt()); System.out.println(r.nextInt()); System.out.println(r.nextInt()); System.out.println(r.nextInt()); r = new Random(82731); System.out.println(r.nextInt()); System.out.println(r.nextInt()); System.out.println(r.nextInt()); System.out.println(r.nextInt()); . In the case a seed is not provided by the user/programmer, i.e. Random r = new Random(), random number generators select a seed using some value that changes frequently and produces a lot of unique values, such as the current time and date. Seeds can be generated in all sorts of other stranger ways, such as using a wall full of lava lamps. For now, RandomWorldDemo uses a hard coded seed, namely 2873123, so it will always generate the exact same random world. You can change the seed if you want to see other random worlds, though given how chaotic the world is, it probably won’t be very interesting. The final and most important thing is that rather than doing everything in main, our code delegates work to functions with clearly defined behavior. This is critically important for your project 3 experience! You’re going to want to constantly identify small subtasks that can be solved with clearly defined methods. Furthermore, your methods should form a hierarchy of abstractions! . At this point, please ensure that you’ve read through and understood BoringWorldDemo and RandomWorldDemo (important!) and that you understand roughly how to work with TERenderer, TETile, and Tileset. It’ll be expected for the next parts that you have a rough idea of how the first two demo classes work and how to work with the tile rendering classes. Task 2A: A square of flowers. Copy Task1.java to create Task2.java. Complete the following: . | Write a function private static void drawSquare(TETile[][] world, int startX, int startY, int size, TETile tile). This function should fill in a square of the given side length made of the given tile. Its top left corner should be at position startX and startY. If the square goes out of bounds, skip any out of bounds tiles, i.e. your function shouldn’t crash due to an out of bounds error. | Modify main so that it calls drawSquare(world, 10, 7, 5, Tileset.FLOWER); after the call to fillWithTrees. Note, you may need to change world to match the variable name that you chose. | . Running your program, you should see the following. Task 2B: Random square locations . In Task2.java, complete the following: . | Write a function private static void addRandomSquare(TETile[][] world, Random rand) that uses drawSquare to draw a square of flowers of random size between 3 and 7 at a random X and random Y coordinate. It’s OK if the square isn’t entirely within bounds, though the top left corner should be in bounds. | Modify your main function so that it calls addRandomSquare instead of the hard coded drawSquare above. You should use a hard coded random seed. | . Note: If you want random number between 3 and 7, you can use RandomUtils.uniform(rand, 3, 8); This function call returns a random integer value in the range [3, 8), i.e. is exclusive of the right end of the range. Try running your program with different random seeds and you should see different squares get drawn. And if you pick the same random seed, you should see the same square get drawn. Task 2C: Random square type . Modify your Task2.java code so that the square that gets drawn is either FLOWER, WALL, or WATER, with equal probability. Use a switch statement, following the example in the demo code. Task 2D: 5 Squares . Modify your Task2.java code so that 5 random squares get drawn. An example output is shown below. Note: You will not get the exact world since you didn’t pick the same random seed and implement your code in the exact way that I did. ",
    "url": "/labs/lab09/#part-i-meet-the-tile-rendering-engine",
    
    "relUrl": "/labs/lab09/#part-i-meet-the-tile-rendering-engine"
  },"320": {
    "doc": "Lab 09: Introduction to Project 3 (Optional)",
    "title": "Interactivity",
    "content": "In the latter part of the project, you’ll need to make your program interactive. Let’s see how we can modify the world in response to key presses. Open and run GameLoopDemo. Note that when you press 1, 2, 3, 4, or 5, some of the tiles on the screen change. This is done using the StdDraw.hasNextKeyTyped and StdDraw.nextKeyTyped methods. StdDraw . As mentioned, we’ll be working with the library StdDraw. StdDraw is a provided library that gives basic capabilities to create drawings in your program as well as grab user input. Please take a look at the API before getting started as you will find some of the methods useful not only for this lab, but for Project 3. Task 3A . Create Task3.java by copying Task2.java. Modify your code so that: . | Initially there is only a field of trees. That is, delete your five calls to addRandomSquare. | When the user presses the n key, a new random square is called, i.e. each press of n calls addRandomSquare. | When the user presses the q key, the program ends. | . You’ll need to look closely at GameLoopDemo. Importantly, your code should be stuck in an infinite loop, checking for key presses with each iteration. Task 3B . Modify your code so that in the blank space that is left empty at the top of the window, we print out the number of squares that are currently being displayed. You can do this using StdDraw.textLeft(x, y, text), which draws the given text at the given x and y position. For example if we pick x = 1 and y = 17, the text will be drawn at the top left of the window. An example is shown below after pressing n 5 times. Note: You will not get the exact world since you didn’t pick the same random seed and implement your code in the exact way that I did. If the text is flickering, it’s because you’re redrawing too many times per second. You can add StdDraw.pause(2) to pause for 2 milliseconds at the end of each loop, which will pause after drawing everything to the screen for 2 milliseconds. ",
    "url": "/labs/lab09/#interactivity",
    
    "relUrl": "/labs/lab09/#interactivity"
  },"321": {
    "doc": "Lab 09: Introduction to Project 3 (Optional)",
    "title": "Task 4 (Optional, but recommended)",
    "content": "You’ll also need to implement a save and load feature in project 3. As an example that you can refer to later, let’s create a save and load feature for this lab. Copy Task3.java to Task4.java. Modify your program so that if the user presses s, the state of the world is saved. And if the user presses l, the state of the world is loaded. There are two things that make this challenging: . | The save should persist even if the user quits the program completely, turns off their computer, etc. | The state of the world isn’t just the visible world, but also the state of the random number generator. | . Example 1: If you start the program, press n 5 times, then press s, then q, the program will terminate completely. If you then reopen the program and press l, you should be exactly where you left off. Example 2: If you start the program, press n 4 times, then press s, then press n, then press l, you should go back to having 4 rectangles, and importantly, if you press n again you should get the same pseudo-random 5th rectangle. So if you alternately press nlnlnlnlnlnlnl, you should keep seeing the same rectangle appearing and disappearing. The random state is effectively tracked and restored with each press of l. To save state, we recommend writing a file that says how many times n has been pressed. For an example of how to read and write from a file, see ExampleSaveLoad.java. Then when you load state, you should create a new random number generator (with the same starting seed), blank out the world completely, and call the addRandomSquare function n times. In effect, you’re replaying the sequence of key presses from the start. There are other ways to do this, such as saving the random number generator object to a file and reloading it, but the simulating-from-scratch approach is much less error prone to implement, especially on the actual much larger project 3. ",
    "url": "/labs/lab09/#task-4-optional-but-recommended",
    
    "relUrl": "/labs/lab09/#task-4-optional-but-recommended"
  },"322": {
    "doc": "Lab 09: Introduction to Project 3 (Optional)",
    "title": "Task 5 (Optional, very challenging, similar to project)",
    "content": "As an extra challenge that will more closely resemble the project, add the ability to remove the most recently placed square using d. Note: If you want the save feature to work properly, you’ll need to modify the save/load logic since it’s no longer enough to simply know how many squares have been created. That is, if your save file says the number 5, you don’t know if that means the user pressed nnnnn (i.e. n 5 times), or if they pressed nnnddnnnndn. One approach is to save the sequence of keypresses to the file. ",
    "url": "/labs/lab09/#task-5-optional-very-challenging-similar-to-project",
    
    "relUrl": "/labs/lab09/#task-5-optional-very-challenging-similar-to-project"
  },"323": {
    "doc": "Lab 09: Introduction to Project 3 (Optional)",
    "title": "Grading and Submission",
    "content": "This lab is worth 0 points. There is nothing to submit. ",
    "url": "/labs/lab09/#grading-and-submission",
    
    "relUrl": "/labs/lab09/#grading-and-submission"
  },"324": {
    "doc": "Lab 09: Introduction to Project 3 (Optional)",
    "title": "Lab 09: Introduction to Project 3 (Optional)",
    "content": " ",
    "url": "/labs/lab09/",
    
    "relUrl": "/labs/lab09/"
  },"325": {
    "doc": "Asymptotics",
    "title": "Introduction",
    "content": "This serves as a practical guide to asymptotics. We will not be talking about theory or why asymptotics is neccessary or useful. This guide assumes that you already know those things and want to apply them to find runtimes of actual Java methods. We’ll cover some strategies that you should know and then we’ll go over what I call “cheats,” (warning: there are a lot of cheats and I’ll only be discussing a few). Without further adiou, let’s start off by talking about some quick math things that you’ll absolutely need to know. ",
    "url": "/resources/guides/asymptotics/#introduction",
    
    "relUrl": "/resources/guides/asymptotics/#introduction"
  },"326": {
    "doc": "Asymptotics",
    "title": "Math background",
    "content": "There are just a few tiny math things you’ll need to know for asymptotics. One will be simplifying summations, and the other is a quick trick on figuring out how many elements there are in a sequence. Summations . Most of asymptotics is really just simplifying the work done into a summation and then applying the right summation formula. The two types of summations you’ll see in CS 61B are the arithmetic summation and the geometric summation. Arithmetic Summation . An arithmetic summation is one where the difference between consecutive terms is some constant. The constant doesn’t matter. For example: . \\[1 + 2 + 3 + 4 + 5 + ... + N\\] \\[1 + 3 + 5 + 7 + 9 + 11 + ... + N\\] \\[10 + 20 + 30 + 40 + 50 + ... + N\\] are all arithmetic summations. With an arithmetic summation, the entire summation is $\\Theta$ of the last term squared. So all of the above summations are $\\Theta(N^2)$ even though all the constants are different. If it seems too easy to be true, it’s not. It really is that simple. Seemingly hard question: what is the $\\Theta$ bound of the below sum: . \\[1 + 2 + 3 + 4 + 5 + ... + \\log N\\] You might think it’s hard because you see a $\\log N$. But don’t forget what you just learned. Take the last term, square it, and then put a $\\Theta$ on it. Hence, the above summation is $\\Theta(\\log^2 N)$. See? Not hard at all. Now let’s talk about the next type of summation. Geometric Summation . Arguably the easier summation. A geometric summation is one where the ratio of consecutive terms is constant. For example: . \\[1 + 2 + 4 + 8 + ... + N\\] \\[1 + 3 + 9+ 27 + ... + N\\] \\[10 + 100 + 1\\,000 + 10\\,000 + ... + N\\] With a geometric summation, you still take the last term but that’s it. No squaring. Take the last term, throw a $\\Theta$ on it, and that’s it. So, you guessed it, all of the above summations are $\\Theta(N)$. Seemingly hard question: what is the $\\Theta$ bound of the below sum: . \\[1 + 2 + 4 + 8 + 16 + ... \\sqrt{\\log N}\\] You’ve probably caught onto the trick. It’s not hard for you now since you’re equipped! We see from the first few terms that the summation is geometric and so we just throw a $\\Theta$ bound on the last term. Hence, the above summation is $\\Theta(\\sqrt{\\log N})$. Easy peasy. Summation summary . Let’s quickly summarize the summation lessons. If you see a summation, take these 2 steps: . | Look at the first few terms of the summation to see what type it is (arithmetic or geometric). | Figure out the last term, and then apply the appropriate simplification (if it is arithmetic, square and put a $\\Theta$, and if it is geometric just put a $\\Theta$). | . Sequences . Sequences are slightly different than summations. Instead of summing things, it’s just a list of numbers. The following are sequences: . \\[1, 2, 3, 4, 5, ... , N\\] \\[1, 2, 4, 8, 16, ... , 2^N\\] Notice the commas instead of $+$ signs. There is no concept of “arithmetic” or “geometric” sequence. They’re just sequences. Often we’ll boil the work done in a Java method to a sequence of numbers and we simply want to know how many numbers are here. So here is how I suggest you do that. You’ll need to know the last term. Let’s say it’s a function of $N$, call it $g(N)$. So, for the above, $g(N) = N$ for the first one and $g(N) = 2^N$ for the second one. | Figure out an expression for the $i$th element in the sequence. Call it $f(i)$. You can make the sequence 0-indexed or 1-indexed, whichever leads to a cleaner expression for $f(i)$. 0-indexed means $f(0)$ is the first term, and 1-indexed means $f(1)$ is the first term. | Make a new variable called $k$ and set the number of elements in the sequence to $k$. Our objective is to determine $k$. | $g(N) = f(k)$ and solve for $k$. Read the above definitions of $g(N)$ and $f(i)$ if it doesn’t make sense why we do this. | . That’s it. Let’s do that for the above 2 sequences. \\(1, 2, 3, 4, 5, ... , N\\) Honestly, you don’t even need to do it here since there are clearly $N$ elements, but we’ll do it as a warm up. $g(N) = N$ and $f(i) = i$. Easy enough. Note that here we’re 1-indexing the elements. \\[g(N) = f(k)\\] \\[N = k\\] Oh look, we’re already done. So there are $N$ elements in this sequence. Onto the next one. \\[1, 2, 4, 8, 16, ... , 2^N\\] This one is a bit more complex, though you might be able to do it in your head. Regardless, let’s figure out $g(N)$ and $f(i)$. $g(N) = 2^N$ and $f(i) = 2^i$. Note that here we’re 0-indexing the elements. \\[g(N) = f(k)\\] \\[2^N = 2^k\\] \\[N = k\\] And that’s it! Now let’s talk about one sequence that you will see a lot and you might as well just memorize this instead of doing it every time. \\[1, 2, 4, 8, 16, ..., N\\] $g(N) = N$ and $f(i) = 2^i$. \\[g(N) = f(k)\\] \\[N = 2^k\\] \\[k = \\log_2(N)\\] Voila. Remember that the base doesn’t matter with $\\log$ for asymptotics purposes, so we can just say that $k$ is $\\Theta(\\log N)$. Here is a hard one that I’ll leave for you to do by yourself: . \\[2, 4, 16, 256, 65536, 4294967296, ... N\\] Those might seem like random numbers, but I recommend writing each number as a power of $2$. You can solve this using the same steps as above. Talk to a friend if you’re not sure. Click this to see the solution. Following the hint above, let's write each number as a power of 2: $$2^1, 2^2, 2^4, 2^8, 2^{16}, 2^{32}, \\ldots, N$$ The last term is: $$g(N) = N$$ The $i$th term in the sequence is: $$f(i) = 2^{2^i}$$ Let $k$ be the index of the last element in the sequence (i.e. the sequence has $k$ elements). Then the last element is: $$f(k) = 2^{2^k}$$ Now we have two ways to express the last term in the sequence, so we set them equal to each other: $$g(N) = f(k)$$ $$N = 2^{2^k}$$ To solve this, take the log of both sides: $$\\log_2(N) = \\log_2(2^{2^k}) = 2^k$$ Then take the log of both sides again: $$\\log_2(\\log_2(N)) = \\log_2(2^k) = k$$ And we have our answer for the number of terms in the sequence: $$k = \\log_2(\\log_2(N))$$ And with that, we’ve gone over the mathematical background. You’ll soon see how important these things are. It’s ok if you just memorized what was said so far. But from here on out, you shouldn’t memorize any formulas. Just the strategies. Without further adieu, let’s start with single loop Java methods! . ",
    "url": "/resources/guides/asymptotics/#math-background",
    
    "relUrl": "/resources/guides/asymptotics/#math-background"
  },"327": {
    "doc": "Asymptotics",
    "title": "Single loops",
    "content": "This is the bread and butter of asymptotics questions. You’ll soon see how important those math things we did above were. First let’s look at a few examples of what these Java methods might look like: . public void loop1(int N) { for (int i = 0; i &lt; N; i = i + 1) { System.out.println(i); } } . This is a pretty standard function. Let’s look at another one. public void loop2(int N) { for (int i = 0; i &lt; N*N; i = i + 1) { int[] x = new int[i]; } } . One more. public void loop3(int N) { for (int i = 1; i &lt; N; i = i * 2) { int x = i; } } . I think we’ve seen enough. All of these look basically the same. There isn’t much more to change here. Don’t worry about finding the runtimes of those things above, we’ll do that soon. Just 3 things changed across all of those functions: . | The exit condition of the loop. Say the biggest value $i$ can be is $g(N)$. This means our exit condition is $i &lt; g(N)$. | How $i$ increments every iteration as a function of the previous $i$. | How much work gets done inside the loop as a function of $i$. Call this function $f(i)$. | . With these things, we can quickly find the runtime of the function by making a summation: . \\[f(i_1) + f(i_2) + f(i_3) + ... + f(g(N))\\] Here, $i_1$ is the first value of $i$, $i_2$ is the second value of $i$ and so on. The way that $i$ increments will help us figure out these values. $g(N)$ is the last term as you might have guessed since it is the last value that $i$ takes on, and we must take $f(g(N))$ to see how much work the last iteration does. You’ll find these functions $f, g$ in your problem as well as $i_1, i_2, i_3, …$ and then simplify the summation according to the correct formula (i.e. if it’s arithmetic square the last term, if it’s geometric do not square the last term). That’s it. Let’s revisit loop1 and see how to actually do this. Loop 1 . public void loop1(int N) { for (int i = 0; i &lt; N; i = i + 1) { System.out.println(i); } } . | $i &lt; N$ is the exit condition, so $g(i) = N$ | $i = i + 1$ is the increment function | ??? | . I hope you see how we got the first 2. I just looked at the for-loop and it’s those last 2 things. Pretty simple right? . What about how much work gets done as a function of $i$? Well, it’s simply $1$. You might be confused, and that’s ok. Why $1$? Because printing an integer is a constant time operation. Another way of saying this is that System.out.println(i) is $\\Theta(1)$. It doesn’t depend on $i$. So we say that $f(i) = 1$. Think of this as a definition. Ok, now we’re ready for the next step: making the summation. \\[f(i_1) + f(i_2) + f(i_3) + f(i_4) + ... + f(g(N))\\] We know that $i_1 = 0, i_2 = 1, i_3 = 2, i_4 = 3$ and so on. Also, we know that $g(N) = N$. \\[f(0) + f(1) + f(2) + f(3) + ... + f(N)\\] We know that $f(i) = 1$, so: . \\[1 + 1 + 1 + 1 + ... + 1\\] This summation is super easy. It’s just $1$ repeatedly added! How many terms are here? Well, if we look at the values of $i$, it forms a simple sequence of numbers, and we quickly see that there are $N$ terms total. So we can simplify this to $N \\cdot 1 = N \\in \\Theta(N)$. Important thing to notice: if the work done per iteraiton is constant with respect to $i$, you can simply count the number of iterations and put $\\Theta$ on that number. Let’s do loop2 which is slightly more complicated. Loop 2 . public void loop2(int N) { for (int i = 0; i &lt; N*N; i = i + 1) { int[] x = new int[i]; } } . | $i &lt; N^2$ is the exit condition, so $g(i) = N^2$ | $i = i + 1$ is the increment function | ??? | . Again, the first 2 aren’t too bad to get. Just reading the code. What about how much work gets done as a function of $i$? The inside is a bit trickier. It’s making an array of length $i$, which does $i$ work (since it needs to make a memory box for every index). Thus, $f(i) = i$. Ok, now we’re ready for the next step: making the summation. \\[f(i_1) + f(i_2) + f(i_3) + f(i_4) + ... + f(g(N))\\] We know that $i_1 = 0, i_2 = 1, i_3 = 2, i_4 = 3, $ and so on. Also, we know that $g(N) = N^2$. \\[f(0) + f(1) + f(2) + f(3) + ... + f(N^2)\\] We know that $f(i) = i$, so: . \\[0 + 1 + 2 + 3 + ... + N^2\\] Does this summation look familiar? It should. We look at the first few terms and determine it’s arithmetic, so we take the last term, square it, and put $\\Theta$ on it. The last term is $N^2$, squaring that gives $N^4$, and putting the bound gives a final answer of $\\Theta(N^4)$. Done. Finally, let’s do loop3. Loop 3 . public void loop3(int N) { for (int i = 1; i &lt; N; i = i * 2) { int x = i; } } . | $i &lt; N$ is the exit condition, so $g(i) = N$ | $i = i * 2$ is the increment function | ??? | . Again, the first 2 aren’t too bad to get. Just reading the code. What about how much work gets done as a function of $i$? It’s constant. Not a function of $i$. So, $f(i) = 1$. Now here we could continue with the rest of the problem, or remember what I said above. I’ll repeat it. Important thing to notice: if the work done per iteraiton is constant with respect to $i$, you can simply count the number of iterations and put $\\Theta$ on that number. Let’s generate a sequence of the values of $i$: . \\[i_1, i_2, i_3, i_4, ... , g(N)\\] \\[1, 2, 4, 8, ... N\\] We’re basically done. I did this above in the previous section. We know there are $\\Theta(\\log N)$ terms here. So, that’s it. The work this Java function does is simply how many iterations there are which is $\\Theta(\\log N)$. Done. Summary of single loop Java methods . We learned a strategy for approaching these. | Figure out the last value of $i$ as a function of $N$. Call this $g(N)$. | Figure out the increment function of $i$. | Figure out the work done per iteration as a function of $i$. Call this $f(i)$. | . Once you have the above, you simply write out the summation as: \\(f(i_1) + f(i_2) + f(i_3) + f(i_4) + ... + f(g(N))\\) . You figure out what $i_1, i_2, i_3, i_4, …$ are by looking at the increment function for $i$. Then, plug in everything you know and then simplify the sum. Voila, that’s it. We also saw that if $f(i) = 1$ (i.e. the work done inside the for-loop is constant with respect to $i$), then we can just figure out how many elements are in the sequence $i_1, i_2, i_3, i_4, …$ and put a $\\Theta$ on that. After a few of these problems, you’ll likely be able to look at a single loop and instantly tell what its runtime is. That’s good! . You might think that I overcomplicated things here. That there are shortcuts. And you’re right. There are shortcuts. But there are so many shortcuts. There is no way I could possibly detail every shortcut you can take in this guide, nor is it that helpful for you as someone learning asymptotics. The goal of this is to give you strategies to figure out the answer yourself. You’ll see in the next section when we do double loops that this method pays off and is really easy to extend. You should try a few functions before moving onto the next section. Try making your own functions with different $f, g$ functions and different ways to increment $i$. You might run into summations that you don’t know how to simplify, and you should either ask a TA/friend/post on Ed or just leave it. For example, you might get a summation like: \\(\\sqrt{1} + \\sqrt{2} + \\sqrt{3} + ... \\sqrt{N}\\) . and you can just leave it like that. I don’t know how to simplify that and it’s out of the scope of this class. ",
    "url": "/resources/guides/asymptotics/#single-loops",
    
    "relUrl": "/resources/guides/asymptotics/#single-loops"
  },"328": {
    "doc": "Asymptotics",
    "title": "Double loops",
    "content": "I made this a separate section but really it’s no different than single loops. It is a bit more involved, so I want to go over them with you. Firstly, let me show you a few examples of double loops: . public void dLoop1(int N) { for (int i = 1; i &lt; N; i = i * 2) { for (int j = 0; j &lt; 10; j = j + 1) { System.out.println(i + j); } } } . Pretty standard. Let’s check out another one. public void dLoop2(int N) { for (int i = 1; i &lt; N; i = i + 1) { for (int j = 1; j &lt; i; j = j * 2) { int[] x = new int[j]; } } } . And one more: . public void dLoop3(int N) { for (int i = 1; i &lt; N * N; i = i + 1) { for (int j = 1; j &lt; Math.sqrt(i); j = j + 1) { int[] x = new int[j]; } } } . Firstly, do not fall down the oldest trick in the book. Do not multiply the number of iterations of the outer loop by the number of iteration of the inner loop. That’s almost never what you’re supposed to do. It’s a common mistake many students make because they try taking a shortcut. Shortcuts are nice, but don’t use them unless you’re sure of how to use it!! . With that out of the way, let’s talk about how you do these. It’s literally the same as single loops: . | Figure out the last value of $i$ as a function of $N$. Call this $g(N)$. | Figure out the increment function of $i$. | Figure out the work done per iteration as a function of $i$. Call this $f(i)$. | . Once you have the above, you simply write out the summation as: \\(f(i_1) + f(i_2) + f(i_3) + f(i_4) + ... + f(g(N))\\) You figure out what $i_1, i_2, i_3, i_4, …$ are by looking at the increment function for $i$. Then, plug in everything you know and then simplify the sum. Voila, that’s it. Here, $f(i)$ is the work of the inner loop as a function of $i$!! . So, let’s make steps for ourselves: . | Figure out the work done of the inner loop as a function of $i$. Call this $f(i)$. | Take this $f(i)$, and use it to find the work the outer loop does. Put $\\Theta$ on it. | . Note that $i$ is held fixed within the inner loop. So $N$ is to $i$ as $i$ is to $j$. Hopefully that makes sense. What I mean is that when we figure out the asymptotic runtime of the outer loop, we do it with respect to $N$ and $i$ is the variable that increments. When we figure out the work done in the inner loop, we do it with respect to $i$ and $j$ is the variable that increments. That’s it. Let’s see it in action with dLoop1 . Double Loop 1 . public void dLoop1(int N) { for (int i = 1; i &lt; N; i = i * 2) { for (int j = 0; j &lt; 10; j = j + 1) { System.out.println(i + j); } } } . Step 1 is to find the work done of the inner loop as a function of $i$. One neat little trick is to just isolate your attention to just look at the inner loop: . for (int j = 0; j &lt; 10; j = j + 1) { System.out.println(i + j); } . Do you notice anything peculiar about the inner loop? It has an $i$, but we just print it. So, the work done of the inner loop as a function of $i$ is … constant! Thus, $f(i) = 1$. Now, we see that it’s basically the same as loop3 above, and we get a final answer of $\\Theta(\\log N)$. Next one. Double Loop 2 . public void dLoop2(int N) { for (int i = 1; i &lt; N; i = i + 1) { for (int j = 1; j &lt; i; j = j * 2) { int[] x = new int[j]; } } } . A bit more complicated. Now $i$ is in the ending condition of the inner-loop. Remember, we just isolate ourselves to the inner loop. for (int j = 1; j &lt; i; j = j * 2) { int[] x = new int[j]; } . And we want to find the work done of this inner loop as a function of $i$. Not the asymptotic runtime of this inner loop, but the work done (i.e. not a $\\Theta$ bound). This is simply a single loop! We know how to do those! I’ll skip to the last step, but you should do all the steps to test your understanding and get more practice. You’ll get this summation: . \\[0 + 1 + 2 + 4 + 8 + ... + i\\] We know this summation is $\\Theta(i)$. But I said not to take a $\\Theta$ of this since we want the work done. This is where things get a little bit weird. We can pretend that the work done is $i$, so we can pretend that . \\[0 + 1 + 2 + 4 + 8 + ... + i\\] evaluates to $i$. It does not (clearly). But, since we’re doing asymptotics, we can do weird things like this. Bear with me for now. So $f(i) = i$. Now we do the single loop stuff and get this summation: . \\[1 + 2 + 3 + 4 + ... + N\\] You’ve seen this many times now. It’s simply $\\Theta(N^2)$. So dloop2 has an asymptotic runtime of $\\Theta(N^2)$. Back to the weirdness of earlier. We said that since $f(i) \\in \\Theta(i)$ that $f(i) = i$. This is not generally true, but for asymptotics we can just say this. If $f(i)$ was actually $10i$, we’d get the same answer. Go ahead, plug it in if you don’t believe me. So this is a shortcut. Double Loop 3 . Final one: . public void dLoop3(int N) { for (int i = 1; i &lt; N * N; i = i + 1) { for (int j = 1; j &lt; Math.sqrt(i); j = j + 1) { int[] x = new int[j]; } } } . Step 1 is to find the work done of the inner loop as a function of $i$. for (int j = 1; j &lt; Math.sqrt(i); j = j + 1) { int[] x = new int[j]; } . EDIT: in an earlier (wrong) version of this guide, the update was instead j = j * 2 which lead to a weird sum that you’re not expected to know how to simplify (I don’t know how to simplify it either). I’ll again skip the steps and go straight to the summation, but you should do it from the start. Practice makes better. \\[1 + 2 + 3 + 4 + ... + \\sqrt{i}\\] Which we know is $\\Theta((\\sqrt{i})^2) = \\Theta(i)$, and we’ll do the same shortcut to say that $f(i) = i$. Now, with the outer loop we’ll use this function $f(i) = i$ and we get the summation: . \\[1 + 2 + 3 + 4 + ... + N^2\\] This is an arithmetic summation, so we take the last term, square it, and throw a $\\Theta$ on it. Thus, dLoop3 has a running time that is $\\Theta((N^2)^2) = \\Theta(N^4)$. I hope you see that this is really not that bad. It’s just sticking to the rules. Summary of double loop Java methods . We learned a strategy for approaching these. | Figure out the work done in the inner loop as a function of $i$. Call this $f(i)$. | Use this $f(i)$ with the outer loop and the same exact process | . Unlike singe loops, you’ll likely not be able to look at a double loop and instantly tell what its runtime is. That’s OK. Whenever I do double loops I always write it out since it’s so easy to make. a mistake if you try to do it in your head. The process is tried and tested, so just practice using it and you’ll always get these ones right. You should now appreciate the way we did single loops. It made double loops so much easier. You could even do triple, quadruple, and more loops. But … that’s super annoying. I’m not saying it’s out of scope for any exam since it’s basically the same thing as a double loop, I’m just saying it’s annoying. You should try a few functions before moving onto the next section. Just like with single loops, try making your own functions with different $f, g$ functions and different ways to increment $i$. You’re more likely to run into summations that you don’t know how to simplify, and you should either ask a TA/friend/post on Ed or just leave it. That’s it for nested loop asymptotics questions. You are now certified to do loop problems and teach your friends too as that is the absolute best way to learn. Next up is recursion! . ",
    "url": "/resources/guides/asymptotics/#double-loops",
    
    "relUrl": "/resources/guides/asymptotics/#double-loops"
  },"329": {
    "doc": "Asymptotics",
    "title": "Asymptotics",
    "content": " ",
    "url": "/resources/guides/asymptotics/",
    
    "relUrl": "/resources/guides/asymptotics/"
  },"330": {
    "doc": "Lab 07: Hashmaps",
    "title": "FAQ",
    "content": "The FAQ for this lab can be found here. ",
    "url": "/labs/lab07/#faq",
    
    "relUrl": "/labs/lab07/#faq"
  },"331": {
    "doc": "Lab 07: Hashmaps",
    "title": "Introduction",
    "content": "In this lab, you’ll work on MyHashMap, a hashtable-based implementation of the Map61B interface. This will be very similar to Lab 06, except this time we’re building a HashMap rather than a TreeMap. After you’ve completed your implementation, you’ll compare the performance of your implementation to a list-based Map implementation ULLMap as well as the built-in Java HashMap class (which also uses a hash table). We’ll also compare the performance of MyHashMap when it uses different data structures as the buckets. ",
    "url": "/labs/lab07/#introduction",
    
    "relUrl": "/labs/lab07/#introduction"
  },"332": {
    "doc": "Lab 07: Hashmaps",
    "title": "MyHashMap",
    "content": "Overview . We’ve created a class MyHashMap in MyHashMap.java, with very minimal starter code. Your goal is to implement all of the methods in the Map61B interface from which MyHashMap inherits, except remove, keySet and iterator (optional for Lab 07). For these, feel free to throw an UnsupportedOperationException. Note that your code will not compile until you implement all the methods of Map61B. You can implement methods one at a time by writing the method signatures of all the required methods, but throwing UnsupportedOperationExceptions for the implementations until you get around to actually writing them. Refresher Animation . The following is a quick animation of how a hash table works. N refers to the number of items in the hash table, and M refers to the number of buckets. We use an object’s hashCode modulo’d (%) by the number of buckets to determine which bucket the object (represented by a shape) falls into. When the load factor is reached, we multiply the number of buckets by the resizing factor and rehash all of the items, modulo-ing them by the new number of buckets. For the video animation below, the hash function is arbitrary and outputs a random integer for each shape (the object) that is inputted. Credits to Meshan Khosla for this animation! . Skeleton Code . You might recall from lecture that when we build a hash table, we can choose a number of different data structures to be the buckets. The classic approach is to choose a LinkedList. But we can also choose ArrayLists, TreeSets, or even other crazier data structures like PriorityQueues or even other HashSets! . During this lab, we will try out hash tables with different data structures for each of the buckets, and see empirically if there is an asymptotic difference between using different data structures as hash table buckets. For this lab, we will be trying out LinkedList, ArrayList, HashSet, Stack, and ArrayDeque (unfortunately, no TreeSet or PriorityQueue like the diagram above shows due to excessive boilerplate, though you’re welcome to try it if you’d like). That’s a lot of classes! . You can imagine that if we implemented MyHashMap without much care, it would take a lot of effort with Find + Replace to be able to change out the bucket type with a different bucket type. For example, if we wanted to change all our ArrayList buckets to LinkedList buckets, we would have to Find + Replace for all occurrences of ArrayList and replace that with LinkedList. This is not ideal - for example, we may have a non-bucket component that relies on some ArrayList methods. We wouldn’t want to ruin our code by changing that to a LinkedList! . The purpose of the starter code is to have an easier way to try out different bucket types with MyHashMap. It accomplishes this through polymorphism and inheritance, which we learned about earlier this semester. It also makes use of factory methods and classes, which are utility code used to create objects. This is a common pattern when working with more advanced code, though the details are out-of-scope for 61B. MyHashMap implements the Map61B interface through use of a hash table. In the starter code, we give the instance variable private Collection&lt;Node&gt;[] buckets, which is the underlying data structure of the hash table. Let’s unpack what this code means: . | buckets is a private variable in the MyHashMap class. | . private Collection&lt;Node&gt;[] buckets; . | It is an array (or table) of Collection&lt;Node&gt; objects, where each Collection of Nodes represents a single bucket in the hash table | Node is a private (nested) helper class we give that stores a single key-value mapping. The starter code for this class should be straightforward to understand, and should not require any modification. | . protected class Node { K key; V value; Node(K k, V v) { key = k; value = v; } } . | java.util.Collection is an interface which most data structures inherit from, and it represents a group of objects. The Collection interface supports methods such as add, remove, and iterator. Many data structures in java.util implement Collection, including ArrayList, LinkedList, TreeSet, HashSet, PriorityQueue, and many others. Note that because these data structures implement Collection, we can assign them to a variable of static type Collection with polymorphism. | Therefore, our array of Collection&lt;Node&gt; objects can be instantiated by many different types of data structures, e.g. LinkedList&lt;Node&gt; or ArrayList&lt;Node&gt;. Make sure your buckets generalize to any Collection! See the below warning for how to do this. | When creating a new Collection&lt;Node&gt;[] to store in our buckets variable, be aware that in Java, you cannot create an array of parameterized type. Collection&lt;Node&gt; is a parameterized type, because we parameterize the Collection class with the Node class. Therefore, Java disallows new Collection&lt;Node&gt;[size], for any given size. If you try to do this, you will get a “Generic array creation” error. | . To get around this, you should instead create a new Collection[size], where size is the desired size. | The elements of a Collection[] can be a collection of any type, like a Collection&lt;Integer&gt; or a Collection&lt;Node&gt;. For our purposes, we will only add elements of type Collection&lt;Node&gt; to our Collection[]. | . The mechanism by which different implementations of the hash table implement different buckets is through a factory method protected Collection&lt;Node&gt; createBucket(), which simply returns a Collection. For MyHashMap.java, you can choose any data structure you’d like. For example, if you choose LinkedList, the body of createBucket would simply be: . protected Collection&lt;Node&gt; createBucket() { return new LinkedList&lt;&gt;(); } . Instead of creating new bucket data structures with the new operator, you must use the createBucket method instead. This might seem useless at first, but it allows our factory classes to override the createBucket method in order to provide different data structures as each of the buckets. In MyHashMap, you can just have this method return a new LinkedList or ArrayList. Implementation Requirements . You should implement the following constructors: . public MyHashMap(); public MyHashMap(int initialCapacity); public MyHashMap(int initialCapacity, double loadFactor); . Some additional requirements for MyHashMap are below: . | Your hash map should initially have a number of buckets equal to initialCapacity. You should increase the size of your MyHashMap when the load factor exceeds the maximum loadFactor threshold. Recall that the current load factor can be computed as loadFactor = N/M, where N is the number of elements in the map and M is the number of buckets. The load factor represents the amount of elements per bucket, on average. If initialCapacity and loadFactor aren’t given, you should set defaults initialCapacity = 16 and loadFactor = 0.75 (as Java’s built-in HashMap does). | You should handle collisions with separate chaining. You should not use any libraries other than the bucket classes, Collection, Iterator, Set, and HashSet. For more detail on how you should implement separate chaining, see the Skeleton Code section above. | Because we use a Collection&lt;Node&gt;[] for our buckets, when implementing MyHashMap, you are restricted to using methods that are specified by the Collection interface. When you are searching for a Node in a Collection, iterate over the Collection, and find the Node whose key is .equals() to the desired key. | If the same key is inserted more than once, the value should be updated each time (i.e., no Nodes should be added). You can assume null keys will never be inserted. | When resizing, make sure to multiplicatively (geometrically) resize, not additively (arithmetically) resize. You are not required to resize down. | MyHashMap operations should all be constant amortized time, assuming that the hashCode of any objects inserted spread things out nicely (recall: every Object in Java has its own hashCode() method). | . hashCode() can return a negative value! Java’s modulo operator % will return a negative value for negative inputs, but we need to send items to a bucket in the range $[0, M)$. There are a myriad of ways to handle this: . | (Recommended) You can use Math.floorMod() in place of % for the modulo operation. This has a non-negative range of values, similar to Python’s modulo. | If the resulting value after the % operation is negative, you can add the size of the array to it. | You can use the Math.abs() function to convert the negative value to a positive value. Note that $|x| \\, \\mathrm{mod} \\, m$, $|x \\, \\mathrm{mod} \\, m|$, and $x \\, \\mathrm{mod} \\, m$ are not equivalent in general! We’re just using the modulo operation here to make sure we have a valid index. We don’t necessarily care too much about the exact bucket the item goes into, because a good hash function should spread things out nicely over positive and negative numbers. | Option (3) but with a bitmask (don’t worry if you don’t know what this means). This is out-of-scope for 61B, but some of the resources do this, which is why we’ve put it here. | . Complete the MyHashMap class according to the specifications in Map61B and the guidelines above. Resources . You may find the following resources useful . | Lecture slides: . | Lecture 19 | Lecture 20 | . | . The following may contain antiquated code or use unfamiliar techniques, but should still be useful: . | ULLMap.java (provided), a working unordered linked list based Map61B implementation | . Testing . You can test your implementation using TestMyHashMap.java. Some of the tests are quite tricky and do weird stuff we haven’t learned in 61B. The comments will prove useful to see what the tests are actually doing. If you’ve correctly implemented generic Collection buckets, you should also be passing the tests in TestMyHashMapBuckets.java. The TestMyHashMapBuckets.java file simply calls methods in TestMyHashMap.java for each of the different map subclasses that implement a different bucket data structure. Make sure you’ve correctly implemented MyHashMap using the factory methods provided (i.e., createBucket) for TestHashMapBuckets.java to pass. If you choose to implement the additional remove, keySet, and iterator methods, we provide some tests in TestHashMapExtra.java. ",
    "url": "/labs/lab07/#myhashmap",
    
    "relUrl": "/labs/lab07/#myhashmap"
  },"333": {
    "doc": "Lab 07: Hashmaps",
    "title": "Speed Testing",
    "content": "There are two interactive speed tests provided in InsertRandomSpeedTest.java and InsertInOrderSpeedTest.java. Do not attempt to run these tests before you’ve completed MyHashMap. Once you’re ready, you can run the tests in IntelliJ. The InsertRandomSpeedTest class performs tests on element-insertion speed of your MyHashMap, ULLMap (provided), and Java’s built-in HashMap. It works by asking the user for an input size N, then generates N Strings of length 10 and inserts them into the maps as &lt;String, Integer&gt; pairs. Try it out and see how your data structure scales with N compared to the naive and industrial-strength implementations. Record your results in the provided file named src/results.txt. There is no standard format required for your results, and there is no required number of data points. We expect you to write at least a sentence or two with your observations, though. Now try running InsertInOrderSpeedTest, which behaves similarly to InsertRandomSpeedTest, except this time the Strings in &lt;String, Integer&gt; key-value pairs are inserted in lexicographically-increasing order. Your code should be in the rough ballpark of Java’s built in solution – say, within a factor of 10 or so. What this tells us is that state-of-the-art HashMaps are relatively easy to implement compared to state-of-the-art TreeMaps. Consider this relation with BSTMap/TreeMap and other data structures - are there certain instances where a Hashmap might be better? Discuss this with your peers, and add your answer to results.txt. ",
    "url": "/labs/lab07/#speed-testing",
    
    "relUrl": "/labs/lab07/#speed-testing"
  },"334": {
    "doc": "Lab 07: Hashmaps",
    "title": "Different Bucket Types",
    "content": "If you’ve correctly implemented generic Collection buckets, most of the work is done! We can directly compare the different data structures used to implement buckets. We provide speed/BucketsSpeedTest.java, which is an interactive test that queries the user for an integer L for the length of string to use on subsequent operations. Then, in a loop, it queries the user for an integer N, and runs a speed test on your MyHashMap using different types of buckets. Try it out and compare how the different implementations scale with N. Discuss your results with your peers, and record your responses in results.txt. You might notice that our implementation using HashSets as buckets searches for a Node by iterating over the entire data structure. But we know hash tables support more efficient lookups than that. Would our hash table speed up asymptotically if we were able to use a constant-time search over the HashSet? You do not need to implement anything new here, just discuss with your peers, and record your ideas in results.txt. Run the above speed tests in the speed directory and record your results in results.txt. ",
    "url": "/labs/lab07/#different-bucket-types",
    
    "relUrl": "/labs/lab07/#different-bucket-types"
  },"335": {
    "doc": "Lab 07: Hashmaps",
    "title": "Deliverables and Scoring",
    "content": "The lab is out of 5 points. There is one hidden test on Gradescope (that checks your results.txt). The rest of the tests are local. If you pass all the local tests and fill out the results.txt file sufficiently, you will get full credit on Gradescope. Each of the following is worth $\\frac{5}{11}$ points and corresponds to a unit test: . | Generics | clear | containsKey | get | size | put | Functionality | Resizing | Edge cases | Buckets (all of TestMyHashMapBuckets) | results.txt (not tested locally, but on the Gradescope autograder) | . As mentioned, if you are not implementing the optional exercises, throw an UnsupportedOperationException, like below: . throw new UnsupportedOperationException(); . ",
    "url": "/labs/lab07/#deliverables-and-scoring",
    
    "relUrl": "/labs/lab07/#deliverables-and-scoring"
  },"336": {
    "doc": "Lab 07: Hashmaps",
    "title": "Submission",
    "content": "Just as you did for the previous assignments, add, commit, then push your Lab 07 code to GitHub. Then, submit to Gradescope. ",
    "url": "/labs/lab07/#submission",
    
    "relUrl": "/labs/lab07/#submission"
  },"337": {
    "doc": "Lab 07: Hashmaps",
    "title": "Optional Exercises",
    "content": "These will not be graded, but you can still receive feedback with the given tests. Implement the methods remove(K key) and remove(K key, V value), in your MyHashMap class. For an extra challenge, implement keySet() and iterator() without using a second instance variable to store the set of keys. For remove, you should return null if the argument key does not exist in the MyHashMap. Otherwise, delete the key-value pair (key, value) and return the associated value. ",
    "url": "/labs/lab07/#optional-exercises",
    
    "relUrl": "/labs/lab07/#optional-exercises"
  },"338": {
    "doc": "Lab 07: Hashmaps",
    "title": "Lab 07: Hashmaps",
    "content": " ",
    "url": "/labs/lab07/",
    
    "relUrl": "/labs/lab07/"
  },"339": {
    "doc": "Debugging Guide",
    "title": "A. What is Debugging?",
    "content": "Whenever you write a lot of code, as you do in this class, you will come across errors of various types. Some of these errors, like syntax errors will be easy to catch because the compiler will let you know exactly where they are. Unfortunately, errors in the logic of your code are not so simple. They are less likely to be caught by the system because oftentimes your code compiles, it just returns the wrong value. IntelliJ (and most other IDEs) provide an array of tools that will help you trace through your code and see exactly where an inconsistency occurs. ",
    "url": "/resources/guides/debugging/#a-what-is-debugging",
    
    "relUrl": "/resources/guides/debugging/#a-what-is-debugging"
  },"340": {
    "doc": "Debugging Guide",
    "title": "B. Why Should I Learn to Debug?",
    "content": "The ability to debug is an extremely important part of being a programmer - no matter how clever you are, if it takes you a very long time to find out where your code is messing up, it will take you a very long time to finish a project. Every single programmer needs to know how to effectively debug. Within the scope of this class, learning to debug on your own will save you from having to wait in office hours for a TA to help you. With that in mind, this cheat sheet will give you all the tools you need to debug various types of errors! . ",
    "url": "/resources/guides/debugging/#b-why-should-i-learn-to-debug",
    
    "relUrl": "/resources/guides/debugging/#b-why-should-i-learn-to-debug"
  },"341": {
    "doc": "Debugging Guide",
    "title": "C. Can I Use Print Statements Instead?",
    "content": "Technically, yes. There are times when print statements are more efficient, such as when you only need to track one variable through a loop in a fairly isolated portion of code. You are free to debug at first with print statements and then use the debugger if you are still struggling to find the bug after 5 minutes. The caveat here is that if you come to office hours without having had stepped through your code, we will point you towards this guide instead of finding your bug. ",
    "url": "/resources/guides/debugging/#c-can-i-use-print-statements-instead",
    
    "relUrl": "/resources/guides/debugging/#c-can-i-use-print-statements-instead"
  },"342": {
    "doc": "Debugging Guide",
    "title": "D. Understanding The Stack Trace",
    "content": ". When you see an exception like this, this means your computer caught a mistake while it was running your program. To be helpful, before it exits out, your computer tells you all the information you need to know to find out where the error happened. The first line follows this format: . [Which thread errored] [What error occurred] [Any more information about the error] . What we want to focus on is the last two segments. In this case, that looks like: . Exception in thread “main” java.lang.ArrayIndexOutOfBoundException: Index 5 out of bounds for length 5 . This gives you two pieces of information: . | The error was an Array Index Out of Bounds Exception. | We tried to access item 5 in an array of length 5. | . This tells you what happened, but not where it happened. That’s where the stack trace is useful. The three (or however many) lines under the header describe where the computer was in the code when it errored. The top trace line is what the computer was executing when it crashed and the list describes what functions called each other in reverse order. Here, we see that our main function called make2DArray on line 6. Then, make2DArray called makeArray on line 14. Finally, the code errored on line 23 within makeArray. Clicking on the blue links will jump you to that part of the code, so you don’t have to spend time scrolling. Knowing this, you can start debugging the specific sequence of calls that caused the error. ",
    "url": "/resources/guides/debugging/#d-understanding-the-stack-trace",
    
    "relUrl": "/resources/guides/debugging/#d-understanding-the-stack-trace"
  },"343": {
    "doc": "Debugging Guide",
    "title": "E. What Does This Error Mean",
    "content": "Perhaps you have read the stack trace, but you don’t understand what the error means. For the most part, Java errors are named such that they are understandable without prior knowledge, but in case you come across something you don’t recognize, here’s a cheat sheet: . | Error | What it Usually Means | . | ___ expected | The parser can’t make sense of the line because there’s a character that it doesn’t understand or a missing character. | . | cannot find ___ | You are calling a method or class that the computer doesn’t have access to. | . | Illegal start of expression | You are missing a closing brace somewhere before this line. | . | Illegal start of type | You wrote code outside of a function body that shouldn’t be there. | . | Incompatible types – expected ___ | You are trying to assign something to a variable that is not the same type. | . | Missing method body | Your function declaration line has a semicolon. | . | Missing return statement | You should be returning something in this method but you aren’t. | . | Non-static method cannot be called from a static context | You called a method on the class itself instead of an instance of the class. | . | *Program Freezes* | You’re likely stuck in some sort of logical loop. | . ",
    "url": "/resources/guides/debugging/#e-what-does-this-error-mean",
    
    "relUrl": "/resources/guides/debugging/#e-what-does-this-error-mean"
  },"344": {
    "doc": "Debugging Guide",
    "title": "F. Stepping Through With the Debugger",
    "content": "Running Code Through IntelliJ . To use the debugger, you need to run your code through IntelliJ instead of through the console. | From the main menu, go to Run &gt; Edit Configurations. | Enter any arguments for your program into the field marked Program Arguments. These are the arguments you would pass into the command line if you were to run it in the console. | To run the debugger, either click Run &gt; Debug or right click on the green | arrow next to the function and select Debug. | . Setting Breakpoints . To examine how the code operates at runtime, we set breakpoints. Breakpoints pause your code at the line they are set so that you can see the state of all the variables around where an error occurred. To set a breakpoint, click on the space between a line number and the code: . This kind of breakpoint just pauses the code the first time your computer comes across this line. If you are in a situation where the error only occurs when a variable is set to a certain value, you can set a conditional breakpoint. To do this, set a normal breakpoint and then right click the red circle that appears. Now, you can set the breakpoint condition in the given field. Your condition can be any True/False statement that would compile at this point in the code. This means you have to use variables that already exist in the current frame, but they don’t necessarily have to be referenced in the current line. Stepping Through Code . Top Toolbar . To step through code, you need to understand the toolbar at the top of the debug view. To see their names, hover over the icons. From left to right, they are: . | Button | What It Does | . | Step Over | This allows you to execute the current line of code and move on to the next line in this frame. | . | Step Into | This allows you to step into any function calls in the current line given the functions are yours. | . | Force Step Into | This allows you to step into any function calls in the current line even if they are from some third party library. You should not need to do this. | . | Step Out | If you are in a function or loop, this allows you to skip the rest of the frame, essentially bringing you out to wherever this function was called. | . | Drop Frame | This allows you to reset the current frame by returning to the previous frame where it was called. This is useful if you missed the part of a function you were trying to see by essentially letting you rewind time. | . | Run to Cursor | If you are running in debug mode, you can quickly jump to areas of interest in the code by clicking run to cursor. This will act as if there is a temporary breakpoint set wherever your cursor is. | . Left Toolbar . There is also a second toolbar along the left side of the debug menu. This menu is for more general controls. From top to bottom they are: . | Button | What It Does | . | Rerun | Rerun the debugger with the same settings as the current run. | . | Resume Program | Continues the program until it hits the next breakpoint. | . | Pause Program | If your program seems like it’s freezing, run it in debug mode with no breakpoints and click pause when your program freezes. It will most likely pause within whatever logical loop is causing the freeze. | . | Stop Program | If you’re done debugging, you can click this to end the program early. | . | View Breakpoints | This opens up a window that displays all your current breakpoints. Here, you can edit their settings and toggle them on/off. | . | Mute Breakpoints | Toggles all breakpoints on/off. | . Analyzing the Current State . There are two places where you can get information about the state of your program while in debug mode. Debug View . Firstly, in the debug view there are two columns: . | The first column shows the stack trace up until this point. Each line describes a frame, in order of narrowest to widest. The name of the frame is first and refers to the name of the function called. Then, we see the line number we are currently on for that frame. In this example, make2DArray called makeArray on line 14, so it remains on that line until makeArray finishes running. | The second column lists all the variables in the current frame, which includes any global variables. You can’t see variables that don’t exist in the current frame. Here you can see what value they hold as of the line you are on. | . If you want more information than just the values of each variable, there’s a button called evaluate expression in the toolbar. Pressing this allows you to essentially insert lines on the fly to the program. For instance, here we have inserted the expression arr[i] = 1000 and clicked evaluate, which is reflected in the Result Panel and in the Variables Panel. Essentially, it is as if we inserted the line arr[i] = 1000 before arr[i] = makeItem(i). A good use of this functionality is to ensure that two objects in your code are equal (rather than being two instances of the same class) by evaluating a == b which can be difficult to tell from the Variables Panel alone. This has the added benefit of not changing any values in the code, so you don’t have to worry about accidentally modifying the behavior you trying to observe. Code View . The second place to get information is on the code itself. In debug mode, IntelliJ shows the value of every variable referenced in each line of code next to the line. In addition, it highlights the value of whatever variable was most recently changed. ",
    "url": "/resources/guides/debugging/#f-stepping-through-with-the-debugger",
    
    "relUrl": "/resources/guides/debugging/#f-stepping-through-with-the-debugger"
  },"345": {
    "doc": "Debugging Guide",
    "title": "G. More Resources",
    "content": "If you want more details on using the IntelliJ debugger, JetBrains has some guides: . | Debugging Your First Application . | Setting Breakpoints . | Stepping Through a Program . | . ",
    "url": "/resources/guides/debugging/#g-more-resources",
    
    "relUrl": "/resources/guides/debugging/#g-more-resources"
  },"346": {
    "doc": "Debugging Guide",
    "title": "Debugging Guide",
    "content": " ",
    "url": "/resources/guides/debugging/",
    
    "relUrl": "/resources/guides/debugging/"
  },"347": {
    "doc": "Lab 10: Tetris (Optional)",
    "title": "FAQ",
    "content": "Each assignment will have an FAQ linked at the top. You can also access it by adding “/faq” to the end of the URL. The FAQ for Lab 10 is located here. ",
    "url": "/labs/lab10/#faq",
    
    "relUrl": "/labs/lab10/#faq"
  },"348": {
    "doc": "Lab 10: Tetris (Optional)",
    "title": "Introduction",
    "content": "This lab will help you get started with the second phase of the project: Interactivity. You are not expected to be done with Phase 1 at the time you’re working on this lab. If you have not started already though, we highly recommend that you do! . For this lab, you should consider how some ideas (or implementations!) may translate over to Project 3. It will also help you gain more familiarity with useful tools necessary for the project. This lab has a lot of helper methods - you do not need to know what every single method does, but please be aware that you will have to call on some of them throughout the lab. You will also end up using methods from a library. Please make sure to read through the files to understand what you’re working with! As a reminder, the coordinates (0, 0) represent the bottom left of the board. ",
    "url": "/labs/lab10/#introduction",
    
    "relUrl": "/labs/lab10/#introduction"
  },"349": {
    "doc": "Lab 10: Tetris (Optional)",
    "title": "Optional",
    "content": "Please note that this lab is optional but highly recommended to help you complete the project! The unofficial due date is 4/11 to keep you on track, however feel free to use more time to complete the lab as needed. As follows, the lab is worth 0 points. There will be lab sections for this week. ",
    "url": "/labs/lab10/#optional",
    
    "relUrl": "/labs/lab10/#optional"
  },"350": {
    "doc": "Lab 10: Tetris (Optional)",
    "title": "Tetris",
    "content": "In preparation for making your game, we will be constructing the game Tetris! If you’re not too familiar with Tetris, it’s a puzzle video game where players “complete” lines while differently shaped pieces (called tetrominoes) spawn and descend on the board. Players can move and rotate these pieces as needed to complete lines - if there are any lines completed, they disappear and the player gains points. The game ends when the uncleared lines reach the top of the board. All of your implementation will be in Tetris.java. We have also provided three other files: . | Tetromino.java: contains the board pieces that you’ll be using | Movement.java: contains logic for rotating and moving the pieces | BagRandomizer.java: helps randomize the pieces that are spawned | . You won’t be writing anything in those three files directly, but these classes are used in Tetris.java (or will be). We’ll also be working with a library, StdDraw, to help implement some features, such as user input. You will find this library very useful for Project 3. While we want to have a working game of Tetris.java, we should break it down into smaller steps instead of tackling it all at once. The game can be loosely broken down into the following steps: . | Create the game window. | Randomly spawn a piece for the player to control and keep a display of the current score. | Update the movements of the piece based on the player’s input. | Once the piece can no longer move, check if any lines need to be cleared, update the score and respawn a new piece. | Repeat steps 2-4 until the game is over (when the uncleared lines reach the top). | . In general, good coding practice is to first build small procedures with explicit purposes and then compose more complex methods using the basic ones. If you take a look at Tetris.java, you’ll note that it contains many helper methods to help build a more complex game mechanism - breaking the game logic into individual methods is highly recommended for Project 3. It will give you a clear path forward in development and will be easier to break down your logic for unit testing. By the end of the lab, you’ll have something that functions like the below: . If you would like to play the game yourself, you can find it here. ",
    "url": "/labs/lab10/#tetris",
    
    "relUrl": "/labs/lab10/#tetris"
  },"351": {
    "doc": "Lab 10: Tetris (Optional)",
    "title": "StdDraw",
    "content": "As mentioned, we’ll be working with the library StdDraw. StdDraw is a provided library that gives basic capabilities to create drawings in your program as well as grab user input. Please take a look at the API before getting started as you will find some of the methods useful not only for this lab, but for Project 3. ",
    "url": "/labs/lab10/#stddraw",
    
    "relUrl": "/labs/lab10/#stddraw"
  },"352": {
    "doc": "Lab 10: Tetris (Optional)",
    "title": "Running the Game",
    "content": "To run the game, run the main method in Tetris.java. Currently, this should output nothing but a black box. As you implement more methods, you can use this method to verify the correctness of your game logic. ",
    "url": "/labs/lab10/#running-the-game",
    
    "relUrl": "/labs/lab10/#running-the-game"
  },"353": {
    "doc": "Lab 10: Tetris (Optional)",
    "title": "Methods Overview",
    "content": "Since all of your implementation will be in Tetris.java, there are a couple of methods you’ll have to fill out to get your game working. As mentioned earlier, please make sure to read through Tetris.java, Tetromino.java, and Movement.java to gain familiarity with the helper methods in this lab. While you don’t necessarily need to understand how every helper method works (abstraction!), it is likely that some of them will be helpful for your implementation, so please read through them carefully so that you are aware of what is available to you. updateBoard . This method updates the board based on user input. The first step is to check if the user has typed in anything and grab the input if the user has. There will be some methods from the StdDraw API that will be useful for implementing this part of the lab. Consider looking at hasNextKeyTyped and nextKeyTyped. The next step is to implement the actions that are taken from specific keys. The user is able to input 5 keys: . | a: move the current piece towards the left by one tile | s: move the current piece downwards by one tile | d: move the current piece towards the right by one tile | q: rotate the current piece to the left 90 degrees | w: rotate the current piece to the right 90 degrees | . We recommend that you look at some of the provided helper methods in Movement.java to see which ones you can call on to move a piece or rotate a piece (you should not have to implement any of the movement logic yourself, but instead, rely on understanding what the helper methods do). A Movement instance has also been provided for you to use. Fill out the method according to the description above. As a reminder, make sure to read through Movement.java and the StdDraw API! . incrementScore . This is a helper method to help update your score. The player’s score increases based on the number of lines that have been cleared from a single move, if any are cleared. There are four cases that this can be broken down into, as listed below: . | 1: 100 points | 2: 300 points | 3: 500 points | 4: 800 points | . Fill out incrementScore so the player’s score increases as described above. clearLines . Whenever a line is completed in Tetris, we want to update our score and clear the line. This method will help check if a row or multiple rows have been horizontally filled after a piece is placed. Consider the following: . | Since you don’t know exactly which row is completed, if there are any, we’ll want to check for the entire board. | How do you know when a row is complete? Specifically, when do we know when it’s not complete? | . | Once you find a row that is completed, that row needs to be cleared. | When you clear a row, all of the rows above it need to be shifted down. | For each row that is cleared, keep track of it in a variable (linesCleared). | . | At the very end, we want to update our score based on the number of lines cleared. Consider using a helper method that you’ve implemented to do this. | . Fill out clearLines to check for the amount of lines that are cleared and update the board accordingly. The board should be passed in as an argument, so please make sure to use the argument tiles (it might affect the autograder if you don’t!). runGame . This is where the main game logic takes place. Comments have been left in the skeleton code to help you get started. A couple of things to note: . | You’ll need to ensure that the game does not exit or stop until the game is over (hint: how do you make sure this happens continuously?). | If the current tetromino is unable to move down or can no longer move from its current position, it is set to null. The logic for setting it to null has been taken care of for you and you do not need to work with it. | Once a piece has been placed and can no longer move, make sure to check if any lines need to be cleared and spawn another piece. | . | Make sure to update the board based on the user input and then render those changes. | . Here are some relevant helper methods you may use, alongside the ones you’ve already implemented: . | spawnPiece: spawns a piece on the board and sets the current Tetromino piece to a randomly chosen piece | isGameOver: checks for if the game is over | clearLines: checks for any lines that need to be cleared and updates the score based on the number of lines cleared . | Make sure to pass the board into clearLines | . | updateBoard: checks for the player movement and updates the board based on the user’s input | renderBoard: renders the state of the board (called on after user input and clearing lines) | . Fill out runGame. renderScore . At this point, if you run the game, you’ll notice that something is missing. The score! That’s because we haven’t yet displayed it. Fill out the method renderScore so that the score displays, and you can use this to verify if your score is updated correctly when lines are completed in the game. Here are the steps: . | Make sure to set the color of the text to white (rgb value of (255, 255, 255)) so the score is visible against a black background. | The score should appear at position x = 7, y = 19. | Make sure to render the score once it’s drawn! | . Here are some useful methods from the StdDraw library that you might find helpful (you might not use all of them, but they are here for reference): . | StdDraw.setFont | StdDraw.clear | StdDraw.text | StdDraw.setPenColor | StdDraw.show | StdDraw.pause | . Fill out renderScore and run your game to check that the score shows up! . ",
    "url": "/labs/lab10/#methods-overview",
    
    "relUrl": "/labs/lab10/#methods-overview"
  },"354": {
    "doc": "Lab 10: Tetris (Optional)",
    "title": "Submission and Grading",
    "content": "This lab is worth 0 points. The Gradescope autograder is not comprehensive. However, you can make sure your game works by checking the following: . | Pieces can be moved left, down, and right with the a, s and d keys respectively and rotated left and right with q and w respectively. | Other keys should not do anything (i.e. if we press on h, that should not affect the game board) | The score renders throughout the game and does not disappear at any point. | The pieces do not fall through when they are stacked on top of each other or reach the ground/bottom. | . To reiterate, here is a brief summary of the methods to implement: . | updateBoard: updates the board based on user input | incrementScore: updates the score based on number of lines cleared | clearLines: clears the rows if they’re completed | runGame: where the game logic takes place to run the game | renderScore: displays the score | . ",
    "url": "/labs/lab10/#submission-and-grading",
    
    "relUrl": "/labs/lab10/#submission-and-grading"
  },"355": {
    "doc": "Lab 10: Tetris (Optional)",
    "title": "Credits",
    "content": "4 TAs were harmed in the creation of this lab (Noah Adhikari, Erik Nelson, Omar Yu and Jasmine Lin). ",
    "url": "/labs/lab10/#credits",
    
    "relUrl": "/labs/lab10/#credits"
  },"356": {
    "doc": "Lab 10: Tetris (Optional)",
    "title": "Lab 10: Tetris (Optional)",
    "content": " ",
    "url": "/labs/lab10/",
    
    "relUrl": "/labs/lab10/"
  },"357": {
    "doc": "Ed Policies and Guidelines",
    "title": "Introduction",
    "content": "We use Ed Discussions as our course forum. If you’re new to Ed, please read the Ed guide, which should get you familiar with this platform. This post includes a collection of guidelines for etiquette on Ed, that we ask you to read entirely so we can all have an enjoyable experience this semester! . ",
    "url": "/resources/guides/ed/#introduction",
    
    "relUrl": "/resources/guides/ed/#introduction"
  },"358": {
    "doc": "Ed Policies and Guidelines",
    "title": "Keeping Ed Inclusive",
    "content": "Any content on public forums like Ed that targets, excludes, disrespects or discriminates against a certain individual or community will be removed and the person responsible for the content will face repercussions. Please aim to keep the climate inclusive for everyone. If at any point you have felt targeted, excluded, disrespected, or discriminated against by a student or someone from our course staff, please fill out our Incident Report form to report it. If you would rather not speak to someone from staff, there are several campus offices you may report to instead (https://diversity.berkeley.edu/report-incident). ",
    "url": "/resources/guides/ed/#keeping-ed-inclusive",
    
    "relUrl": "/resources/guides/ed/#keeping-ed-inclusive"
  },"359": {
    "doc": "Ed Policies and Guidelines",
    "title": "Overall Requests",
    "content": "We don’t want to start this with a list of what not to do, but please don’t: . Post unhelpful follow-ups Follow-ups like “+1” and “me too” contribute nothing but cause annoying emails to be sent to everyone following the post. These may be deleted. You can use the heart icon near a post to express “+1”, gratitude, etc. Use annoying or misrepresentative titles These are titles in all caps or with an exorbitant amount of punctuation just to capture the attention of users. Please keep titles (and content in general) descriptive and professional. Post off-topic or speculative content or trolling Content that is unrelated to the course and/or non-educational does not belong on Ed. Content that is speculative, drama mongering, or intentionally misleading prevents effective communication from course staff and other students. Say “nevermind”, or “fixed” if you figure out the answer to your own question The forum is a wonderful source of collective knowledge. Answering your own question is valid, and contributes to this collective knowledge. Everyone hates when somebody replies to their own question with something like “Nevermind, I got it!”, or when they don’t answer at all. Other students can’t learn from that if they happen to have the same problem. Instead, add an answer or comment with your solution! ",
    "url": "/resources/guides/ed/#overall-requests",
    
    "relUrl": "/resources/guides/ed/#overall-requests"
  },"360": {
    "doc": "Ed Policies and Guidelines",
    "title": "Why Use Forums?",
    "content": "Recent research from Duke/NC State/UNC/UF has shown that student participation on course forums, like Piazza and Ed, is most beneficial when students ask constructive questions that reflect their reasoning or attempts to solve a problem. By creating and asking these constructive questions, students are practicing their metacognitive skills, or how they think about approaching problems and learning. Forums are also an effective way of seeking asynchronous help. Office hours and lab aren’t always happening, and it isn’t always possible to speak synchronously with a TA. Instead, you can ask a question on Ed, and continue working on other things while you wait for a response. Additionally, forums and other asynchronous methods of asking for help are a widely used tool outside in many real-world contexts as well, from StackOverflow to internal company tickets. ",
    "url": "/resources/guides/ed/#why-use-forums",
    
    "relUrl": "/resources/guides/ed/#why-use-forums"
  },"361": {
    "doc": "Ed Policies and Guidelines",
    "title": "CS 61B Forum Policies",
    "content": "Many of the benefits of forums only apply if we all use it appropriately and effectively, and put in the work to maintain its quality. Categories . We have many students in CS 61B, and will almost certainly have many posts. To organize these posts, we use Ed categories. To make a post or ask a question on Ed, you must select an appropriate category. An overview of the categories is as follows: . Logistics General questions about what’s happening in the course. Lectures Questions about each lecture’s content. This category has a template asking for the lecture nubmers. Projects, Labs, Homeworks Questions and requests for debugging help on the assignments. These categoies have subcategories for each assignment in. Each subcategory also has subsubcategories, for distinguishing between private debugging questions (Gitbugs) and various kinds of public questions. For example, Projects - Project 1 - Gitbugs, and Projects - Project 1 - Conceptual (Circular Buffer). Discussions Questions and conceptual clarifications on discussion worksheets. This category has a subcategory for each week. Exams Questions about exam logistics, past exams, and anything related to exams. As we get closer to the exam, we will add additional categories for asking questions about previous exams. Miscellaneous Any questions about the course that doesn’t fit into the above categories can go in here. Social Looking to form a study group or hold a study session? Post here. External Announcements Any postings from external groups not affiliated with CS 61B will be posted in this category. Posts in this category must be approved by course staff. How to Ask, and How to Not Ask Questions . Asking for help on Ed is unfortunately slower, as we can’t spend all our time on the forum. Before you ask for help, you should try to answer your question yourself! We also want you to learn how to help yourself, which in some cases can be slower than asking staff, but will be more beneficial in the long run. Some resources that can help you do that are: . Previous questions on Ed. You can search within a category with Ed’s search, so that you don’t have to look through everything. Official course materials The assignment spec is a great source of information. Additionally, each assignment will have an FAQ linked from the top of the page. The FAQ will be updated while the assignment runs, so check back often! Course staff will also create several supplemental materials for assignments while students work on them, as we find where students are struggling. Google or a search engine of your choice. While searching Google might not seem like “independent programming”, professional programmers often search the web for solutions to problems similar to the one they are trying to solve. Learning good search techniques now will pay off later in the semester and into your careers. An exception to this is searching for solution code. Don’t do that. However, you shouldn’t spend hours on the same problem, and should ask for help, possibly on the forum. When you do ask for help on Ed, here are some things that you can do to make sure that the response you receive is more likely to resolve your question. Explain what your problem is, and what you think will help you proceed. Course staff are not mind-readers. We won’t magically know what’s wrong, or what you want answered. If your question doesn’t contain enough information for us to be able to answer, or doesn’t show us what you’ve tried so far, we will ask. You’ll get a slower answer overall, but you’ll also learn how you can improve your future questions to get a quicker response. Similarly, there are some things that you should not do to get a response: . Asking for “a hint” or “the answer” We don’t know what kind of hint you want or what you are trying to accomplish. We don’t even know if you’ve worked on the problem, or if you saw the error and immediately asked. We will not give the answer, and will instead ask a follow-up question to clarify what you are asking for. Saying that “I don’t understand anything” It’s very hard, often impossible, to give an answer to this. Instead, you should try to figure out a starting point for what you don’t understand. If you can’t get started, that’s still a valid question to ask – and is very different from “anything”. Some material here drawn from Adam Blank’s guide on “How to Ask For Help”. Conceptual Posts . Often, you’ll have a question about a conceptual idea from lab or a project, or a problem on a discussion, past exam, or outside resource. Here are some guidelines that you should follow to get a helpful answer more quickly: . Don’t ask if your solution “is correct” Instead, explain why you think your solution is correct, and point out any pieces that you’re not sure about. Reconstructing your argument is a lot of work for staff to try to go through, so explaining your train of thought to us helps you get a better answer and address any misconceptions you may have. Private Debugging Help, or Gitbugs . Sometimes, you may run into a problem where you need to show course staff your code. However, per our collaboration policy, you may not post code publicly, including on public Ed posts. Instead, you can use the Gitbugs category for each assignment to make a private debugging post. Here are some guidelines that apply to asking private debugging questions specifically: . Link your GitHub repo and push. Sometimes (but not always), we will look at your code. This ensures that we can easily look at the most up-to-date version. Provide a screenshot of the section of your code you have a question about. We will require that you provide a screenshot, so that we know what section of code you’re looking at. When describing your bug, be specific. Descriptions like “everything”, “it isn’t working”, “it fails the autograder”, “I don’t know”, etc. are not specific. We cannot help without knowing what’s wrong. At a minimum, you should tell us what test is failing, or what error you’re seeing, though this alone doesn’t guarantee that the first response will be helpful. If you can identify a smaller piece of code, such as a single method or a few lines, that are not behaving as you expect, that’s wonderful – tell us what you’ve found, and what you’re confused about! . We expect that you’ve tried to debug. Tell us what you’ve learned. This goes hand-in-hand with the above guideline! If we can’t tell that you’ve tried to debug, we will not debug for you, and instead ask what you’ve tried. This can be print debugging, or using the IntelliJ debugger. Screenshots can be very helpful here, as long as you explain what we’re looking at! ",
    "url": "/resources/guides/ed/#cs-61b-forum-policies",
    
    "relUrl": "/resources/guides/ed/#cs-61b-forum-policies"
  },"362": {
    "doc": "Ed Policies and Guidelines",
    "title": "Ed Tips and Tricks",
    "content": "Change your email settings to receive fewer emails. In the upper right corner, click on your avatar, then “Settings”, and then hit “Notifications” to adjust the number of emails you receive from Ed. Announcement emails will always reach you. Follow posts you want to know more about. If you see an ongoing question you’d like to keep track of, you can either: . | Click the “Watch” option at the top right of the question to receive email updates, or | “Star” the post at the top right of the question to keep it pinned on your Ed. | . Refer to other questions, answers, and comments Using #N (for example, #1 or #1c) is a clean way to refer to other threads. You can use this to provide an answer to a repeated question, or to point to things that you’ve tried but haven’t worked. Make code (and stack traces) readable. Use the runnable code button in the editor toolbar so that your code looks nice. Syntax-highlighted code is much easier to read than code as text. If you have a question about a personal matter that you don’t want other students to see, please make a private post. Private posts are only seen by the course staff. If you want only the head TAs and Josh to see your question, please email cs61b [at] berkeley.edu . ",
    "url": "/resources/guides/ed/#ed-tips-and-tricks",
    
    "relUrl": "/resources/guides/ed/#ed-tips-and-tricks"
  },"363": {
    "doc": "Ed Policies and Guidelines",
    "title": "Ed Policies and Guidelines",
    "content": " ",
    "url": "/resources/guides/ed/",
    
    "relUrl": "/resources/guides/ed/"
  },"364": {
    "doc": "Assignment Workflow",
    "title": "Assignment Workflow",
    "content": "This guide describes how to set up an assignment in CS 61B. ",
    "url": "/resources/guides/assignment-workflow/",
    
    "relUrl": "/resources/guides/assignment-workflow/"
  },"365": {
    "doc": "Assignment Workflow",
    "title": "Getting the Skeleton",
    "content": "A video demo of this guide is available at this link. The skeleton remote repository contains the skeleton code for all assignments. Whenever a new assignment is released, or if we need to update an assignment, you will pull from the skeleton. First ensure that you are in your sp25-s*** repository directory, then: . git pull skeleton main . This fetches all remote files from the repo named skeleton (which is located at https://github.com/Berkeley-CS61B/skeleton-sp25.git) and copies them into your current folder. If you get an error similar to fatal: refusing to merge unrelated histories, you can fix this each time by using . git pull --no-rebase --allow-unrelated-histories skeleton main . (If you’re working on Lab 1, go back to the lab spec at this point.) . ",
    "url": "/resources/guides/assignment-workflow/#getting-the-skeleton",
    
    "relUrl": "/resources/guides/assignment-workflow/#getting-the-skeleton"
  },"366": {
    "doc": "Assignment Workflow",
    "title": "Opening in IntelliJ",
    "content": "The following instructions apply for every assignment. Each time after pulling from skeleton to get new lab or project files, you will need to run through the following steps again. | Start up IntelliJ. If you have no projects open, click the “Open” button. If you have a project currently open, navigate to “File –&gt; Open”. | Find and choose the directory of your current assignment. For example, for Lab 1, you would select the lab01 directory inside your sp25-s*** repo. | Navigate to the “File -&gt; Project Structure” menu, and make sure you are in the Project tab. Set your project SDK to your installed Java version. If 17 or higher isn’t available in the dropdown, make sure you downloaded and installed Java completely. | Still in the Project tab, set the Project Language Level to “17 - Sealed types, always-strict floating-point semantics”. At this point, the Project tab should look something like this: . | The SDK is set to Java 17 or higher | The Language level is at least 17, and at most the SDK. | The Compiler output is filled in, and is set to the assignment directory, followed by out | . | Still in Project Structure, go to the Libraries tab. Click the “+ -&gt; Java” button, then navigate to library-sp25, select the folder, and click “Ok”. | Click “Ok” to apply your settings and leave Project Structure. | . At this point, if things have been configured correctly: . | Each Java file should have a blue circle next to its name. | When you open any file, none of the code should be highlighted in red. | . ",
    "url": "/resources/guides/assignment-workflow/#opening-in-intellij",
    
    "relUrl": "/resources/guides/assignment-workflow/#opening-in-intellij"
  },"367": {
    "doc": "Assignment Workflow",
    "title": "Submitting to Gradescope",
    "content": ". | Add your assignment directory using git add. For example, for Lab 1, from your repo root (sp25-***) you would use git add lab01. From the assignment directory, you could use git add .. | Commit the files using git commit -m \"&lt;commit message here&gt;\". The commit message is required. For example, git commit -m \"Finished Lab 1\". | Push your code to your remote repository with git push origin main. | Open the assignment on Gradescope. Select Github, then your sp25-s*** repository and the main branch, then submit your assignment. You will receive a confirmation email, and the autograder will run automatically. | . Gradescope will use the latest version of your code from Github. If you think that Gradescope isn’t grading the right code, check that you have added, committed, and pushed with git status. If you’ve gotten yourself into a situation where you’re unable to push for some reason, see Git WTFS. ",
    "url": "/resources/guides/assignment-workflow/#submitting-to-gradescope",
    
    "relUrl": "/resources/guides/assignment-workflow/#submitting-to-gradescope"
  },"368": {
    "doc": "Style Guide",
    "title": "Whitespace",
    "content": ". | Each file must end with a newline sequence. For example, in the screenshot below, the blank Line 8 is necessary. | Files may not contain horizontal tab characters. Use blanks (spaces) only for indentation. | Do NOT put whitespace: . | Around the &lt; and &gt; within a generic type designation (List&lt;Integer&gt;, not List &lt;Integer&gt;, or List&lt; Integer &gt;). | After the prefix operators !, --, ++, unary -, or unary +. | Before the tokens ; or the suffix operators -- and ++. | After ( or before ). | After . | . | DO put whitespace: . | After ;, ,, or type casts (e.g., (String) x, not (String)x). | Around binary operators (e.g., *, +) and comparison operators. | Around assignment operators (e.g., =, +=). | Around ? and : in the ternary conditional operator (x &gt; 0 ? x : -x). | Around the keywords assert, catch, do, else, finally, for, if, return, try, and while. | . | In general, if you need to use multiple lines for a single statement, break (insert newlines in) lines before an operator, as in ... + 20 * X + Y; . | Do not separate a method name from the ( in a method call with blanks. However, you may separate them with a newline followed by blanks (for indentation) on long lines. | . Indentation . | The basic indentation step is 4 spaces. | Indent code by the basic indentation step for each block level (blocks are generally enclosed in { and }), as in . if (x &gt; 0) { r = -x; } else { r = x; } . | Indent case labels an indent past their enclosing switch, as in . switch (op) { case '+': addOpnds(x, y); break; default: ERROR(); } . | Indent continued lines by the basic indentation step. | . ",
    "url": "/resources/guides/style/#whitespace",
    
    "relUrl": "/resources/guides/style/#whitespace"
  },"369": {
    "doc": "Style Guide",
    "title": "Braces",
    "content": ". | Use { } braces around the statements of all if, while, do, and ‘for’ statements. | Place a } brace on the same line as a following else, finally, or catch, as in . if (x &gt; 0) { y = -x; } else { y = x; } . | Put the { that opens a block at the end of a line. Generally, it goes at the end of the if, for, while, switch, do, method header, or class header that contains it. If line length forces it to the next line, do not indent it, and put it alone on the line. | . ",
    "url": "/resources/guides/style/#braces",
    
    "relUrl": "/resources/guides/style/#braces"
  },"370": {
    "doc": "Style Guide",
    "title": "Comments",
    "content": ". | Methods should have javadoc comments explaining the behavior, parameters (using @param tags or otherwise), and return type. | Methods that return non-void values must describe them in their Javadoc comment either with a “@return” tag or in a phrase in running text that contains the word “return”, “returning”, or “returns”. | Each Javadoc comment must start with a properly formed sentence, starting with a capital letter and ending with a period. | . ",
    "url": "/resources/guides/style/#comments",
    
    "relUrl": "/resources/guides/style/#comments"
  },"371": {
    "doc": "Style Guide",
    "title": "Names",
    "content": ". | Names of static final constants must be in all capitals (e.g., RED, DEFAULT_NAME). | Names of parameters, local variables, and methods must start with a lower-case letter, or consist of a single, upper-case letter. | Names of types (classes), including type parameters, must start with a capital letter. | Names of packages must start with a lower-case letter. | Names of instance variables and non-final class (static) variables must start with either a lower-case letter or “_”. | . ",
    "url": "/resources/guides/style/#names",
    
    "relUrl": "/resources/guides/style/#names"
  },"372": {
    "doc": "Style Guide",
    "title": "Imports",
    "content": ". | Do not import the same class or static member twice. | Do not import classes or members that you do not use. | . ",
    "url": "/resources/guides/style/#imports",
    
    "relUrl": "/resources/guides/style/#imports"
  },"373": {
    "doc": "Style Guide",
    "title": "Assorted Java Style Conventions",
    "content": ". | Write array types with the “[]” after the element-type name, not after the declarator. Write “String[] names”, not “String names[]”. | Write any modifiers for methods, classes, or fields in the following order: . | public, protected, or private. | abstract or static. | final, transient, or volatile. | synchronized. | native. | strictfp. | . | Do not explicitly modify methods, fields, or classes where the modification is redundant: . | Do not label methods in interfaces or annotations as “public” or “abstract”. | Do not label fields in interfaces or annotations as “static”, “public”, or “final”. | Do not label methods in final classes as “final”. | Do not label nested interfaces “static”. | . | Do not use empty blocks (‘{ }’ with only whitespace or comments inside) for control statements. There is one exception: a catch block may consist solely of comments having the form . /* Ignore EXCEPTIONNAME. */ . | Avoid “magic numbers” in code by giving them symbolic names, as in . public static final int MAX_SIZE = 100; . Exceptions are the numerals -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0.25, 0.5. | Do not try to catch the exceptions Exception, RuntimeError, or Error. | Write “b” rather than “b == true” and “!b” rather than “b == false”. | Replace . if (condition) { return true; } else { return false; } . with just . return condition; . | Only static final fields of classes may be public. Other fields must be private or protected. This applies to nested classes as well. | Classes that have only static methods and fields must not have a public (or defaulted) constructor. | Classes that have only private constructors must be declared “final”. | . ",
    "url": "/resources/guides/style/#assorted-java-style-conventions",
    
    "relUrl": "/resources/guides/style/#assorted-java-style-conventions"
  },"374": {
    "doc": "Style Guide",
    "title": "Avoiding Error-Prone Constructs",
    "content": ". | If a class overrides “equals”, it must also override “hashCode”. This will apply after we learn about hashCode. | Local variables and parameters must not hide or shadow field names. The preferred way to handle, e.g., getter/setter methods that simply control a field is to prefix the field name with “_”, as in . public double getWidth() { return _width; } public void setWidth(double width) { _width = width; } . | Do not use nested assignments, such as “if ((x = next()) != null) …”. Although this can be useful in C, it is almost never necessary in Java. | Include a “default” case in every “switch” statement. | End every arm of a “switch” statement either with a “break” statement or a comment of the form . /* fall through */ . | Do not compare String literals with “==”. Write . if (x.equals(\"something\")) . and not . if (x == \"something\") . There are cases where you really want to use “==”, but you are unlikely to encounter them in this class. | . ",
    "url": "/resources/guides/style/#avoiding-error-prone-constructs",
    
    "relUrl": "/resources/guides/style/#avoiding-error-prone-constructs"
  },"375": {
    "doc": "Style Guide",
    "title": "Limits",
    "content": ". | No file may be longer than 2000 lines. | No line may be longer than 120 characters. | No method may be longer than 80 lines. | No method may have more than 8 parameters. | Every file must contain exactly one outer class (nested classes are OK). | . ",
    "url": "/resources/guides/style/#limits",
    
    "relUrl": "/resources/guides/style/#limits"
  },"376": {
    "doc": "Style Guide",
    "title": "Style Guide",
    "content": "We will not reinstate submission tokens for failing to check style. Plan and use correct style accordingly! You have been warned. Some notes on this style guide: we have attempted to bring it as close to the default IntelliJ style checker as possible. The style checker also includes some “code quality” checks that IntelliJ does not lint. It is probably easier to get to know these rules by running the automated style checker. You can run the style checker in IntelliJ by right-clicking on a file in the left sidebar, and selecting “Check Style”. This will generate a list of style errors in the selected file. Be sure to save or recompile your file before running the style checker again. This style guide may also be incomplete. I’ve attempted to make it as comprehensive as possible, but I may have missed describing some newly added rules. ",
    "url": "/resources/guides/style/",
    
    "relUrl": "/resources/guides/style/"
  },"377": {
    "doc": "Project 3 Partnerships",
    "title": "Partnership Structure",
    "content": "For project 3, we require that you work in pairs, unless you have a special reason that prevents you from doing so. This term, we are not allowing partnerships on any other assignments. Why Partnerships on Project 3? . The process of working on a team can be quite different than working alone, and it’s great practice to learn how to efficiently work with other people, especially on large complex projects that involve tricky tools like git. While you might be perfectly capable,and even happier to work alone, you’ll only have so many big design projects in college, and we hope you’ll take advantage of this opportunity to develop this important soft skill. Given that this project is open-ended, having another person to work with might also help with being able to find more creative solutions, especially to the problem of world generation. Finally, there’s also the fact that when you go to job interviews, it is very likely that you’ll be asked to describe a time you worked with a team under some sort of duress. This project will likely provide such an opportunity. Rules for Collaboration . For this project, you’re explicitly allowed to divide and conquer. We encourage you to explore the idea of pair-programming, but it is not required. It is also not required that you work in the same room, though it is highly encouraged because this is more fun. We don’t require that both partners contribute equally, but both of you should do at least a significant amount of work. Partner Logistics . We use the Project 3 Partnership form to form partnerships. If you indicated on the form that you are in need of a partner, then we will take your preferences and use a custom tool (developed by the TAs in EECS 16B!) to pair you up with someone with similar preferences. This should take care of most scheduling issues, though you may have a slightly different schedule than your partner. If you didn’t fill out the form, then your partner is another random student someone else who also didn’t fill out the form. We highly recommend that partners meet in the Soda labs or somewhere else on campus and pair program on the assignment together. This means one laptop with the pair taking turns typing and both working and outlining solutions together. If you’re unable to meet in-person, you can do a similar thing with Zoom and screen sharing! It’s not always the best idea to split the work directly in half as working in isolation is much worse than collaboration, though you can do so if you want. Pair programming will also solve the issue of dealing with nasty merge conflicts :). There are also plugins for IntelliJ (and VSCode, if you use that) that allow for editing of the same file, though course staff won’t provide official help with them. Partner Dissolution . Sometimes your partnership just doesn’t work out for a variety of reasons. In extremely dire cases, we will allow a dissolving of a partnership. Here are some reasons we’ve dissolved partnerships in the past: . | A one-sided partnership. This means your partner hasn’t done any work on the assignment despite many attempts at communication. | A variety of personal reasons where a student was uncomfortable. | One partner has dropped the class. | . Fill out this form with the exact circumstances of your partnership as well as any commit history/other logs that you need to demonstrate the issue. If we believe that a dissolution is required, we will dissolve the partnership and you and your old partner will from then on be working alone. The reason we have you work alone is because it is extremely hard to find another unpartnered student, and you and the other student would likely have entirely different code bases, and you’d be better off starting from scratch. If you haven’t received a response in 24 hours then you may assume the dissolution was OK’d by us. If we read your responses and don’t think a dissolution is required, we’ll email you letting you know. If we’ve OK’d your dissolution, you and your old partner can use the code from the point that the partnership was dissolved, but from that point onwards you must work in your own private student repo (i.e. your sp25-s*** repo). Any collaboration from after the partnership dissolution will be considered academic dishonesty. You and your old partner will have separate checkoff grades and hence be graded individually. As you can see, dissolving a partnership actually requires more work since you will work on the project solo, so you should first attempt to work it out before trying to get the partnership dissolved. This does not mean that you should continue a partnership that makes you feel uncomfortable, unwelcome, or unsafe. Please contact course staff if you feel this way, and we will work with you. ",
    "url": "/resources/guides/partnerships/#partnership-structure",
    
    "relUrl": "/resources/guides/partnerships/#partnership-structure"
  },"378": {
    "doc": "Project 3 Partnerships",
    "title": "Project 3 Partnerships",
    "content": " ",
    "url": "/resources/guides/partnerships/",
    
    "relUrl": "/resources/guides/partnerships/"
  },"379": {
    "doc": "Using the Soda Lab Machines",
    "title": "1. Getting your Username and Password",
    "content": "First, we have to make sure that you have an active account. Log into acropolis using your CalNet id: https://acropolis.cs.berkeley.edu/~account/webacct/ . Your dashboard should look something like this (with different courses listed): . Your username for your 61B account is listed in the “account name” column. For example, my username is cs199-btx . Your username will start with CS61B! . For your account associated with CS61B, make sure it is activated and that you have saved the password. You can (and probably should) email your password to yourself as a PDF for safe keeping. For more about instructional accounts, read the official documentation here: https://acropolis.cs.berkeley.edu/~account/webacct/cas/index.cgi . Logging into a Device . Now head on over to Soda! The lab machines can be found in the second floor lab rooms and Soda 330. When prompted to log in, use your 61B username and the associated password. This will bring you into your account! . ",
    "url": "/resources/guides/soda-machines/#1-getting-your-username-and-password",
    
    "relUrl": "/resources/guides/soda-machines/#1-getting-your-username-and-password"
  },"380": {
    "doc": "Using the Soda Lab Machines",
    "title": "Setting Up the Device",
    "content": "Thankfully, the software you generally need is already installed on the Soda computers. You will, however, need to set up your personal repository and the 61b specific libraries. Follow these steps from lab 1: . | Clone your personal repo . | Set up the java libraries . | . Now you can use this device in the same way that you use your repo on your personal computer! . ",
    "url": "/resources/guides/soda-machines/#setting-up-the-device",
    
    "relUrl": "/resources/guides/soda-machines/#setting-up-the-device"
  },"381": {
    "doc": "Using the Soda Lab Machines",
    "title": "Using the Soda Lab Machines",
    "content": " ",
    "url": "/resources/guides/soda-machines/",
    
    "relUrl": "/resources/guides/soda-machines/"
  },"382": {
    "doc": "Online OH Guide",
    "title": "How will online office hours function in 61b?",
    "content": "Office hours will be provided both in-person and online. We will be using Zoom to host online office hours. All office hours start on Berkeley time. The office hours schedule can be found on the calendar page. ",
    "url": "/resources/guides/oh/#how-will-online-office-hours-function-in-61b",
    
    "relUrl": "/resources/guides/oh/#how-will-online-office-hours-function-in-61b"
  },"383": {
    "doc": "Online OH Guide",
    "title": "Joining the Online OH Zoom",
    "content": "You can find the link to online office hours on the bottom of the course website with the calendar of office hours. They are in pink - simply click on the box and you will be redirected to the online zoom. Note that you must be signed into your Berkeley zoom account in order to access online office hours. You can do this by selecting “sign in with SSO” and typing “berkeley”, which will take you to the CalNet authentication page. ",
    "url": "/resources/guides/oh/#joining-the-online-oh-zoom",
    
    "relUrl": "/resources/guides/oh/#joining-the-online-oh-zoom"
  },"384": {
    "doc": "Online OH Guide",
    "title": "Office Hours Policies",
    "content": "Office Hours will be one of the main resources you use for help. We have very particular policies for assisting students in office hours, so we can get to as many students as possible. It is very important that you follow all these guidelines exactly, otherwise you will always be skipped when trying to get help. These policies are repeated here and on the Office Hours Queue. As soon as you join the Zoom meeting, you will enter the main session, and will see many breakout rooms open. Simply select any of the open breakout rooms and join it. Once you’re in, you can place a ticket on the queue - make sure to specify your breakout room number in the location! . To get help in Office Hours this semester: . | Create a ticket on the Office Hours Queue, and specify what room you are in (Zoom or physical). | Select whether your question is conceptual or debugging (staff will need to look at your code). If your question is conceptual, check if there is a similar, existing public ticket that you can join! | The Office Hours Queue will notify you once a TA or an academic intern grabs your ticket off the queue. Note that they can typically only spend about 10 minutes with you, unless it’s a setup issue. If this time is not enough, you can always get on the queue again. | We will rarely give help with extra credit in Office Hours. We may decide to help you if no other student is seeking help with regular assignments. | . ",
    "url": "/resources/guides/oh/#office-hours-policies",
    
    "relUrl": "/resources/guides/oh/#office-hours-policies"
  },"385": {
    "doc": "Online OH Guide",
    "title": "Simple Office Hours Queue",
    "content": "We use an office hours website built by one of the members of our course staff, Meshan Khosla. The main features for creating a ticket and receiving help are identical to the above, but we will describe how to sign in and additional features below. This office hours queue is still actively being developed. If you have issues or suggestions, please let a member of course staff know or create a post on Ed! . Signing In . To sign in, click the button in the top right after opening the website. Note: you must use your @berkeley.edu email! . Public Tickets . The new office hours queue supports public tickets for conceptual questions. Public tickets allow multiple students to join the same ticket and receive help together. Course staff will not look at your code during public tickets. For debugging and code-related help, create a private ticket instead. On the queue, public tickets will be highlighted in yellow and denoted with a star. If a public ticket’s title and description is similar to your question, join the ticket and find the other students in the group. Group tickets will be helped for longer to account for the larger number of students per ticket. ",
    "url": "/resources/guides/oh/#simple-office-hours-queue",
    
    "relUrl": "/resources/guides/oh/#simple-office-hours-queue"
  },"386": {
    "doc": "Online OH Guide",
    "title": "Online OH Guide",
    "content": " ",
    "url": "/resources/guides/oh/",
    
    "relUrl": "/resources/guides/oh/"
  },"387": {
    "doc": "Installing and Using the IntelliJ Plugins",
    "title": "Using the Plugins",
    "content": "Style Checking . In this class, you will eventually be required to make sure your code conforms to the official style guide. The plugin includes a helpful style checker, which will check your code and inform you of any style errors and their locations. To run the style checker, simply right click any file or directories you want to check, and select Check Style in the menu that appears: . Click it, and the style checker will run. A tool window will appear with the results of the style check, and a list of any errors. Click the links to jump directly to the problematic line of code: . Java Visualizer . The “Java Visualizer” plugin contains a tool similar to the Python Visualizer you may have used in CS 61A. This tool is intended to help you debug and understand your code, and is integrated into IntelliJ’s Java debugger. To use the built-in visualizer, debug your code, setting breakpoints as necessary. When your code stops, you can click the Java Visualizer tab: . The Java Visualizer will appear, displaying the stack of the currently paused program: . As you continue to step through and pause your code, the visualizer display will update accordingly to show you what’s going on in your program. ",
    "url": "/resources/guides/intellij/plugins/#using-the-plugins",
    
    "relUrl": "/resources/guides/intellij/plugins/#using-the-plugins"
  },"388": {
    "doc": "Installing and Using the IntelliJ Plugins",
    "title": "Installing and Using the IntelliJ Plugins",
    "content": "This document will guide you through installing and using the CS 61B IntelliJ plugins. This guide assumes that you already have IntelliJ installed, as well as the plugins from Lab 1, and update the plugins to their most recent versions. ",
    "url": "/resources/guides/intellij/plugins/",
    
    "relUrl": "/resources/guides/intellij/plugins/"
  },"389": {
    "doc": "IntelliJ WTFS",
    "title": "IntelliJ WTFS",
    "content": "This page has been moved. Redirecting… . ",
    "url": "/resources/guides/intellij/wtfs/",
    
    "relUrl": "/resources/guides/intellij/wtfs/"
  },"390": {
    "doc": "IntelliJ",
    "title": "Using IntelliJ",
    "content": "IntelliJ Documentation . As we have mentioned, IntelliJ is an IDE that is widely used in industry which has its advantages and disadvantages for you. This means you will learn how to use a real tool, one that you might keep using for years after you graduate. IntelliJ is also incredibly powerful and can allow you to code in ways perhaps unlike anything you have seen before in previous classes. As it is widely used, they have dedicated resources to maintaining documentation. A complete guide can be found here and they also have many helpful video tutorials here. By looking at these links you can notice one disadvantage of using IntelliJ is that there are so many features and configurable settings that it can be overwhelming. Their documentation and videos often might mention things you have never heard of, but that does not mean you won’t be able to use IntelliJ effectively in this class. We will do our best to make this process as painless as it can be for you, and hopefully will help to make you more efficient in programming. Out of the guide and tutorial videos, we have found the following pages / videos to help jump start learning how to develop in IntelliJ. This list is probably too long to get through in its entirety in addition to the rest of the lab. We have included it here as a reference that you can finish on your own time, and have split things into “Read Now” and “Watch Later”. If you have time continue to explore the listed resources and try to experiment with different workflows that work for you. Essentials . | Overview of the user interface: This is a very high level overview which explains some of the various different windows and names IntelliJ uses to describe them. Understanding this will help you to understand their other reference material. | Discover IntelliJ IDEA: This guide is longer and explains some of the most important functionality of the IDE along with helpful keyboard shortcuts that can be used. Feel free to just skim this for now, and again if there are sections which use vocabulary you are unfamiliar with that is fine. Some parts of this guide refer to features that we will not use. If the rest of the documentation feels too large, this is a one stop shop which contains explanations of most of the functionality we will use this semester. | . Advanced Features . | This video shows how to efficiently navigate the IDE with minimal mouse / trackpad action. A lot of the features presented in this video are not needed for use of the editor, but can make you quicker at getting things done. If you have the time try to watch this and if possible follow along. Even just knowing that this functionality exists can be useful for the future. | . | This video shows the power of code generation within IntelliJ. Again the features shown here are more advanced than what you will likely need to succeed in this class, but when watching try to pick up on new things that you can work into your use of the IDE | . | Finally this video discusses some of the Git (or other version control) integration with the IntelliJ IDE. Throughout this course we will be expecting you to understand the Git CLI (command line interface), but sometimes it may be useful to use some kind of GUI (graphical user interface) to visualize changes to your Git repositories. Again, this is not something we expect students to be using as their primary method of interacting with Git but it is helpful to know that it exists. | . ",
    "url": "/resources/guides/intellij/#using-intellij",
    
    "relUrl": "/resources/guides/intellij/#using-intellij"
  },"391": {
    "doc": "IntelliJ",
    "title": "Using the CS 61B Plugins",
    "content": "Java Visualizer . This plugin contains a built-in version of the Java Visualizer, a tool similar to Python Tutor which you may have used in CS 61A or other previous courses. This tool is intended to help you debug and understand your code, and is integrated into IntelliJ’s Java debugger. Students often find this helpful to transition to debugging in IntelliJ, and unfortunately at some point in the semester the code we will be running will become too complicated for the visualizer. To use the built-in visualizer you must be debugging your code, so you can follow along the steps above to start the debugger again. When your code stops at a breakpoint, you can click the Java Visualizer icon: . After clicking this button, the Java Visualizer will appear, displaying the stack of the currently paused program as well as a diagram of the different variables. As you continue to step through and pause your code, the visualizer display will update accordingly to show you what’s going on in your program. In the coding portions of the lab try using the visualizer to check your understanding. Style Checking . In this class, you will eventually be required to make sure your code conforms to the [official style guide][../style/index.md]. The CS61B plugin includes a helpful style checker, which will check your code and inform you of any style errors and their locations. This will allow you to fix your style locally so that you do not lose points later on. Note: the sytle checker is not being run for this assignment so you do not need to worry about the style error in the files provided. To run the style checker, simply right click any file or directories you want to check, and select Check Style in the menu that appearss . After clicking it the style checker will run. A tool window will appear with the results of the style check, and a list of any errors. Click the links to jump directly to the problematic line of code: . ",
    "url": "/resources/guides/intellij/#using-the-cs-61b-plugins",
    
    "relUrl": "/resources/guides/intellij/#using-the-cs-61b-plugins"
  },"392": {
    "doc": "IntelliJ",
    "title": "IntelliJ",
    "content": " ",
    "url": "/resources/guides/intellij/",
    
    "relUrl": "/resources/guides/intellij/"
  },"393": {
    "doc": "Using Git",
    "title": "A. Intro to Version Control Systems",
    "content": "Version control systems are tools to keep track of changes to files over time. Version control allows you to view or revert back to previous iterations of files. Some aspects of version control are actually built into commonly used applications. Think of the undo command or how you can see the revision history of a Google document. In the context of coding, version control systems can track the history of code revisions, from the current state of the code all the way back until it was first tracked. This allows users to reference older versions of their work and share code changes with other people, like fellow developers. Version control has become a backbone of software development and collaboration in industry. In this class, we will be using Git. Git has excellent documentation so we highly encourage those who are interested to read more about what will be summarized in the rest of this guide. Intro to Git . Git is a distributed version control system as opposed to a centralized version control system. This means that every developer’s computer stores the entire history (including all old versions) of the entire project! This is rather unlike tools like Dropbox, where old versions are stored on a remote server owned by someone else. We call the entire history of an entire project a “repository”. The fact that the repository is stored locally leads to our ability to use Git locally on our own computers, even without an internet connection. The lab computers already have Git installed on the command line, and the Lab 1 setup guide explains how to install git on your own computer. In addition to the text based interface that we’ll learning to use in this guide, there is also a Git GUI (Graphical User Interface). We will not officially support usage of the graphical GUI. ",
    "url": "/resources/guides/git/#a-intro-to-version-control-systems",
    
    "relUrl": "/resources/guides/git/#a-intro-to-version-control-systems"
  },"394": {
    "doc": "Using Git",
    "title": "B. Local Repositories (Narrative Introduction)",
    "content": "Let’s go through a narrative example of how we might use git. We’ll be using lots of unfamiliar terms and ideas in this story. For a video version of this narrative example, see this video. Suppose we want to store recipes of various kinds on our computer, and also want to keep track of the history of these recipes as we change them. We might start by creating directories for both seitan and tofu recipes, then creating each recipe using Sublime (invoked using the subl command on my computer). We’re assuming that you’re just reading this, rather than trying the commands out yourself. If you’d like to follow along by typing everything out, you’ll need to use a text editor installed on your computer instead of subl. $ cd /users/sandra $ mkdir recipes $ cd recipes $ mkdir seitan $ mkdir tofu $ cd seitan $ subl smoky_carrot_tahini_seitan_slaw.txt $ subl boiled_seitan.txt $ cd ../tofu $ subl kung_pao_tofu.txt $ subl basil_ginger_tofu.txt . Now we have four recipes, two for tofu, and two for seitan. To set up our git repository to store the histories of our recipes as they evolve, we’d use the following commands: . $ cd /users/sandra/recipes $ git init . What git init does is tells the git version control system that we want to track the history of the current directory, in this case /users/sandra/recipes. However, at this point, NOTHING IS STORED IN THE REPOSITORY. It’s like we’ve purchased a safe, but we haven’t put anything in it yet. To store everything in the repository, we need to first add files. For example, we might do the following: . git add tofu/kung_pao_tofu.txt . Now here’s where git is going to start seeming weird. Even after calling the add command, we still haven’t stored our recipe in the repository (i.e. in the safe). Instead, what we’ve done is added kung_pao_tofu.txt to the list of files to track (i.e. to be added to the safe later). The idea is that you might not want to necessarily track every single file in the /users/sandra/recipes folder, so the add command tells git which ones it should be tracking. We can see the effect of this command using git status. $ git status . In which case, you’d see the following in response: . On branch main No commits yet Changes to be committed: (use \"git rm --cached &lt;file&gt;...\" to unstage) new file: tofu/kung_pao_tofu.txt Untracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) seitan/ tofu/basil_ginger_tofu.txt . The “changes to be committed” portion of the output lists all files that are currently being tracked and whose changes are ready be committed (i.e. that are ready to be put in the safe). We also see that there are some untracked files; namely, the seitan/ folder and the tofu/basil_ginger_tofu.txt file. These are untracked because we have not added them using git add. Note: Adding is also referred to as staging (stage is equivalent to add). Let’s try adding tofu/basil_ginger_tofu.txt and checking the status once more: . $ git add tofu/basil_ginger_tofu.txt $ git status On branch main No commits yet Changes to be committed: (use \"git rm --cached &lt;file&gt;...\" to unstage) new file: tofu/basil_ginger_tofu.txt new file: tofu/kung_pao_tofu.txt Untracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) seitan/ . We see that both tofu recipes are tracked, but neither seitan recipe is tracked. We will next use the commit command to stick copies of our tofu recipes into the repository (i.e. into the safe). To do this, we use the git commit command, as shown below: . $ git commit -m \"add tofu recipes\" . When executed, the commit command stores a snapshot of all staged changes (in this case, our tofu recipes) into the repository. Because we did not use git add on the seitan recipes, they were not included in the snapshot that was placed in the repository. This snapshot of our work is now safe forever and ever (as long as our computer’s hard drive doesn’t fail or we don’t damage the secret repository files). The -m flag lets us add a message to the commit, so we can remember what was most important about this commit (Git actually won’t let you commit without a message). It is common convention to use the imperative form of the verb rather than the past tense. So for example, the commit message above says “add tofu recipes” rather than “added tofu recipes”. As another analogy, you can think of the whole process like taking a panoramic picture on a camera. The add command captures one portion of the image, and the commit command stitches all “added” items together into a single panorama and throws this panorama into a safe. And just as a panorama only includes things you point at (not the entire 360 degree circle around you), the commit command only ensafes those files which have been added using the add command (and not all files in the recipes directory). After committing, you’ll note that git status no longer lists files under “Changes to be committed”. This is similar to how after you finish taking a panoramic photo, all of the temporary tiny image files are thrown away. The result of git status at this point is shown below: . $ git status On branch main Untracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) seitan/ nothing added to commit but untracked files present (use \"git add\" to track) . As you may guess from how many times we’ve used it, status is very useful for seeing what’s currently happening inside your repository. If you ever run into unexpected behavior, git status is the first place to look! . If you look at the files in the tofu/ folder, you’ll see that the commit process did NOT affect the original files on our computer. This is much like how when you take a panoramic photo of your friends, they do not get sucked into a cyber hellscape inside your phone. We can see evidence of our snapshot by using the special git log command. $ git log commit 9f955d85359fc8e4504d7220f13fad34f8f2c62b Author: Sandra Upson &lt;sandra@Sandras-MacBook-Air.local&gt; Date: Sun Jan 17 19:06:48 2016 -0800 add tofu recipes . That giant string of characters 9f955d85359fc8e4504d7220f13fad34f8f2c62b is the ID of the commit. We can use the git show command to peek inside of this commit. $ git show 9f955d85359fc8e4504d7220f13fad34f8f2c62b commit 9f955d85359fc8e4504d7220f13fad34f8f2c62b Author: Sandra Upson &lt;sandra@Sandras-MacBook-Air.local&gt; Date: Sun Jan 17 19:06:48 2016 -0800 add tofu recipes diff --git a/tofu/basil_ginger_tofu.txt b/tofu/basil_ginger_tofu.txt new file mode 100644 index 0000000..9a56e7a --- /dev/null +++ b/tofu/basil_ginger_tofu.txt @@ -0,0 +1,3 @@ +basil +ginger +tofu diff --git a/tofu/kung_pao_tofu.txt b/tofu/kung_pao_tofu.txt new file mode 100644 index 0000000..dad9bd9 --- /dev/null +++ b/tofu/kung_pao_tofu.txt @@ -0,0 +1,3 @@ +szechuan peppers +tofu +peanuts +kung +pao . The git show command lets us peer right into the beating heart of a commit. We don’t expect all of its innards to make sense to you, but you can maybe glean that the commit is a snapshot of both the names and contents of the files. Note: You will rarely use show in real life or in 61B, but it’s useful here for peeking inside a commit to get a better sense of what they are. Suppose we now want to revise our kung pao recipe, because we decided it should have bok choy in it. $ subl tofu/kung_pao_tofu.txt . The changes we just made to kung_pao_tofu.txt are not saved in the repository. In fact, if we do git status again, we’ll get: . $ git status On branch main Changes not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git restore &lt;file&gt;...\" to discard changes in working directory) modified: tofu/kung_pao_tofu.txt Untracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) seitan/ . You might think to yourself “OK, we’ll I’ll just do commit again”. However, if we try to commit, git will say that there’s nothing to do: . $ git commit -m \"add bok choy\" On branch main Changes not staged for commit: modified: tofu/kung_pao_tofu.txt Untracked files: seitan/ no changes added to commit . This is because even though kung_pao_tofu.txt is being tracked, we have not staged our changes for commit. To store our changes in the repository, we first need to use the add command again, which will stage the changes for commit (or in other words, we need to take a picture of our new kung_pao_tofu.txt before we can create the new panorama that we want to put in the safe). $ git add tofu/kung_pao_tofu.txt $ git status On branch main Changes to be committed: (use \"git restore --staged &lt;file&gt;...\" to unstage) modified: tofu/kung_pao_tofu.txt Untracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) seitan/ . We see that our change to kung_pao_tofu.txt is now “to be committed” (it has been staged), meaning that the next commit will include changes to this file. We commit just like before, and use git log to see the list of all snapshots that have been taken. $ git commit -m \"add bok choy\" $ git log commit cfcc8cbd88a763712dec2d6bd541b2783fa1f23b Author: Sandra Upson &lt;sandra@Sandras-MacBook-Air.local&gt; Date: Sun Jan 17 19:24:45 2016 -0800 add bok choy commit 9f955d85359fc8e4504d7220f13fad34f8f2c62b Author: Sandra Upson &lt;sandra@Sandras-MacBook-Air.local&gt; Date: Sun Jan 17 19:06:48 2016 -0800 add tofu recipes . We now see that there are TWO commits. We could again use show to see what changed in cfcc8cbd88a763712dec2d6bd541b2783fa1f23b, but we won’t in this guide. Suppose we later decide bok choy is gross, and want to restore our recipe to its initial version. We can roll back our files using the git restore command, as shown below: . $ git restore --source=9f955d85359fc8e4504d7220f13fad34f8f2c62b tofu/kung_pao_tofu.txt . Think of the restore command as a robot that goes to our safe, figures out what the kung pao tofu recipe looked like back when the newest panorama was 9f955d85359fc8e4504d7220f13fad34f8f2c62b, and finally modifies the actual tofu/kung_pao_tofu.txt file so that it is exactly like it was at the time snapshot 9f955d85359fc8e4504d7220f13fad34f8f2c62b was created. If we now look at the contents of kung_pao_tofu.txt after running this command, we’ll see that bok choy is gone (phew)! . $ cat tofu/kung_pao_tofu.txt szechuan peppers tofu peanuts kung pao . Important: restore does not change the commit history! Or, in other words, the safe containing our panoramic photos is entirely unaffected by the restore command. The entire point of git is to create a log of everything that has EVER happened to our files. In other words, if you took a panoramic photo of your room in 2014 and in 2015 and put them in a safe, then decided in 2016 to put it exactly back like it was in 2014, you would not set the panoramic photo from the year 2015 on fire. Nor would you a picture of it in 2016 magically appear inside your safe. If you wanted to record what it looked like in 2016, you’d need to take another photo (with the appropriate -m message to remember what you just did). If we want to actually save a snapshot of the most up-to-date kung pao tofu recipe (which no longer has bok choy), we’d have to commit. Remember that we need to stage this change first! . $ git add tofu/kung_pao_tofu.txt $ git commit -m \"restore the original recipe with no bok choy\" $ git log commit 4be06747886d0a270bf1d618d58f3273f0219a69 Author: Sandra Upson &lt;sandra@Sandras-MacBook-Air.local&gt; Date: Sun Jan 17 19:32:37 2016 -0800 restore the original recipe with no bok choy commit cfcc8cbd88a763712dec2d6bd541b2783fa1f23b Author: Sandra Upson &lt;sandra@Sandras-MacBook-Air.local&gt; Date: Sun Jan 17 19:24:45 2016 -0800 add bok choy commit 9f955d85359fc8e4504d7220f13fad34f8f2c62b Author: Sandra Upson &lt;sandra@Sandras-MacBook-Air.local&gt; Date: Sun Jan 17 19:06:48 2016 -0800 add tofu recipes . We could then use show to see the contents of this most recent commit. $ git show 4be06747886d0a270bf1d618d58f3273f0219a69 commit 4be06747886d0a270bf1d618d58f3273f0219a69 Author: Sandra Upson &lt;sandra@Sandras-MacBook-Air.local&gt; Date: Sun Jan 17 19:32:37 2016 -0800 restore the original recipe with no bok choy diff --git a/tofu/kung_pao_tofu.txt b/tofu/kung_pao_tofu.txt index 35a9e71..dad9bd9 100644 --- a/tofu/kung_pao_tofu.txt +++ b/tofu/kung_pao_tofu.txt @@ -1,4 +1,3 @@ szechuan peppers tofu peanuts kung pao -bok choy \\ No newline at end of file . This is the foundation of git. To summarize, using our photo analogy: . | git init: Creates a box (repository) which permanently stores panoramic photos (commits). | git add: Takes a temporary photo of (stages) something that can be assembled into a panoramic photo later. | git commit: Assembles all available temporary photos (staged changes) into a panoramic photo. Also destroys all temporary photos. | git log: Lists all the panoramic photos we’ve ever taken. | git show: Inspects the contents of a particular panoramic photo. | git restore: Rearranges files back to how they looked in a given panoramic photo. Does not affect the panoramic photos in your box in any way. | . There’s more to learn about git, but before we get there, let’s give a more formal explanation of what we’ve just done. ",
    "url": "/resources/guides/git/#b-local-repositories-narrative-introduction",
    
    "relUrl": "/resources/guides/git/#b-local-repositories-narrative-introduction"
  },"395": {
    "doc": "Using Git",
    "title": "C. Local Repositories (Technical Overview)",
    "content": "Initializing Local Repositories . Let’s first start off with the local repository. As mentioned above, a repository stores files as well as the history of changes to those files. In order to begin, you must initialize a Git repository by typing the following command into your terminal while in the directory whose history you want to store in a local repository. If you’re using Windows, you should be using a Git Bash terminal window while you type these commands. Reminder: If you’re unsure of how to use a terminal window, consider checking out the “Learning to Use the Terminal” section of Lab 1 setup. $ git init . Extra for experts: When you initialize a Git repository, Git creates a .git subdirectory. Inside this directory it will store a bunch of metadata, as well as old the actual snapshots of the files. However, you’ll never need to actually open the contents of this .git directory, and you should DEFINITELY not change anything inside directly! . Depending on your operating system, you may not see the folder, because folders whose names start with “.” are not shown by your OS by defaut. The UNIX command ls -la will list all directories, including your .git directory, so you can use this command to check that your repo has been initialized properly. Tracked vs. Untracked Files . Git repos start off not tracking any files. In order to save the revision history of a file, you need to track it. The Git documentation has an excellent section on recording changes. An image from that section is placed here for your convenience: . As this figure shows, files fall into two main categories: . | untracked files: These files have either never been tracked or were removed from tracking. Git is not maintaining history for these files. | tracked files: These files have been added to the Git repository and can be in various stages of modification: unmodified, modified, or staged. | An unmodified file is one that has had no new changes since the last version of the files was added to the Git repo. | A modified file is one that is different from the last one Git has saved. | A staged file is one that a user has designated as part of a future commit (usually through use of the git add command). We can think of these as files which have lights shining upon them. | . | . The following Git command allows you see the status of each file, i.e. whether it is untracked, unmodified, modified, or staged: . $ git status . The git status command is extremely useful for determining the exact status of each file in your repository. If you are confused about what has changed and what needs to be committed, it can remind you of what to do next. Staging &amp; Committing . A commit is a specific snapshot of your working directory at a particular time. Users must specify what exactly composes the snapshot by staging files. The add command lets you stage a file (without the square brackets). $ git add [file] . You can also stage an entire folder, which will recursively stage all files and subfolders in it (this is also true of many git commands, just replace the file with a folder). Once you have staged all the files you would like to include in your snapshot, you can commit them as one block with a message. $ git commit -m \"your commit message here\" . Your message should be descriptive and explain what changes your commit makes to your code. You may want to quickly describe bug fixes, implemented classes, etc. so that your messages are helpful later when looking through your commit log. In order to see previous commits, you can use the log command: . $ git log . The Git reference guide has a helpful section on viewing commit history and filtering log results when searching for particular commits. It might also be worth checking out gitk, which is a GUI prompted by the command line. As a side note on development workflow, it is a good idea to commit your code as often as possible. Whenever you make significant (or even minor) changes to your code, make a commit. If you are trying something out that you might not stick with, commit it (perhaps to a different branch, which will be explained below). Rule of Thumb: If you commit, you can always restore your old code or change it. However, if you don’t commit, you won’t be able to get old versions back. So commit often! . Undoing Changes . The Git reference has a great section on undoing things. Please note that while Git revolves around the concept of history, it is possible to lose your work if you revert with some of these undo commands. Thus, be careful and read about the effects of your changes before undoing your work. | Unstage a file that you haven’t yet committed: . $ git restore --staged [file] . This will take the file’s status back to modified, leaving changes intact. Don’t worry about this command undoing any work. This command is the equivalent of deleting one of the temporary images that you’re going to combine into a panorama. Why might we need to use this command? Let’s say you accidentally started tracking a file that you didn’t want to track. (an embarrassing video of yourself, for instance.) Or you were made some changes to a file that you thought you would commit but no longer want to commit quite yet. | Amend latest commit (changing commit message or add forgotten files): $ git add [forgotten-file] $ git commit --amend . Please note that this new amended commit will replace the previous commit. | Restore a file to its state at the time of the most recent commit (use with caution!): . $ git restore [file] . If the file has been staged, you’ll need to unstage it first. This command is useful if you would like to legitimately undo your work. For example, if you accidentally modified a certain file since committing previously, and would like to change it back to how it was. Be careful with this command! Any changes made to the file since the last commit will be lost. If you want to be safe, stage and commit your changes first and then restore to a previous version using one of the commands below. | . Getting previous versions of files . Suppose you’re working on a lab, and halfway through, you realize you’ve been doing it all wrong. If only there was a way to get back the skeleton code so you can start over! . If you haven’t committed yet, you can use the previous command - but what if you’ve already committed some changes? Rather than restoring the files in the latest commit, you can use the more powerful . git restore --source=[commit or branch] [file or folder] . which can get files from an arbitrary point in time. For example, let’s say you’ve accidentally deleted lab1000/, and committed that change. Oh no! To fix this, you can get back the skeleton code with . git restore --source=skeleton/main lab1000/ . This allows you to restart from the skeleton code for lab1000. If the command above isn’t working, make sure that you first used cd to navigate to the sp25-s*** repo, where the lab1000 folder is located. For example, if your terminal is currently inside the lab1000 folder, and you try to run git restore lab1000, the terminal will try to look for lab1000/lab1000 (a folder named lab1000 inside lab1000), which won’t exist. Now consider a scenario where you’ve made some progress on lab1000/Cheese.txt, and want to get back the version of that file from a few commits ago. You can find the correct commit with git log and then run . git restore --source=abcd1234efgh7890abcd1234c7ee5e7890c7ee5e lab1000/Cheese.txt . where abcd1234efgh7890abcd1234c7ee5e7890c7ee5e is the ID from git log of the commit that contains the version of lab1000/Cheese.txt we want to restore. Remember that you’ll need to re-stage the file for the next commit to track your restoration! . If you’re working on lab 1, it’s time to return and do the git exercise. ",
    "url": "/resources/guides/git/#c-local-repositories-technical-overview",
    
    "relUrl": "/resources/guides/git/#c-local-repositories-technical-overview"
  },"396": {
    "doc": "Using Git",
    "title": "D. Remote Repositories",
    "content": "One especially handy feature of Git is the ability to store copies of your repository on computers other than your own. Recall that our snapshots are all stored on our computer in a secret folder. That means if our computer is damaged or destroyed, so are all our snapshots. Suppose we wanted to push our tofu and seitan recipes to another computer, we’d typically use the following command. $ git push origin main . However, if we tried that out, we’d simply get the message below: . fatal: 'origin' does not appear to be a git repository fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. This is because we have not yet told git where to send the files. As it happens, there is a for-profit private company called GitHub that has made a business out of storing copies of people’s repositories. In 61B, we’ll use GitHub to store our repositories. To create a repository on GitHub, you’d probably use their web interface. However, we’ve already done this for you. The most important remote repository commands are listed below, along with a technical description that might not make sense yet. If you’re working on lab 1, head back to the lab to learn more about these commands. | git clone [remote-repo-URL]: Makes a copy of the specified repository, but on your local computer. Also creates a working directory that has files arranged exactly like the most recent snapshot in the download repository. Also records the URL of the remote repository for subsequent network data transfers, and gives it the special remote-repo-name “origin”. | git remote add [remote-repo-name] [remote-repo-URL]: Records a new location for network data transfers. | git remote -v: Lists all locations for network data transfers. | git pull [remote-repo-name] main: Get the most recent copy of the files as seen in remote-repo-name. | git push [remote-repo-name] main: Uploads the most recent copy of your files to remote-repo-name. | . For most of this course, you’ll only have two remote repositories: origin, which is the remote for saving and submitting your individual work, and skeleton, which is the remote from which you’ll receive skeleton code. ",
    "url": "/resources/guides/git/#d-remote-repositories",
    
    "relUrl": "/resources/guides/git/#d-remote-repositories"
  },"397": {
    "doc": "Using Git",
    "title": "E. Git Branching (advanced Git) (optional)",
    "content": "Everything below this line is optional for 61B. Note: In 2020, Git changed the default branch name from master to main. The graphics below have not been updated accordingly - for now, just think of master as main’s outdated equivalent. Every command that we’ve covered so far was working with the default branch. This branch is conventionally called the main branch. However, there are cases when you may want to create branches in your code. Branches allow you to keep track of multiple different versions of your work simultaneously. One way to think of branches are as alternate dimensions. Perhaps one branch is the result of choosing to use a linked list while another branch is the result of choosing to use an array. Reasons for Branching . Here are some cases when it may be a good idea to branch. | You may want to make a dramatic change to your existing code (called refactoring) but it will break other parts of your project. But you want to be able to simultaneously work on other parts or you have partners, and you don’t want to break the code for them. | You want to start working on a new part of the project, but you aren’t sure yet if your changes will work and make it to the final product. | You are working with partners and don’t want to mix up your current work with theirs, even if you want to bring your work together later in the future. | . Creating a branch will let you keep track of multiple different versions of your code, and you can easily switch between versions and merge branches together once you’ve finished working on a section and want it to join the rest of your code. An Example Scenario . For example, let’s say that you’ve finished half of a project so far. There is a difficult part still left to do, and you’re not sure how to do it. Perhaps you have three different ideas for how to do it, and you’re not sure which will work. At this point, it might be a good idea to create a branch off of main and try out your first idea. | If your code works, you can merge the branch back to your main code (on the main branch) and submit your project. | If your code doesn’t work, don’t worry about reverting your code and having to manipulate Git history. You can simply switch back to main, which won’t have any of your changes, create another branch, and try out your second idea. | . This can continue till you figure out the best way to write you code, and you only need to merge the branches that work back into main in the end. The Git reference has a section on branching and merging with some figures of how branches are represented in Git’s underlying data structure. It turns out that Git keeps track of commit history as a graph with branch pointers and commits as nodes within the graph. (Hence the tree-related terminology.) . Creating, Deleting, &amp; Switching Branches . A special branch pointer called the HEAD references the branch you currently have as your working directory. Branching instructions modify branches and change what your HEAD points to so that you see a different version of your files. | The following command will create a branch off of your current branch. $ git branch [new-branch-name] . | This command lets you switch from one branch to another by changing which branch your HEAD pointer references. $ git switch [destination-branch] . By default, your initial branch is called main. It is advised that you stick with this convention. Every other branch, however, can be named whatever you’d like. It’s generally a good idea to call your branch something descriptive like fixing-ai-heuristics so that you can remember what commits it contains. | You can combine the previous two commands which create a new branch and then switch to it with this single command: . $ git switch -c [new-branch-name] . | You can delete branches with the following command: . $ git branch -d [branch-to-delete] . | You can easily figure out which branch you are on with this command: . $ git branch -v . More particular, the -v flag will list the last commit on each branch as well. | . Merging . There are often times when you’d like to merge one branch into another. For example, let’s say that you like the work you’ve done on fixing-ai-heuristics. Your AI is now super-boss, and you’d like your main branch to see the commits you’ve made on fixing-ai-heuristics and delete the fixing-ai-heuristics branch. In this case, you should switch to the main branch and merge fixing-ai-heuristics into main. $ git switch main $ git merge fixing-ai-heuristics . This merge command will create a new commit that joins the two branches together and change each branch’s pointer to reference this new commit. While most commits have only one parent commit, this new merge commit has two parent commits. The commit on the main branch is called its first parent and the commit on the fixing-ai-heuristics branch is called its second parent. Merge Conflicts . It may happen that two branches you are trying to merge have conflicting information. This can occur if commits on the two branches changed the same files. Git is sophisticated enough to resolve many changes, even when they occur in the same file (though distinct places). However, there are times that conflicts cannot be resolved by Git because changes impact the same methods/lines of code. In these cases, it will present both changes from the different branches to you as a merge conflict. Resolving Merge Conflicts . Git will tell you which files have conflicts. You need to open the files that have conflicts and resolve them manually. After doing this, you must commit to complete the merge of the two branches. The files with conflicts will contain segments that look something like this: . &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD for (int i = 0; i &lt; results.length; i++) { println(results[i]); println(\"FIX ME!\"); } ======= int[] final = int[results.length]; for (int i = 0; i &lt; results.length - 1; i++) { final[i] = results[i] + 1; println(final[i]); } &gt;&gt;&gt;&gt;&gt;&gt;&gt; fixing-ai-heuristics . Basically, you’ll see two segments with similar pieces of code: . | The top code snippet is from the branch you originally had switched to when you ran the merge command. It’s called HEAD because the HEAD pointer was referencing this branch at the time of the merge. Continuing our example above, this code would be from the main branch. | The bottom code snippet is from the branch you were merging into the branch you switched to. This is why it shows that the code is from fixing-ai-heuristics. | . Basically, you’ll need to go through all marked sections and pick which snippet of code you’d like to keep. In the previous example, I like the bottom piece of code better because I just fixed the AI while the top piece still prints “FIX ME!” Thus, I will delete the top segment as well as the extraneous lines to get this: . int[] final = int[results.length]; for (int i = 0; i &lt; results.length - 1; i++) { final[i] = results[i] + 1; println(final[i]); } . Random Note: I have no idea how this code supposedly fixes the AI heuristics. Don’t use it for your project! It is useless, I tell you. Useless! . Doing this for all segments demarcated by conflict-resolution markers resolves your conflict. After doing this for all conflicting files, you can commit. This will complete your merge. ",
    "url": "/resources/guides/git/#e-git-branching-advanced-git-optional",
    
    "relUrl": "/resources/guides/git/#e-git-branching-advanced-git-optional"
  },"398": {
    "doc": "Using Git",
    "title": "F. Other Git Features",
    "content": "There are tons of other cool Git commands. Unfortunately, we need to continue on to discuss remote repositories. Thus, this segment will just list some other interesting features that you are encouraged to explore in your own time: . | Stashing . Stashing allows you to save your changes onto a stack without making a more permanent commit. It is equivalent to picking up your work-in-progress and placing it in a box to get back to later. In the meantime, your desk is now clean. Why might you want to use this? . | Your files may be in a disorganized state, and you don’t want to commit yet, but you also don’t want to get rid of your changes. | You modified multiple files, but you dislike your changes and you would just like to get things back to how they were after your most recent commit. Then you can stash your code and then drop that stash rather than having to manually revert multiple files. (Be careful with this usage!) . | You modified files but accidentally modified them on the wrong branch. Then you can stash your changes, switch branches, and unstash your changes so that they are all in the new branch. | . | Rewriting History . Let’s say you want to do more than change your last commit or drop changes to your files before your most recent commit. What if you want to do something crazy like rewrite history? You can change multiple commit messages, splits one commits into two, and reorder commits. | Rebasing . Rebasing changes the parent commit of a specific commit. In doing this, it changes the commits so that it is no longer the same. Rebase can be used as an alternative to merge for integrating changes from one branch to another. It is quite different from merge in that merge creates a new commit that has both parent branch commits as parents. Rebasing takes one set of commits from a branch and places them all at the end of the other branch. There are different reasons why you would want to use merge versus rebase. One of these reasons is that rebase leads to a cleaner history when working with many different branches and team members. | Reset . Perhaps you decide that you want things to be how they were a certain number of commits ago. You can use reset if you are absolutely sure that you don’t want the last few commits. Reset is quite a nuanced command, so read carefully before attempting use. | Stack Overflow on git reset | Reset Demystified | . | Revert . Revert allows you to reverse the changes introduced by certain commits by recording new commits to undo the changes. This is a safer option that simply throwing away past commits. But again, use this with caution. | Cherry Pick . Cherry pick allows you to apply the changes introduced by some existing commits. For example, if you have two different branches, and your current branch lacks one or two commits that would be helpful but are only in the other branch, then you can cherry pick to grab those commits without merging or rebasing to get all the commits. | . There are far more features and commands not mentioned here. Feel free to explore more and search for answers. There most likely exists a Git command for nearly everything you would want to do. ",
    "url": "/resources/guides/git/#f-other-git-features",
    
    "relUrl": "/resources/guides/git/#f-other-git-features"
  },"399": {
    "doc": "Using Git",
    "title": "G. Remote Repositories (Advanced)",
    "content": "Private vs. Public Repos . By default, repositories on GitHub are public, rather than private. This means that anyone on the Internet can view the code in a public repo. For all class assignments, you are required to use private repositories. Hosting school code in a public repo is a violation of the academic honesty policies of this class (and most other Berkeley EECS classes). Please keep this in mind when using sites like GitHub for collaboration. As of 01/07/2019, GitHub is offering free unlimited private repositories, so there should be no excuse for anyone to post their code in a public repo. Adding Remotes . Adding a remote repository means that you are telling git where the repo is located. You do not necessarily have read/write access to every repo you can add. Actually accessing and modifying files in a remote is discussed later and relies on having added the remote. $ git remote add [short-name] [remote-url] . The remote URL will look something like https://github.com/berkeley-cs61b/skeleton.git if you are using HTTP or git@github.com:berkeley-cs61b/skeleton.git if you are using SSH. By convention, the name of the primary remote is called origin (for original remote repository). So either of the following two commands would allow me to add the berkeley-cs61b/skeleton repository as a remote. $ git remote add origin https://github.com/berkeley-cs61b/skeleton.git $ git remote add origin git@github.com:berkeley-cs61b/skeleton.git . After adding a remote, all other commands use its associated short name. Renaming, Deleting, &amp; Listing Remotes . | You can rename your remote by using this command: . $ git remote rename [old-name] [new-name] . | You can also remove a remote if you are no longer using it: . $ git remote rm [remote-name] . | To see what remotes you have, you can list them. The -v flag tells you the URL of each remote (not just its name). $ git remote -v . | . You can read more about working with remotes in the Pro Git book. Cloning a Remote . There are often remote repos with code that you would like to copy to your own computer. In these cases, you can easily download the entire repo with its commit history by cloning the remote: . $ git clone [remote-url] $ git clone [remote-url] [directory-name] . The top command will create a directory of the same name as the remote repo. The second command allows you to specify a different name for the copied repository. When you clone a remote, the cloned remote because associated with your local repo by the name origin. This is by default because the cloned remote was the origin for your local repo. Pushing Commits . You may wish to update the contents of a remote repo by adding some commits that you made locally. You can do this by pushing your commits: . $ git push [remote-name] [remote-branch] . Note that you will be pushing to the remote branch from the branch your HEAD pointer is currently referencing. For example, let’s say that I cloned a repo then made some changes on the main branch. I can give the remote my local changes with this command: . $ git push origin main . Fetching &amp; Pulling Commits . There are also times that you’d like to get some new commits from a remote that are not currently on your local repo. For example, you may have cloned a remote created by a partner and wish to get his/her newest changes. You can get those changes by fetching or pulling from the remote. | fetch: This is analogous to downloading the commits. It does not incorporate them into your own code. $ git fetch [remote-name] . Why might you use this? Your partner may have created some changes that you’d like to review but keep separate from your own code. Fetching the changes will only update your local copy of the remote code but not merge the changes into your own code. For a more particular example, let’s say that your partner creates a new branch on the remote called fixing-ai-heuristics. You can view that branch’s commits with the following steps: . $ git fetch origin $ git branch review-ai-fix origin/fixing-ai-heuristics $ git switch review-ai-fix . The second command creates a new branch called review-ai-fix that tracks the fixing-ai-heuristics branch on the origin remote. | pull: This is equivalent to a fetch + merge. Not only will pull fetch the most recent changes, it will also merge the changes into your HEAD branch. $ git pull [remote-name] [remote-branch-name] . Let’s say that my boss partner has pushed some commits to the main branch of our shared remote that fix our AI heuristics. I happen to know that it won’t break my code, so I can just pull it and merge it into my own code right away. $ git pull origin main . | . ",
    "url": "/resources/guides/git/#g-remote-repositories-advanced",
    
    "relUrl": "/resources/guides/git/#g-remote-repositories-advanced"
  },"400": {
    "doc": "Using Git",
    "title": "H. Remote Repository Exercise",
    "content": "For this follow-along example, you will need a partner. You will be working with your partner on a remote repository and have to deal with things like merge conflicts. Also note that both of you will need accounts on the same service, whether it be GitHub or Bitbucket. | Partner 1 will create a private repository on GitHub or Bitbucket and add Partner 2 as a collaborator. This repo can be called learning-git. Note: GitHub Education discount requests take some time to process, so it is acceptable to use a public repo for just this lab. For all other assignments, you must use a private repo. Also, please do not add your partner to your personal repo in the Berkeley-CS61B organization. | Partner 2 will create a README file, commit the file, and push this commit to the learning-git remote. | Partner 2 will also add the remote that Partner 1 created and push this new commit. With either GitHub or Bitbucket, you can find the remote URL on the repo’s main page. | Partner 1 will now clone the remote repo to their own machine then add a line to the bottom of README. (Note: At this point, the pictures may get a bit confusing because I’m pretending to be both partners.) . | Partner 1 will commit this change and push it back to the remote. | Partner 2 will similarly add a line to the bottom of their README and commit this change. | Partner 2 will now pull and find that there are merge conflicts. | Partner 2 should resolve the merge conflicts by rearranging the lines. Then Partner 2 should add README and commit and push to finish. | Partner 1 can now pull and get two new commits - the added line &amp; the merge commit. Now both partners are up to date. | . ",
    "url": "/resources/guides/git/#h-remote-repository-exercise",
    
    "relUrl": "/resources/guides/git/#h-remote-repository-exercise"
  },"401": {
    "doc": "Using Git",
    "title": "I. Conclusion",
    "content": "More with Remotes . These simple commands to add/remove remotes, push commits, and fetch/pull changes can be combined with all the commands you’ve learned in regards to local repositories to give you a powerful toolkit in working collaboratively with others. GitHub has some other really cool features that can be helpful for in project development: . | Forking a Repo . | Syncing a Fork . | Using Pull Requests . | Using Issues . | . Extra Reading . For those of you who found this topic interesting, check out these extra resources! Keep in mind, however, that the best way to learn to use Git effectively is to just start incorporating it into your own coding workflow! Good luck, and have an octotastic day! . | Git Documentation is really quite good and clear, and there is a great Pro Git book by Scott Chacon. | Hacker’s Guide to Git is a very friendly introduction to how Git works. It gives a peek at the structure of commits &amp; branches and explains how some commands work. | Learn Git Branching is a fun and interactive tutorial that visualizes Git commands. | . ",
    "url": "/resources/guides/git/#i-conclusion",
    
    "relUrl": "/resources/guides/git/#i-conclusion"
  },"402": {
    "doc": "Using Git",
    "title": "J. Advanced Git Features",
    "content": "Here are some more advanced features that might make your life a little easier. Once you get the hang of the basic features of git, you’ll start to notice some common tasks are a bit tedious. Here are some built-in features that you might consider using. Rebasing . Git is all about collaborative programming, so more often than not, you’ll find yourself dealing with merge-conflicts. In most cases, the changes you’ve made are separated from the conflicting commits such that you can just put your commit right on top of all the new commits. However, git will merge the two versions and add an extra commit letting you know that you merged. This is pretty annoying and leads to a pretty messy commit history. This is where the magic of rebasing comes into play. When you push changes onto Github and the remote copy has been modified, you’ll be asked to pull in the changes. This is where you usually get a merge-conflict. Instead, pull with the rebase flag: . $ git pull --rebase origin main . It’s as simple as that! The changes from the server will be applied onto your working copy and your commit will be stacked on top. Squashing Commits . You might find yourself in a situation where you’ve created many small commits with tiny related changes that could really be stored in a single commit. Here, you’ll want to squash your commits using the rebase command. Suppose you have four commits that I want to combine. You would enter the following: . $ git rebase -i HEAD~4 . From here, you would be prompted to pick a commit to collapse the other commits into, and pick which commits should be combined: . pick 01d1124 Adding license pick 6340aaa Moving license into its own file pick ebfd367 Jekyll has become self-aware. pick 30e0ccb Changed the tagline in the binary, too. # Rebase 60709da..30e0ccb onto 60709da # # Commands: # p, pick = use commit # e, edit = use commit, but stop for amending # s, squash = use commit, but meld into previous commit # # If you remove a line here THAT COMMIT WILL BE LOST. # However, if you remove everything, the rebase will be aborted. # . It’s best to pick the topmost commit and squash the rest into it. You can do this by changing the text file to this: . pick 01d1124 Adding license squash 6340aaa Moving license into its own file squash ebfd367 Jekyll has become self-aware. squash 30e0ccb Changed the tagline in the binary, too. # Rebase 60709da..30e0ccb onto 60709da # # Commands: # p, pick = use commit # e, edit = use commit, but stop for amending # s, squash = use commit, but meld into previous commit # # If you remove a line here THAT COMMIT WILL BE LOST. # However, if you remove everything, the rebase will be aborted. # . Voila! All those tiny commits have collapsed into a single commit and you have a cleaner log file. ",
    "url": "/resources/guides/git/#j-advanced-git-features",
    
    "relUrl": "/resources/guides/git/#j-advanced-git-features"
  },"403": {
    "doc": "Using Git",
    "title": "Using Git",
    "content": "Preface: This guide assumes a basic understanding of the command line on your computer. If you’ve never used the command line, consider reading the section “the Terminal” of Lab 1. This guide will primarily serve as an intro to and surface-level reference for Git. If you’re looking for something more like “oh no, something happened to my repository!” and want to see potential fixes, consult the 61B git-WTFS (git weird technical failure scenarios) instead. ",
    "url": "/resources/guides/git/",
    
    "relUrl": "/resources/guides/git/"
  },"404": {
    "doc": "Beacon Guide",
    "title": "What is Beacon?",
    "content": "Rather than using bCourses, we will be using our own custom learning management system called Beacon at beacon.datastructur.es. You can use Beacon to keep track of your grades and late assignments, and you will also use it to establish partnerships. Lab 1 will walk you through getting started with Beacon. This guide will detail the different tabs in Beacon and how to effectively use the system. As we continuously work to improve Beacon, we will announce on Ed and update this guide when we introduce new features. ",
    "url": "/resources/guides/beacon/#what-is-beacon",
    
    "relUrl": "/resources/guides/beacon/#what-is-beacon"
  },"405": {
    "doc": "Beacon Guide",
    "title": "The Beacon Home Page",
    "content": "On the home page, you will see your name, your Berkeley email address, and Github username. You should make sure all the information is correct, otherwise some course functionalities will not work for you. If any of the information is incorrect, please make a private post on Ed asking us to fix these details for you. Most importantly, verify that the email address you see on Beacon is the same email used in your Gradescope account. Some assignments and extra credit opportunities have you fill out Google forms, which record the email account you are logged in with. Whenever you fill such form, make sure you are logged in from the address on specified Beacon. If you change your Berkeley email address for whatever reason during the semester, please let us know. If there is a mismatch between your Beacon email and your Gradescope/Google form email, your grades may not be accurate, so please be aware of this. ",
    "url": "/resources/guides/beacon/#the-beacon-home-page",
    
    "relUrl": "/resources/guides/beacon/#the-beacon-home-page"
  },"406": {
    "doc": "Beacon Guide",
    "title": "The Grades Tab",
    "content": "Here you will see all the points you earned for the different assignments and extra credit opportunities. Remember that CS 61B is not curved, so by making conjectures about your performance in future assignments together with the data on this tab, you can check what letter grade corresponds to your total points. You can learn more about grading bins in our Course Info page.. The grades tab gets data periodically from Gradescope. Thus, it may not be immediately updated whenever you submit an assignment to Gradescope. You can expect the grades tab to update every 24 hours. The Grades tab on Beacon is the final source of truth for your grades. If your grade on Beacon does not match what you see on Gradescope, please let us know. ",
    "url": "/resources/guides/beacon/#the-grades-tab",
    
    "relUrl": "/resources/guides/beacon/#the-grades-tab"
  },"407": {
    "doc": "Beacon Guide",
    "title": "The Groups Tab",
    "content": "For some projects, you will be working on the assignment with a partner. Your groups for these assignments will be displayed under the “Groups” tab. Use this tab to find your partner(s) and shared group repository. ",
    "url": "/resources/guides/beacon/#the-groups-tab",
    
    "relUrl": "/resources/guides/beacon/#the-groups-tab"
  },"408": {
    "doc": "Beacon Guide",
    "title": "The Extensions Tab",
    "content": "The extensions tab on Beacon is where you’ll request extensions. To view the extensions policy, go to the course info page. Additionally, visit our guide on requesting an extension here. ",
    "url": "/resources/guides/beacon/#the-extensions-tab",
    
    "relUrl": "/resources/guides/beacon/#the-extensions-tab"
  },"409": {
    "doc": "Beacon Guide",
    "title": "Beacon Guide",
    "content": " ",
    "url": "/resources/guides/beacon/",
    
    "relUrl": "/resources/guides/beacon/"
  },"410": {
    "doc": "Guides",
    "title": "Guides",
    "content": "We will try to link you to these specific guides whenever necessary. Guides may contain outdated information from previous semesters, so post on Ed if you notice anything! . ",
    "url": "/resources/guides/",
    
    "relUrl": "/resources/guides/"
  },"411": {
    "doc": "Exam Prep Tips",
    "title": "Reviewing concepts",
    "content": "Utilize course resources . Throughout the semester, we have resources for you to enhance the materials learned in class. Bridge discussion sections . Bridge sections are 2-hour long discussion sections that let us spend more time on reviewing the concepts in addition to going over worksheet problems. Because it is a longer section and we have two TAs per section, you’ll be able to get more 1:1 assistance during bridge and ask more questions to build a stronger conceptual foundation. Exam-level sections . Exam-level sections are faster paced sections that focus more on solving harder, exam-level problems. These sections are extremely helpful to learn about problem-solving approaches that can come in handy during exams. Tutor review sessions . Our amazing tutors hold exam review sessions during the weeks leading up to the exams. The sessions usually cover conceptual reviews on topics in scope for the exams, and a review worksheet to practice applying the concepts. Asynchronous resources . If for certain weeks you are unable to attend the discussion sections, there are also walkthrough videos for the discussion worksheets recorded by our incredibly awesome TAs from previous semesters. Utilizing these resources on a regular basis can put you in a better place when the exams roll around. Doing the work consistently will build more trust in your ability to review the concepts efficiently and not feeling the need to “relearn” everything for the exam. Write cheat sheets . The process of writing the cheat sheets themselves is a great way to organize and review the concepts. We suggest creating it early so that you can use it while doing past exams. Here are some useful cheat sheet materials (credit: past 61B TAs) . | Owen’s cheatsheet (Note: KD-Tree, Game trees, alpha-beta pruning, and bitwise operations are out of scope) | Crystal’s DMS flowchart | . Go to OH leading up to an exam . A heavily underutilized resource is OH leading up to an exam. It is a great place to go through a problem with TAs and ask any questions or general test taking tips. Ask good questions such as: . | How to break up the problem into smaller chunks? | How to make educated guesses based on hints from the instruction/skeleton, such as variable names? | What is a good place to start for a problem? | . Textbook . On the main page, most lectures have an associated textbook chapter. The textbook was written during the Spring 2023 semester and should contain the same concepts as the lectures. Corresponding lecture videos are embedded throughout the textbook. It’s a great way to review concepts efficiently or find the relevant lecture video to rewatch! . Study Groups . Finding other students in CS 61B to study with is one of the best ways to keep yourself accountable, clear up misconceptions, and discuss difficult topics. You can meet potential study partners through sections, Ed, student organizations, and more. ",
    "url": "/resources/exams/tips/#reviewing-concepts",
    
    "relUrl": "/resources/exams/tips/#reviewing-concepts"
  },"412": {
    "doc": "Exam Prep Tips",
    "title": "Applying concepts",
    "content": "Teach someone . This tip is based on the Feynman technique. The “someone” can be your classmate, your friend, your grandma, yourself, or an empty classroom. The key is to teach the concept in simple terms, and if you notice any conceptual gaps through the process, go back and review. You can also do this on a more regular basis to ensure that you have a solid understanding of any new concepts learned. This is a very effective way to truly test if you understand a topic conceptually. A great bonus is to improve some teaching and communication skills along the way. (future course staff alert?) . Do AND review practice exams . “Do practice exams” is probably the most common tip for successful exam prep. We suggest you take a practice exam when you first start studying, and use the results of this practice exam to guide the rest of your studying. In order to truly maximize its effectiveness to help you prepare for the exams, reviewing the exams is also crucial. The general approach is for each question that was wrong, ask yourself: Was the problem testing on WHAT the concept is, or HOW the concept is applied? . | If it’s asking about the what, then simply going back to relevant resources to review this concept is sufficient. | If it’s asking the how, then it’s best to dive deeper into the question to figure out the reasoning and logic behind using the concept this way in the specific problem scope. | . Some other general advice relating to this topic are: . | Prioritize doing past exams from the same instructor to get a better gauge of the difficulty. | If you’re in a time crunch, don’t do too many exams. But rather do one exam, look at the solution, and REDO the exam the next day. | If feasible, do the exams under a simulated testing environment. Print out the past exam and do the exam on paper while timing yourself. Go down to granularity of time for individual questions so you can gauge where you’re at in comparison to the actual exam. | We’ve released walkthrough videos for each past exam question. These are great resources to learn not only what the solution is but how someone might approach thinking about the problem and coming up with an answer. | If you are stuck on a past exam question, that’s totally okay! Rather than looking at the solution, you can try watching part of the walkthrough video as a hint and see if you can finish the rest of the question afterwards. After completing the question, reflect on which steps you’re having the most difficulty with and any concepts you’re shaky on. | . If you need additional guidance on understanding a concept or approach, feel free to ask questions on Ed or during OH! . Problem Bank . If you want to practice more problems based on specific topics, the problem bank is a great resource. (Shoutout to our amazing TAs who put this together!) . You can filter and choose specific past exam problems based on topic, difficulty, and type. The solution and walkthrough video are also linked in the problem bank, so it is an amazing asynchronous exam prep resource. ",
    "url": "/resources/exams/tips/#applying-concepts",
    
    "relUrl": "/resources/exams/tips/#applying-concepts"
  },"413": {
    "doc": "Exam Prep Tips",
    "title": "Final Preparations",
    "content": "Visualization . The power of visualization has long been utilized by professional athletes and performers. Studies have shown that when people visualize performing a task, the same set of neurons are stimulated and fired as when they are actually doing the task. Even though taking an exam might not be as daunting as competing at the Olympics (although some may argue that they are about the same), visualizing yourself taking the exam and doing well can be a helpful way to prepare yourself mentally for the upcoming exam. Of course, you still have to do the work, but by visualizing this task as detail as possible, you can train your brain to better manage stress during the exam. Sleep, eat, repeat . It’s scientifically proven that our brains reinforces learning during sleep, so getting enough sleep the night before the exam will be a lot more effective than cramming in a few more practice exams. Getting enough food will also supply your brain enough energy to tackle the exam. So please eat and sleep well! . Positive reinforcement . During the exam, it’s important to first focus on problems that you DO know how to do. Ensure correctness for the ones that you do know or have some ideas about first, then attempt the questions that you skipped. Focusing on what you already know instead of worrying too much on what you don’t know can help maintain confidence throughout the exam, which is crucial for staying calm and reducing the chance of panic. Taking the exam with a collected mentality is more likely to lead to better performances. ",
    "url": "/resources/exams/tips/#final-preparations",
    
    "relUrl": "/resources/exams/tips/#final-preparations"
  },"414": {
    "doc": "Exam Prep Tips",
    "title": "During the Exam",
    "content": "Scan first, skip if necessary . When the exam starts, take a minute to scan through all of the questions so you get an idea of what to expect. After the exam starts, if you’re looking at a problem for 10 minutes without making much progress, skip it and come back when you have more time. Draw diagrams, try small examples . If you aren’t sure how to start a problem, work through a small example and draw visualizations of the problem. As you solve the example, analyze how your brain is approaching it. What steps are you taking to break down the problem? Can you translate your logic into code? . ",
    "url": "/resources/exams/tips/#during-the-exam",
    
    "relUrl": "/resources/exams/tips/#during-the-exam"
  },"415": {
    "doc": "Exam Prep Tips",
    "title": "Exam Prep Tips",
    "content": "Preparing for exams in this class can be a stressful and challenging experience, especially when trying to balance everything else that is going on in life. In this guide, the student support team compiled some practical advice to help you approach studying more strategically and effectively, so you can perform your best on the day of the exam. Disclaimer: The exam tips provided are based on personal experiences and should be considered as advice rather than rigid rules. We encourage you to assess your own unique situation and adapt the suggestions accordingly. ",
    "url": "/resources/exams/tips/",
    
    "relUrl": "/resources/exams/tips/"
  },"416": {
    "doc": "Exam Resources",
    "title": "Past Exams",
    "content": "[ref] = Reference card. [clarifs] = Clarifications issued during the exam. If an exam doesn’t have the reference card or clarifications linked, it means we don’t have access to it, so please don’t ask. | Semester | Instructor | Midterm 1 | Midterm 2 | Final | . | Spring 2024 | Peyrin, Justin | [exam] [sol] [video] [ref] [clarifs] | [exam] [sol] [video] [ref] [clarifs] | [exam] [sol] [video] [ref] [clarifs] | . | Fall 2023 | Peyrin, Justin | [exam] [sol] [video] [ref] [clarifs] | [exam] [sol] [video] [ref] [clarifs] | [exam] [sol] [video] [ref] [clarifs] | . | Spring 2023 | Hug, Yokota | [exam] [sol] [video] | [exam] [sol] [video] | [exam] [sol] [video] | . | Fall 2022 | Hug | [exam] [sol] [video] | [exam] [sol] [video] | [exam] [sol] | . | Spring 2021 | Hug | [exam] [sol] [video] | [exam] [sol] [video] | [exam] [sol] [video] | . | Fall 2020 | Hug | [exam] [sol] [video] | [exam] [sol] [video] | [exam] [sol] [video] | . | Spring 2019 | Hug | [exam] [sol] [video] | [exam] [sol] [video] | [exam] [sol] [video] | . | Spring 2018 | Hug | [exam] [sol] [video] | [exam] [sol] [video] | [exam] [sol] [video] | . | Spring 2017 | Hug | [exam] [sol] [video] | [exam] [sol] [video*] | [exam] [sol] | . | Spring 2016 | Hug | [exam] [sol] [video] | [exam] [sol] [video] | [exam] [sol] | . | Spring 2015 | Hug | [exam] [sol] | [exam] [sol] | [exam] [sol] | . Videos marked with a * are not created by Course Staff. Additional Past Exams . | CS61B Past Exams (HKN) | CS61BL Past Exams (HKN) | CS61B Past Exams (TBP) | CS61BL Past Exams (TBP) | COS226 (Princeton) Past Exams | . ",
    "url": "/resources/exams/#past-exams",
    
    "relUrl": "/resources/exams/#past-exams"
  },"417": {
    "doc": "Exam Resources",
    "title": "Tips for Exam Prep",
    "content": "Check out this amazing Exam Prep Guide for some very helpful exam preparation tips the course staff has utilized and shared with students in the past! . ",
    "url": "/resources/exams/#tips-for-exam-prep",
    
    "relUrl": "/resources/exams/#tips-for-exam-prep"
  },"418": {
    "doc": "Exam Resources",
    "title": "Exam Resources",
    "content": "To sort and filter exam questions, access our problem bank. ",
    "url": "/resources/exams/",
    
    "relUrl": "/resources/exams/"
  },"419": {
    "doc": "Resources",
    "title": "Staff Resources",
    "content": ". | Current TA Resources Thread | . ",
    "url": "/resources/#staff-resources",
    
    "relUrl": "/resources/#staff-resources"
  },"420": {
    "doc": "Resources",
    "title": "Course Policies and Miscellaneous Guides",
    "content": ". | Style Guide | Debugging Guide | Ed Policies | Ed Guide for New Users | Partnerships Guide | Office Hours Policies | Guide to Using Soda Machines | . ",
    "url": "/resources/#course-policies-and-miscellaneous-guides",
    
    "relUrl": "/resources/#course-policies-and-miscellaneous-guides"
  },"421": {
    "doc": "Resources",
    "title": "Guides for Tools",
    "content": "Git . | Git Documentation | A Hacker’s Guide to Git | Using Git | Git WTFs, or Weird Technical Failures | . IntelliJ . | Using IntelliJ | IntelliJ WTFs | JetBrains IntelliJ Docs | IntelliJ Plugins | . ",
    "url": "/resources/#guides-for-tools",
    
    "relUrl": "/resources/#guides-for-tools"
  },"422": {
    "doc": "Resources",
    "title": "Resources",
    "content": "On this page, we’ve compiled resources from past semesters that you may find helpful! If you have any questions about these resources, please post on Ed. | Academic Resources: Student organizations and campus resources for tutoring and other academic advice. | Conceptual Resources: Topical guides, visualizations, and other conceptual resources. | Exam Resources: Exam-related resources, including past exams, a problem bank, and a guide on how to study. | Support Resources: Course and campus support resources, mostly non-academic. | . ",
    "url": "/resources/",
    
    "relUrl": "/resources/"
  },"423": {
    "doc": "IntelliJ WTFS",
    "title": "Mark Directories",
    "content": "Problem: There’s no green “Run” button next to the code I want to run. Solution: First, check if you have coffee cup icons next to your Java files in the IntelliJ sidebar: . If you see those coffee cup icons, we need to tell IntelliJ where to find your Java files. | Right-click the src folder → “Mark Directory as” → “Sources Root”: . | Then, right-click the tests folder → “Mark Directory as” → “Tests Root”: . | To check that everything worked, go to “File” → “Project Structure” → “Modules”: . In the right sidebar, make sure that you see src under “Source Folders”, and you see tests under “Test Source Folders.” . If everything looks good, press “OK” to exit the Project Structure menu. | . At this point, you should see a C icon next to your Java files, instead of the coffee cup icons. Also, the src folder should be blue, and the tests folder should be green: . If all is fixed, you should be able to run your programs now! . If things aren’t fixed, try Reopen Intellij. If things still aren’t fixed after that, try the IntelliJ nuclear option. ",
    "url": "/troubleshooting/intellij-wtfs/#mark-directories",
    
    "relUrl": "/troubleshooting/intellij-wtfs/#mark-directories"
  },"424": {
    "doc": "IntelliJ WTFS",
    "title": "Import Libraries",
    "content": "Problem: Function names are in red, and when I try to run code, Java says that a package does not exist. Solution: You need to import the libraries (library-sp25) for this project. Every time you start a new assignment (unfortunately, EVERY TIME) you must add the libraries again. | To add libraries, go to “File” → “Project Structures” → “Libraries.” . | Click the plus sign. | Select the library folder (e.g. library-sp25). | After you finish importing libraries, you should see this: . Press “OK” to apply changes and exit the menu. | . At this point, if all is fixed, the function names should no longer be red, and you should be able to run your programs now! . If things aren’t fixed, try Reopen Intellij. If things still aren’t fixed after that, try the IntelliJ nuclear option. ",
    "url": "/troubleshooting/intellij-wtfs/#import-libraries",
    
    "relUrl": "/troubleshooting/intellij-wtfs/#import-libraries"
  },"425": {
    "doc": "IntelliJ WTFS",
    "title": "Set Output Path",
    "content": "Problem: You see an error message saying “The output path is not specified for module,” like this: . Solution: IntelliJ puts all the compiled Java .class files in a special folder called out. Usually, IntelliJ is able to determine where to put this folder, but sometimes it gets confused and needs your help. | You should see a filepath written in gray at the top of the left sidebar. In the picture above, the filepath is ~/Downloads/fa24-s12345/lab01. Make a note of this. | Go to “File” → “Project Structures” → “Project.” . | In the “Compiler output” box, write down the filepath from earlier, but with an extra /out appended at the end. In this example, the output would be ~/Downloads/fa24-s12345/lab01/out. | . At this point, if all is fixed, the original “output path not specified” error message should no longer appear when you try to run your program. If things aren’t fixed, try Reopen Intellij. If things still aren’t fixed after that, try the IntelliJ nuclear option. ",
    "url": "/troubleshooting/intellij-wtfs/#set-output-path",
    
    "relUrl": "/troubleshooting/intellij-wtfs/#set-output-path"
  },"426": {
    "doc": "IntelliJ WTFS",
    "title": "Disable Git Plugin",
    "content": "Problem: You see a filename in red in the sidebar, like this: . Or, you see a “Merging main” message in the top-left, like this: . Solution: You can safely ignore these messages. These are from IntelliJ’s Git plugin, but in CS 61B, we don’t use this plugin. We only support using Git through the terminal. If you would like to disable the Git plugin to avoid seeing these messages, you can go to “IntelliJ IDEA” → “Settings” (on MacOS), or “File” → “Settings” (on Windows and Linux). In the left sidebar, select “Plugins,” and uncheck the bundled Git plugin: . Then press “OK” to save your settings. ",
    "url": "/troubleshooting/intellij-wtfs/#disable-git-plugin",
    
    "relUrl": "/troubleshooting/intellij-wtfs/#disable-git-plugin"
  },"427": {
    "doc": "IntelliJ WTFS",
    "title": "Rebuild Project",
    "content": "Sometimes, we just need to ask IntelliJ to recompile your code from scratch. To rebuild your code from scratch: “Build” → “Rebuild Project”. If things aren’t fixed, try Reopen Intellij. If things still aren’t fixed after that, try the IntelliJ nuclear option. ",
    "url": "/troubleshooting/intellij-wtfs/#rebuild-project",
    
    "relUrl": "/troubleshooting/intellij-wtfs/#rebuild-project"
  },"428": {
    "doc": "IntelliJ WTFS",
    "title": "Reopen IntelliJ",
    "content": "Sometimes the easiest thing is to simply do it all over again. Even if you know you just did everything correctly, starting over very often just fixes the problem. | Close the project: “File” → “Close Project”. | Quit the IntelliJ application. | Re-open the IntelliJ application. | Click “Open” and select the correct folder (e.g. lab01 or proj0). | If things still aren’t fixed, try the IntelliJ nuclear option. | . ",
    "url": "/troubleshooting/intellij-wtfs/#reopen-intellij",
    
    "relUrl": "/troubleshooting/intellij-wtfs/#reopen-intellij"
  },"429": {
    "doc": "IntelliJ WTFS",
    "title": "The IntelliJ Nuclear Option",
    "content": "Sometimes, the easiest thing is to simply do it ALL over again. Specifically, we need to purge Intellij’s memory and make it forget that our project ever existed. Intellij stores project information as .idea folders and .iml files. To make it forget our project, we’ll be deleting those. | Close the project: “File” → “Close Project.” | Quit IntelliJ. | In File Explorer / Finder, go to the project folder. | Now, you’ll need to show hidden files, so that .idea and .iml show up. | Guide for Windows 10 and below. | Guide for Windows 11. | Guide for Mac.. Usually you just need to press Command + Shift + . (period). | . | Delete the .idea folder and any .iml files you see. | Re-open the project in IntelliJ. You will need to follow Steps 1-6 of the Assignment Workflow Guide again. | . At this point, the project should look normal. However, if things look wrong, you may need to redo Mark Directories, Import Libraries, and/or Set Output Path. ",
    "url": "/troubleshooting/intellij-wtfs/#the-intellij-nuclear-option",
    
    "relUrl": "/troubleshooting/intellij-wtfs/#the-intellij-nuclear-option"
  },"430": {
    "doc": "IntelliJ WTFS",
    "title": "IntelliJ WTFS",
    "content": "This document is intended to help you through frequently encountered weird technical failure scenarios (WTFS) in IntelliJ. ",
    "url": "/troubleshooting/intellij-wtfs/",
    
    "relUrl": "/troubleshooting/intellij-wtfs/"
  },"431": {
    "doc": "Git WTFS",
    "title": "fatal: refusing to merge unrelated histories",
    "content": "This usually happens when someone has changed the skeleton code after you’ve pulled from it. Pull with --allow-unrelated-histories, i.e. $ git pull skeleton main --allow-unrelated-histories --no-rebase . You may need to resolve some resulting merge conflicts. or, if you’re pulling from your own s*** student repo (on a different computer for example), . $ git pull origin main --allow-unrelated-histories --no-rebase . ",
    "url": "/troubleshooting/git-wtfs/#fatal-refusing-to-merge-unrelated-histories",
    
    "relUrl": "/troubleshooting/git-wtfs/#fatal-refusing-to-merge-unrelated-histories"
  },"432": {
    "doc": "Git WTFS",
    "title": "Error: failed to push some refs??",
    "content": "Sometimes when working with others, you’ll get a message like this when you push: . $ git push origin main To https://github.com/gilbertghang/recipes.git ! [rejected] main -&gt; main (non-fast-forward) error: failed to push some refs to 'https://github.com/gilbertghang/recipes.git\" hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. What has happened here is that your remote (i.e. your online Github repository) contains commits that your local repository does not have. Luckily, Git is very good about telling you how to fix these errors: if you read the error message carefully, you’ll see that is suggests that you git pull. Do that, fix any merge conflicts, and push. Done! . ",
    "url": "/troubleshooting/git-wtfs/#error-failed-to-push-some-refs",
    
    "relUrl": "/troubleshooting/git-wtfs/#error-failed-to-push-some-refs"
  },"433": {
    "doc": "Git WTFS",
    "title": "What are all these »» symbols in my code??",
    "content": "Sometimes when you pull from a repository, you’ll get a message like this when you pull: . $ git pull origin main From github.com:Berkeley-CS61B/course-materials-sp16 * branch main -&gt; FETCH_HEAD Auto-merging proj/proj0/solution/canonical/Planet.java CONFLICT (content): Merge conflict in proj/proj0/solution/canonical/Planet.java Automatic merge failed; fix conflicts and then commit the result. The problem here is that the code on your computer had a conflict with the code in the remote repository you’re pulling from, and Git couldn’t figure out how to resolve it. Since it is unsure, Git refuses to overwrite your local code. However, when you open your Planet.java, you see some kind of crazy garbage like: . public Planet(Planet p) { &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD this.xPos = p.xPos; this.yPos = p.yPos; ======= this.xxPos = p.xxPos; this.yyPos = p.yyPos; &gt;&gt;&gt;&gt;&gt;&gt;&gt; 27ddd0c71515e5cfc7f58a43bcf0e2144c127aed . This is a good thing! Everything between &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD and ======= is what was on your computer, and everything between ======= and 27ddd0c71515e5cfc7f58a43bcf0e2144c127aed is what was on the remote server. Your job is to look for these and resolve the merge conflict yourself. In this case, the remote repository is right, so we simply delete out everything between &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD and =======, and also delete the &gt;&gt;&gt;&gt;&gt;&gt;&gt; 27ddd0c71515e5cfc7f58a43bcf0e2144c127aed marker, leaving: . public Planet(Planet p) { this.xxPos = p.xxPos; this.yyPos = p.yyPos; . Once you’ve resolved all of your merge conflicts, add all the files you manually edited, and commit them as usual, e.g. git add Planet.java git commit -m \"resolved merge conflict\" git push origin main . ",
    "url": "/troubleshooting/git-wtfs/#what-are-all-these-symbols-in-my-code",
    
    "relUrl": "/troubleshooting/git-wtfs/#what-are-all-these-symbols-in-my-code"
  },"434": {
    "doc": "Git WTFS",
    "title": "error: You have not concluded your merge (MERGE_HEAD exists).",
    "content": "If you see a message like this: . error: You have not concluded your merge (MERGE_HEAD exists). hint: Please, commit your changes before merging. fatal: Exiting because of unfinished merge. Add and commit your current changes, and then pull again. If, after pulling again, your terminal shows a message like “Please enter a commit message to explain why this merge is necessary,” see the section directly after this one. ",
    "url": "/troubleshooting/git-wtfs/#error-you-have-not-concluded-your-merge-merge_head-exists",
    
    "relUrl": "/troubleshooting/git-wtfs/#error-you-have-not-concluded-your-merge-merge_head-exists"
  },"435": {
    "doc": "Git WTFS",
    "title": "Please enter a commit message to explain why this merge is necessary",
    "content": "If you see a message like this: . Merge branch 'main' of https://github.com/Berkeley-CS61B/skeleton-sp25 # Please enter a commit message to explain why this merge is necessary, # especially if it merges an updated upstream into a topic branch. # # Lines starting with '#' will be ignored, and an empty message aborts # the commit. Git has opened a terminal text editor for you to enter a commit message. You can leave the default commit message and exit the text editor. If you see something similar to this at the bottom of your terminal: . ^G Get Help ^O WriteOut ^R Read File ^Y Prev Pg ^C Cur Pos . This indicates you’re using the Nano text editor. To quit, type Ctrl+X (both keys at the same time). If you see a bunch of tildes (~ symbols) along the left side of your terminal, and you see something similar to this at the bottom of your terminal: . \".git/COMMIT_EDITMSG\" 9L, 273C 13,1 All . This indicates you’re using the Vim text editor. To save and quit, type :wq - the colon key, then the letter w, then the letter q, one after the other (not all at the same time). ",
    "url": "/troubleshooting/git-wtfs/#please-enter-a-commit-message-to-explain-why-this-merge-is-necessary",
    
    "relUrl": "/troubleshooting/git-wtfs/#please-enter-a-commit-message-to-explain-why-this-merge-is-necessary"
  },"436": {
    "doc": "Git WTFS",
    "title": "Found a swap file",
    "content": "If you see a message like this: . Git previously opened Vim (a terminal text editor) for you to enter a commit message, but Vim crashed, possibly because you got confused and killed Vim by closing the terminal. Just to be safe, Vim has created a “swapfile,” which contains a backup of the file you were working on when Vim crashed. Assuming you’re okay with losing any half-finished commit message you might have typed, then you can safely press D to delete the swapfile. If you’d like to double-check what Vim had saved when it crashed, you can press O to see the swapfile. (It will probably be blank.) Then, when you’re done viewing the contents, you can type :q to quit - the colon key, then the letter q, one after the other (not all at the same time). Once you’ve deleted the swapfile, you can go back to what you were doing. Vim may open again to ask for a commit message - if this happens, see the section directly above this one. ",
    "url": "/troubleshooting/git-wtfs/#found-a-swap-file",
    
    "relUrl": "/troubleshooting/git-wtfs/#found-a-swap-file"
  },"437": {
    "doc": "Git WTFS",
    "title": "fatal: ‘skeleton’ does not appear to be a git repository",
    "content": "If you see a message like this: . fatal: 'skeleton' does not appear to be a git repository fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. Git might be having trouble finding where the skeleton repo is. Try running git remote -v. If your repo is set up correctly, you should see: . origin git@github.com:Berkeley-CS61B-Student/sp25-s*** (fetch) origin git@github.com:Berkeley-CS61B-Student/sp25-s*** (push) skeleton https://github.com/Berkeley-CS61B/skeleton-sp25.git (fetch) skeleton https://github.com/Berkeley-CS61B/skeleton-sp25.git (push) . If you only see the two lines corresponding to origin, and not the two lines corresponding to skeleton, then Git doesn’t know where to find the skeleton repo. To fix this, run the command below: . git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp25.git . If you only see the two lines corresponding to skeleton, and not the two lines corresponding to origin, then Git doesn’t know where to find your repo. To fix this, run the command below (replacing *** with your repo ID): . git remote add origin git@github.com:Berkeley-CS61B-Student/sp25-s***.git . If you see lines for skeleton/origin, but they’re incorrect, you can fix them by running the commands below (replacing *** with your repo ID): . git remote set-url skeleton https://github.com/Berkeley-CS61B/skeleton-sp25.git git remote set-url origin git@github.com:Berkeley-CS61B-Student/sp25-s***.git . Then, run git remote -v again and ensure that you see two lines corresponding to origin and two lines corresponding to skeleton, and they match what we show above. ",
    "url": "/troubleshooting/git-wtfs/#fatal-skeleton-does-not-appear-to-be-a-git-repository",
    
    "relUrl": "/troubleshooting/git-wtfs/#fatal-skeleton-does-not-appear-to-be-a-git-repository"
  },"438": {
    "doc": "Git WTFS",
    "title": "Reconcile Divergent Branches",
    "content": "If you see a message like this after running a git pull command: . hint: You have divergent branches and need to specify how to reconcile them. hint: You can do so by running one of the following commands sometime before hint: your next pull: hint: hint: git config pull.rebase false # merge hint: git config pull.rebase true # rebase hint: git config pull.ff only # fast-forward only hint: hint: You can replace \"git config\" with \"git config --global\" to set a default hint: preference for all repositories. You can also pass --rebase, --no-rebase, hint: or --ff-only on the command line to override the configured default per hint: invocation. fatal: Need to specify how to reconcile divergent branches. This probably means you forgot to configure Git properly in Lab 1. Specifically, you forgot to run this line: . git config --global pull.rebase false . After running that command, try pulling again, and the error message should go away. ",
    "url": "/troubleshooting/git-wtfs/#reconcile-divergent-branches",
    
    "relUrl": "/troubleshooting/git-wtfs/#reconcile-divergent-branches"
  },"439": {
    "doc": "Git WTFS",
    "title": "Multiple Repos",
    "content": "Problem: You pushed your code, but it doesn’t appear on Github or Gradescope. Possible diagnosis: You may have two copies of the sp25-s*** repository in your computer. You made changes in Copy 1, and then you ran the push command from Copy 2, so none of your changes were actually pushed to Github or Gradescope. Finding duplicate copies: How can you find if there are multiple copies of your repo in your computer? Here are some strategies: . | Use the search feature in your file explorer (e.g. Finder, Windows Explorer) to search for folders named sp25-s***. | In your terminal, after navigating to your repo, run the pwd command. This will tell you the current directory that your terminal is in. In the picture below, the current directory is /Users/peyrin/Downloads/fa24-s12345. | In IntelliJ, the location of your repo is shown in gray text in the top-left of the sidebar. In the picture below, the current directory is ~/Downloads/fa24-s12345/hw0b. Note: In filepaths, ~ is shorthand for /Users/your-username, which is your Home folder (which contains folders like Documents, Downloads, etc.). So the current directory is equivalently /Users/peyrin/Downloads/fa24-s12345. | One common place to find a duplicate repo is in your home folder: ~ or equivalently, /Users/your-username. This is where your terminal opens by default. In Lab 1, if you forgot to use cd to navigate to the right place before cloning your repo, you may have accidentally created an extra copy of your repo in the home folder. To check if your home folder has a copy of your repo, you can run cd with no arguments, which navigates to your home folder. Then you can ls to list out files and see if you spot a repo copy: . cd # Navigate to home folder pwd # Outputs the path of the home folder ls # Shows all the files in the home folder... # ...possibly including a duplicate repo? . | . Fix: You should manually copy all of your latest changes into one copy. (You can do this in a file explorer like Finder or Windows Explorer.) . Then, you should delete one of the copies (or rename it to something like sp25-s208-busted), and use only the single remaining repository for all future changes and pushes. ",
    "url": "/troubleshooting/git-wtfs/#multiple-repos",
    
    "relUrl": "/troubleshooting/git-wtfs/#multiple-repos"
  },"440": {
    "doc": "Git WTFS",
    "title": "I pulled from skeleton, but don’t see updates",
    "content": "Suppose you run git pull skeleton main to get the latest starter code, and then you delete or modify the starter code. Running git pull skeleton main again will not restore the starter code. The first time you pulled, you already incorporated the commit where the staff added the starter code, and when you deleted/modified the starter code, you added another commit on top of the staff commit. Pulling again will not re-do the previous staff commit (that’s not what “pulling” means). If you want to restore the skeleton code (possibly abandoning any progress you’ve made, if you’ve made any), see this part of the Using Git guide for how to restore a past commit. ",
    "url": "/troubleshooting/git-wtfs/#i-pulled-from-skeleton-but-dont-see-updates",
    
    "relUrl": "/troubleshooting/git-wtfs/#i-pulled-from-skeleton-but-dont-see-updates"
  },"441": {
    "doc": "Git WTFS",
    "title": "The Git Nuclear Option",
    "content": "If all else fails, we can clone a fresh copy of our repo and move any unsaved changes from the old copy into the new copy. | Close IntelliJ. | Open your file explorer (e.g. Windows Explorer, Finder on Mac). | Find your old repository folder, and rename it (e.g. from sp25-s208 to sp25-s208-busted). | Open a terminal. | Use the cd command to navigate to where you want to put your repo (e.g. cd ~/Desktop/cs61b, or something). | In the same terminal, run the clone command to download a fresh copy of your repo (replacing sp25-s*** with your repo name: git clone git@github.com:Berkeley-CS61B-Student/sp25-s***.git . | Use the cd command to navigate to the new repo: cd sp25-s*** . | Tell the new repo where to find the skeleton: git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp25.git . | Copy over the desired files from the busted copy to the fresh copy. You will have to do this step manually, e.g. by copy-pasting files in your file explorer. | . A video demo of this process is available in this video. ",
    "url": "/troubleshooting/git-wtfs/#the-git-nuclear-option",
    
    "relUrl": "/troubleshooting/git-wtfs/#the-git-nuclear-option"
  },"442": {
    "doc": "Git WTFS",
    "title": "Git WTFS",
    "content": "This document is intended to help you through frequently encountered weird technical failure scenarios (WTFS) in Git. It will be populated as questions arise. ",
    "url": "/troubleshooting/git-wtfs/",
    
    "relUrl": "/troubleshooting/git-wtfs/"
  },"443": {
    "doc": "Troubleshooting",
    "title": "Troubleshooting",
    "content": "If you have a setup issue, please check these troubleshooting guides for solutions first, before asking staff. ",
    "url": "/troubleshooting/",
    
    "relUrl": "/troubleshooting/"
  },"444": {
    "doc": "FA25 FAQs",
    "title": "Enrollment",
    "content": "Q1: Will the course expand? . We don’t know. (And we still won’t know even if we know your waitlist position, so please don’t email us to ask.) . In recent semesters, we were able to expand the course to enroll all interested students, but we cannot promise that the same will happen in Fall 2025. We will not have any information about potential course expansion until the first full week of the fall semester (August 27, 2025), at the earliest. Any updates will be posted on this page, so if you email us, you will just get redirected to this page. Q2: What are my chances of getting off the waitlist? . We don’t know. You could check Berkeleytime for enrollment trends from past semesters, but there are no guarantees as to how past trends will extrapolate to Fall 2025. Besides past trends, we have no way to estimate your odds of getting off the waitlist. If you’re on the waitlist, we strongly recommend having a backup plan in case you are unable to enroll. Q3: Can I have permission to enroll in the class? . Course staff is not in charge of enrollment. We have to follow the department’s enrollment policies. We don’t have enrollment codes to hand out or any other way to circumvent the policies on that document. If you have further questions about enrollment, please reach out to the emails listed in the linked document. Q4: I’m a concurrent enrollment student. When can I enroll in the class? . The department processes concurrent enrollment applications, not us. Concurrent enrollment applications are scheduled to be processed in the first full week of the fall semester (August 27, 2025), at the earliest. Please check this page later for updates; we have no additional information at this time, so please do not email us about concurrent enrollment until this page is updated. In past semesters, we have been able to accept all concurrent enrollment applications, but we cannot make any promises for this semester, so we recommend having a backup plan. We have no way to estimate the odds of your application being approved, so please don’t ask us. (If you ask us, you will just be redirected to this page.) . If you have a pending concurrent enrollment application, please do not email us asking to be added to bCourses (or Gradescope or Ed). We will automatically add all students with pending applications to the course. It can take 3-4 days for us to add you after you submit an application, so please be patient. If your application is approved late, you can request extensions using the form on the website, so that the first few assignments are not counted late. Being added to bCourses (and Gradescope and Ed) does not necessarily mean your application is approved; we are just adding you so that you can follow along while you wait. Q5: Can I audit the class? . All course materials that we can share with auditors will be posted publicly on the course website. See this section of the syllabus for more information about auditing. Q6: I enrolled or waitlisted in the class, but I don’t have access to Gradescope/Ed. We sync the rosters once a day, so you may need to wait a bit before being automatically added to the class. If you’ve been officially enrolled or waitlisted for 48 hours and haven’t been added, send an email to cs61b@berkeley.edu. Please don’t ask us about being added until 48 hours have passed; we don’t have time to manually add each student. Waitlisted students will be automatically added, just like enrolled students. If you join the waitlist, please follow the instructions in the paragraph above. If you have access to the CS61B class on bCourses, you can try clicking on “Ed” and “Gradescope” in the sidebar, which might automatically add you. If this doesn’t work, then please wait for us to automatically sync the rosters to add you. ",
    "url": "/policies/fa25-faqs/#enrollment",
    
    "relUrl": "/policies/fa25-faqs/#enrollment"
  },"445": {
    "doc": "FA25 FAQs",
    "title": "Exams",
    "content": "Q7: When are the exams? . Midterm 1 is Thursday, September 25, 8–10pm PT. Midterm 2 is Thursday, November 6, 8–10pm PT. The final exam is on Thursday, December 18, 8–11am PT. (Source for final exam: Registrar website.) . Exams are in-person only, so if you are enrolling in the class, you should plan on being physically present on campus for the midterm and final exam dates. Q8: Do you offer alternate time exams? . If you are unable to take the exam at the scheduled time, we will be offering only one alternate exam time, in-person only, immediately after the scheduled exam. Alternate Midterm 1 time: Thursday, September 25, 10pm–12am. Alternate Midterm 2 time: Thursday, November 6, 10pm–12am. Alternate final exam time: Thursday, December 18, 11am–2pm (you’ll have some time to walk between exams and take a quick break). There are no other alternate exam times. You cannot take the exam on other days, and you cannot take the exam earlier than the listed time. If you plan on enrolling, you should make sure you can attend the exam times. (If you have a verified DSP accommodation, we will work with you to find an exam time that meets your accommodations. If you are not registered with DSP, the paragraph above applies.) . We are only offering the alternate exam time if you are unable to take the exam at the normal time. For example, if you have another exam at the same time, you can take the alternate-time exam. However, wanting a break between non-conflicting exams would not be a valid reason to take the alternate-time exam, because in this case you are able to take the exam at the normal time. We’ll release a form closer to the exams for you to sign up for an alternate-time exam. ",
    "url": "/policies/fa25-faqs/#exams",
    
    "relUrl": "/policies/fa25-faqs/#exams"
  },"446": {
    "doc": "FA25 FAQs",
    "title": "Prerequisites",
    "content": "Q9: Do you formally enforce prerequisites? . No. The enrollment system should not block you from enrolling or waitlisting if you haven’t taken the prerequisites (CS61A). We will not drop students who haven’t taken the prerequisites. Taking CS61B without CS61A (or equivalent) is strongly discouraged. ",
    "url": "/policies/fa25-faqs/#prerequisites",
    
    "relUrl": "/policies/fa25-faqs/#prerequisites"
  },"447": {
    "doc": "FA25 FAQs",
    "title": "Attendance",
    "content": "Q10: Is attendance mandatory? . Besides exams, there is no mandatory attendance for the rest of the class. Lecture, discussion, and lab attendance is optional, though there might be a small amount of extra credit for attendance. Q11: I need to miss the first few days of class. Is that okay? . We don’t take attendance, so it’s okay if you aren’t in-person for the first few weeks of class. You do not need to contact us about missing class. However, it is still your responsibility to keep up with the assignments. Likewise, it’s okay if you need to miss some time in the middle of the semester, as long as it doesn’t overlap with exams, and you keep up with the assignments. Q12: I need to miss an exam. Is that okay? . We have a clobber policy for the midterms, so if you miss a midterm, you can use your scaled final exam score (i.e. z-score) to replace your midterm score. There is no clobber policy for the final exam, so if you cannot make the final exam time, you should not enroll in the class. Q13: Can I enroll in the class late? . If you plan on enrolling late, it is your responsibility to keep up with the class before you enroll. If you enroll late, we will give you a grace period of 3 days after the day you enroll. After the 3 days are over, you should be fully caught up with the class (all assignments due up to that point should be submitted). You can request extensions using the form on the website so that assignments submitted during this grace period are not counted late. If you need more than 3 days to catch up, you can request extensions through the form, but we cannot guarantee that they will be approved. Please don’t email us asking about extensions - use the form on the website. You can attend lectures and discussion sections before you are officially enrolled. The course website will publicly post any recordings, videos, and resources. ",
    "url": "/policies/fa25-faqs/#attendance",
    
    "relUrl": "/policies/fa25-faqs/#attendance"
  },"448": {
    "doc": "FA25 FAQs",
    "title": "Other questions",
    "content": "If you have a question that wasn’t answered above, you can email cs61b@berkeley.edu. Please don’t email instructors or TAs directly; you will get a faster answer by emailing cs61b@berkeley.edu. ",
    "url": "/policies/fa25-faqs/#other-questions",
    
    "relUrl": "/policies/fa25-faqs/#other-questions"
  },"449": {
    "doc": "FA25 FAQs",
    "title": "FA25 FAQs",
    "content": "Last updated: August 22, 2025 . Fall 2025 listing on classes.berkeley.edu . ",
    "url": "/policies/fa25-faqs/",
    
    "relUrl": "/policies/fa25-faqs/"
  },"450": {
    "doc": "Academic Misconduct",
    "title": "Academic Misconduct Philosophy",
    "content": "Given how very hard so many people in 61B work for what they achieve, we must pursue academic misconduct cases very seriously, and without much mercy. However, we also don’t want to derail your undergraduate plans for a single, albeit serious, mistake. For those of you who did do something dishonest: we understand that the pressure is very high at Berkeley, and that under this pressure, you may have done something you wouldn’t usually do. This is not a reflection on who you are as a person, but nonetheless, we must administer sanctions to maintain the integrity of the department. We hope you will learn from this experience and that it does not cause you too much grief. We hope this process is fair and encourages you to establish a more solid foundation as you move forwards with your future in CS. If you are indeed responsible, do not feel that you are somehow a tainted person! Painful though it may be now, we hope that you will instead someday reflect on this process as ultimately enriching, as it helps build you into being more resistant to taking the easy low road in future times of great duress. We understand that our detection methods can sometimes produce false positives (flagging you even though you did not do anything dishonest). If your case is a false positive, the resolution process includes multiple ways for you to request further adjudication, including asking an independent third party (the Center for Student Conduct) to review the case. That said, if you did commit an act of academic misconduct, please do not waste our time or yours by trying to get out of negative consequences. It probably won’t work and it’s unethical. For those of you want more details on the process, read further. However, you shouldn’t need these details to decide what to do. (This policy is subject to minor revisions and should not be considered set in stone.) . ",
    "url": "/policies/academic-misconduct/#academic-misconduct-philosophy",
    
    "relUrl": "/policies/academic-misconduct/#academic-misconduct-philosophy"
  },"451": {
    "doc": "Academic Misconduct",
    "title": "Misconduct Penalties",
    "content": "If you are found responsible for misconduct at the end of the process, we will apply two types of penalties: . | The academic penalty is applied by 61B course staff and affects your course grade. | The Center for Student Conduct (CSC) penalty is applied by the CSC, and 61B course staff has no control over this penalty. | . If your misconduct case involves a single non-exam assignment (e.g. one project), then the penalties are: . | Academic penalty: The assignment grade will be recorded as either a 0 or your ultimate grade will be reduced by one-third of a letter grade, whichever results in a lower final grade. | CSC penalty: Decided by the CSC. Possibly an NRW if it’s your first case (see below). | . Instead of a score of 0 on the assignment, you can optionally request an F in the class instead, allowing you to retake CS 61B in a future semester. If you retake the class, you can reuse any code that is your own original work. If you have questions about retaking the course (e.g. enrollment, GPA, grad school), we’d suggest reaching out to advising (see links below). If your misconduct case involves an exam, or it involves two or more assignments, then the penalties are: . | Academic penalty: A grade of F in the class. | CSC penalty: Decided by the CSC. Possibly an NRW if it’s your first case (see below). | . From our experience, if this is your first misconduct case at Berkeley, the CSC usually issues a “Non-Reportable Warning” (NRW). This warning is only visible to the CSC, and it does not show up on your official conduct record. (source) However, we have no control over the CSC’s process, so ultimately it is their choice whether to issue an NRW or something else. If you have further questions, you can contact the CSC (see links below). ",
    "url": "/policies/academic-misconduct/#misconduct-penalties",
    
    "relUrl": "/policies/academic-misconduct/#misconduct-penalties"
  },"452": {
    "doc": "Academic Misconduct",
    "title": "College-Level Policies",
    "content": "If you are found responsible for academic misconduct: . | You won’t be able to drop the course. If you try to drop the course, it will be reinstated. | You won’t be able to change your grading option (e.g. from graded to P/NP). | You won’t be able to take an incomplete grade in the course. | . These policies are enforced at the college level, and there is nothing that 61B course staff can do to change them. If you have further questions, you can contact advising (see links below). Sources: . | Letters and Sciences | College of Engineering | . ",
    "url": "/policies/academic-misconduct/#college-level-policies",
    
    "relUrl": "/policies/academic-misconduct/#college-level-policies"
  },"453": {
    "doc": "Academic Misconduct",
    "title": "Resolution Process",
    "content": "61B staff uses a combination of automated detection tools and manual inspection of submissions to flag potential misconduct. In order to protect against false positives, we will only initiate the misconduct process if multiple staff members have manually inspected your code, and all staff members agree that misconduct may have occurred. If even one staff member thinks that the case is a false positive, we would drop the case (and you won’t be notified). If you receive an email notifying you about potential academic misconduct, you have three options for how to proceed. | Option 1: Accept responsibility. You accept that your submission is not your own original work, or that you allowed another student to see your work (even if by accident). To select this option, you’ll need to sign a Faculty Disposition Form (FDF) accepting responsibility, and send the signed form back to us. After you select this option, we’ll apply an academic penalty. Then, we’ll send the signed form to the CSC, and they’ll apply a penalty. After both penalties have been applied, the case is closed. | Option 2: Adjudication. You are unsure if your case constitutes misconduct, or you believe that your case does not constitute misconduct. You would like to discuss the case with a member of staff. To select this option, you’ll need to book an appointment with a member of course staff, where we can hear out your side of the story and answer any questions that you may have. After our meeting: . | If you and staff both agree that no misconduct occurred, we will drop the case, and the case is closed. | If you and staff both agree that misconduct occurred, you can select Option 1, and sign and send us the form. The case will be closed after both penalties are applied. | If you and staff disagree on whether misconduct occurred, you will need to select Option 1 or Option 3 to move forward. | . | Option 3: Forwarding. You disagree with staff after meeting in Option 2, or you would like to bypass Option 2 entirely and have a third party resolve the case. To select this option, let us know, and we will forward your case to the CSC. After we forward your case to the CSC, it is out of our hands, and the CSC will conduct its own independent process. We have no control over the CSC’s process, or how long it takes. If you have questions about the CSC’s process, you can ask them (see links below). After the CSC finishes its process, the CSC will inform you and staff whether you are responsible or not responsible. | If the CSC says you were responsible, we’ll apply an academic penalty, the CSC will apply its penalty, and the case will be closed. | If the CSC says you were not responsible, we’ll drop the case (no academic penalty), and the case will be closed. | . | . Note: If we have a high volume of cases, we may not have enough staff time to hold a meeting (Option 2) with every student. If that occurs, you will have a choice between Options 1 and 3 (but not 2). ",
    "url": "/policies/academic-misconduct/#resolution-process",
    
    "relUrl": "/policies/academic-misconduct/#resolution-process"
  },"454": {
    "doc": "Academic Misconduct",
    "title": "Reusing Work",
    "content": "You may reuse any code as long as it is your own original work, and you followed our collaboration policies when creating that code. For example, you might have taken 61B in a previous semester, but dropped the course halfway through. Or, you might have completed some of the assignments ahead of time. Reusing this code is fine, as long as you are the original author of that code, and that code was produced in a way that’s consistent with our collaboration policies (e.g. you did not generate the code with ChatGPT). If you are not certain if the code is your own original work, don’t use it! You should instead delete the code and start from scratch. Remember, looking at any code that is not yours constitutes academic misconduct. ",
    "url": "/policies/academic-misconduct/#reusing-work",
    
    "relUrl": "/policies/academic-misconduct/#reusing-work"
  },"455": {
    "doc": "Academic Misconduct",
    "title": "Resources",
    "content": "We understand that the misconduct process can be stressful, and there’s a lot of information to process. Here are some resources to help you through the process: . | If you have questions about the Center for Student Conduct, you can visit their website (which has an email you can contact): https://conduct.berkeley.edu/ | If you have questions about how this case will affect you outside of the class, feel free to contact CS advising, L&amp;S advising, and/or CoE advising. | If you need someone to talk to, CAPS (Counseling and Psychological Services) is a resource available to you. | . If you have questions for 61B course staff, the one and only email to contact is: cs61b-misconduct@berkeley.edu. Do not email other 61B emails, and do not email individual instructors or staff members; you won’t get a response. ",
    "url": "/policies/academic-misconduct/#resources",
    
    "relUrl": "/policies/academic-misconduct/#resources"
  },"456": {
    "doc": "Academic Misconduct",
    "title": "Academic Misconduct",
    "content": " ",
    "url": "/policies/academic-misconduct/",
    
    "relUrl": "/policies/academic-misconduct/"
  },"457": {
    "doc": "Extensions Policy",
    "title": "Deadline Philosophy",
    "content": "61B is a fast-paced course, especially in the first few weeks. If you fall behind, it will be very difficult to catch up. However, we understand that you may be busy, tired, or experiencing a crisis, or that you may have occasional one-off conflicts like performances to attend, waves to surf, etc. We would like your grade to reflect what you demonstrate proficiency in and accomplish in the class, and have designed some flexibility to our lateness policy to achieve that as much as possible. Your health, safety, and well-being are the priority, and ideally your grades should reflect what you have learned, not when you learned it. Our extensions policy trusts that you are adults who can handle your own time management, while understanding that some firmness in the deadlines may be necessary to keep you on track. If you request an extension, we trust that you understand that you will need to spend extra time to catch up with the class. Leading up to an assignment deadline, we usually provide increased support for that assignment (in the form of increased staffing). As a result, continuing to work on an assignment after the original deadline may lead to slower response times on Ed/longer wait times in office hours, as staff will actively prioritize assignments whose deadlines have not passed. ",
    "url": "/policies/extensions/#deadline-philosophy",
    
    "relUrl": "/policies/extensions/#deadline-philosophy"
  },"458": {
    "doc": "Extensions Policy",
    "title": "How to Request Extensions",
    "content": ". | Navigate to the extensions page on Beacon. | In the “Requesting an Extension” form, fill out each field and click “Submit”. | We’ll respond to your request in 1–2 business days. | . Long Extensions . If you are planning to request for an extension that is more than 7 days, please fill out the extenuating circumstances form and do not request for an extension on beacon. ",
    "url": "/policies/extensions/#how-to-request-extensions",
    
    "relUrl": "/policies/extensions/#how-to-request-extensions"
  },"459": {
    "doc": "Extensions Policy",
    "title": "Extenuating Circumstances",
    "content": "If you experience significant extenuating circumstances that prevent you from completing assignments for an extended amount of time, and you think that the extensions system is not enough to support you, then you can fill out the extenuating circumstances form to let us know and request for more accommodations. You should also fill out this form if you intend to request for an extension that is longer than 7 days, as mentioned above. Some examples of extenuating circumstances include: Extended sickness, technical issues (broken laptop), family emergency, etc. If you would like to meet with a staff member and discuss your situation in more detail, feel free to sign up for a student support meeting here. ",
    "url": "/policies/extensions/#extenuating-circumstances",
    
    "relUrl": "/policies/extensions/#extenuating-circumstances"
  },"460": {
    "doc": "Extensions Policy",
    "title": "Student Support Meetings",
    "content": "Student support meetings are 20 minutes, online one-on-one meetings where you can speak to a staff member about DSP accommodations, extenuating circumstances, long extensions (&gt; 7 days), or general advice and support resources for success in the course. You can book an appointment with us here, or by clicking on the “student support” tab at the upper right hand corner of the course website’s home page. ",
    "url": "/policies/extensions/#student-support-meetings",
    
    "relUrl": "/policies/extensions/#student-support-meetings"
  },"461": {
    "doc": "Extensions Policy",
    "title": "Processing Extensions",
    "content": "Extensions are not always reflected on Gradescope. You might see your assignment tagged as late on Gradescope, like this: . You can ignore that tag. The autograder score you see on Gradescope is your score for the assignment. The “2 Days, 12 Hours Late” tag does not affect your grade. If your extension was approved after you submitted the assignment, then the autograder might mark your submission late and give you a score of 0.001. If you see a score of 0.001, but that score is incorrect because you had an approved extension, then you can make a private post on Ed in the Logistics → Grade Corrections category, and we can re-run the autograder for you. Make sure to fill out the entire Ed post template! . It can take up to a week for scores on Gradescope to be synced to Beacon. If your Beacon grade still looks incorrect after a week (not earlier), then you can make a private post on Ed in the Logistics → Grade Corrections category. ",
    "url": "/policies/extensions/#processing-extensions",
    
    "relUrl": "/policies/extensions/#processing-extensions"
  },"462": {
    "doc": "Extensions Policy",
    "title": "Extensions Policy",
    "content": "Extensions will be processed on a case-by-case basis. Extensions are not guaranteed until you receive a status change in Beacon, or an email from cs61b-student-support@berkeley.edu if you requested an extension through the extenuating circumstances form. It takes staff 1–2 business days to respond to extension requests. Mondays through Fridays are business days, and Saturdays and Sundays are not. If you request an extension request on Friday, you may not get a response until the following Monday. As a result, please be timely when requesting extensions. If you request an extension at 11:50pm on the due date, please don’t expect a 10-minute response time. If you request an extension, but you have not heard back from staff, you should make your best submission (just in case the extension is not approved). Then, you can continue working after the deadline, pretending that your extension is approved. Remember, though, extensions are not guaranteed until you receive an official response. Please do not post on Ed, email course emails, or email individual TAs/instructors about extension requests. This just creates extra work for us and slows down our response time. Once you’ve submitted the request through Beacon, we’ll process requests in order, and contacting us again will not speed things up. Lastly, please note that you don’t have to fulfill certain “criteria” for us to justify your need for support and the approval of your extension requests. We hope that the extension request process is as inclusive and accommodating as possible, and don’t hesitate to reach out if you believe that you have been treated unjustly throughout the process. Homeworks 3 and 4 are conceptual assignments to prepare you for Midterm 2 and the final exam. They are in scope for Midterm 2 and the final exam, respectively. If you choose to extend those assignments, it is your responsibility to understand the content covered in those homeworks for the exams. You can not request an extension for Surveys and Project 3B/C Final Checkoff. ",
    "url": "/policies/extensions/",
    
    "relUrl": "/policies/extensions/"
  },"463": {
    "doc": "Extensions Policy",
    "title": "DSP Extension Accommodations",
    "content": "If you have DSP extension accommodations, you will be able to request an automatically approved extension of up to 3 days on Beacon for all assignments. If you would like to request for a DSP accommodation related extension that is between 3 - 7 days, you will be able to do so on Beacon and you may simply put “DSP accommodation” as the reason. We will cross-check with our DSP records to make the decision. If you would like to request for an extension that is &gt; 7 dyas, please request through the extenuating circumstances form. We will release more details about dsp-related extension accommodations for project 3B/C final checkoff later on in the semester. We will not provide accommodations on extending surveys. If you have any questions related to your DSP accommodation, feel free to reach out to a staff member through a student support meeting! . ",
    "url": "/policies/extensions/#dsp-extension-accommodations",
    
    "relUrl": "/policies/extensions/#dsp-extension-accommodations"
  },"464": {
    "doc": "CS 47B",
    "title": "CS 47B Coursework",
    "content": ". | Lab 1 (Setting up your computer / IntelliJ) | Lab 2 (Debugging) | Lab 3 (Testing) | Lab 6 (BSTMap) | Lab 7 (HashMap) | Homework 1 (Being a Good Classmate) | Homework 3 (Theory-based homework) | Homework 4 (Theory-based homework) | Project 2 (Ngordnet) | Project 3 (Designing a large system from scratch - Build Your Own World) | . To submit assignements, students in CS47B follow the same workflow as students in CS61B, which is taught in Lab 1. Students will submit their assignments to a Gradescope titled CS61B. Although this Gradescope contains lots of assignments, students are not required to do additional assignments to the ones listed above. For more information about submitting assignments with a partner, refer to the Collaboration section below. ",
    "url": "/policies/47b/#cs-47b-coursework",
    
    "relUrl": "/policies/47b/#cs-47b-coursework"
  },"465": {
    "doc": "CS 47B",
    "title": "Grades",
    "content": "Your score will be based entirely on your performance on these homeworks, labs, and projects. There will be no exams. Optional assignments and 61B assignments not listed above are not graded, but you might find them cool. CS 47B is not graded on a curve, and grade bins are released below. Points for each assignment will follow 61B: . | Labs: 5 points each | Homeworks: 15 points each | Project 2 and 3: 125 points each | . For CS 47B students, there are 320 total points, including 5 labs, 3 homeworks, and 2 projects. The grade bins are: . | A+ | A | A- | B+ | B | C | . | 315 | 285 | 250 | 163 | 134 | 90 | . ",
    "url": "/policies/47b/#grades",
    
    "relUrl": "/policies/47b/#grades"
  },"466": {
    "doc": "CS 47B",
    "title": "Deadlines and Extensions",
    "content": "The deadlines and extensions policy for CS 47B aligns with the self-paced nature of the course. | Deadlines: Each assignment’s deadline follows the due dates set by 61B, which can be found on the main page. | Extensions: No partial credit is given for late submissions. However, you can apply for extensions via Beacon’s Extensions tab. Extensions up to 2 weeks will be automatically granted. If you would like an extension beyond 2 weeks of the assignment deadline, you may submit a request through Beacon or email cs47b@berkeley.edu your request. | . All assignments must be submitted by the end of the semester, May 12 (5/12). Additionally, Project 3 has a hard deadline of May 5 (5/5) due to scheduling project presentations. Checkoffs for Project 3 can either be completed during 61B sections or alternate times during RRR week/finals week. If a student or their group needs a checkoff during RRR week/finals week due to an extenuating circumstance, they should email cs47b@berkeley.edu to schedule a time. ",
    "url": "/policies/47b/#deadlines-and-extensions",
    
    "relUrl": "/policies/47b/#deadlines-and-extensions"
  },"467": {
    "doc": "CS 47B",
    "title": "Resources",
    "content": "As a CS 47B student, you are not required or expected to attend any CS 61B course meetings. However, you are welcome and encouraged to come to any CS 61B events to help you succeed in the course, including lectures, labs, office hours, and discussion sections. There is one exception: To get credit for Project 3, you will have to do a checkoff with a TA during week 15. ",
    "url": "/policies/47b/#resources",
    
    "relUrl": "/policies/47b/#resources"
  },"468": {
    "doc": "CS 47B",
    "title": "Collaboration",
    "content": "All work for CS 47B will be solo except for projects, where you will have the option to pair up with another 47B student. You’re allowed to talk to others, but your work should be your own. See Policies on Collaboration and Academic Misconduct. For Projects 2 and 3, 47B student project partners are optional but strongly recommended. Working with a partner can enhance your learning experience by providing different perspectives and enabling collaborative problem-solving. | Finding partners: Closer to project dates, CS47B staff will post a thread on the Ed discussion board for CS47B students to find other CS4B Student partners. CS61B students pairing with CS47B students is not allowed. | Submitting with a group: To submit an assignment with a partner, there are two steps involved. First, the group will need to complete a partnership form. (Project 2 Partnership Form, Project 3 Partnership Form) Secondly, one student from the partnership will submit to Gradescope. | . ",
    "url": "/policies/47b/#collaboration",
    
    "relUrl": "/policies/47b/#collaboration"
  },"469": {
    "doc": "CS 47B",
    "title": "Communication",
    "content": "Most communication, including announcements and updates, for 47B will be through the 47B course email, cs47b@berkeley.edu. The course also has a “47B” topic on 61B’s Ed forum (linked in the nav bar). If you have questions about the course, feel free to ask them there! Making public posts also allows other 47B students to view and answer them. ",
    "url": "/policies/47b/#communication",
    
    "relUrl": "/policies/47b/#communication"
  },"470": {
    "doc": "CS 47B",
    "title": "Getting Help",
    "content": "If you need help with labs, homeworks, or projects, please come to lab or office hours. The schedule is located at the bottom of the website’s main page. All sections are open to 47B students! . ",
    "url": "/policies/47b/#getting-help",
    
    "relUrl": "/policies/47b/#getting-help"
  },"471": {
    "doc": "CS 47B",
    "title": "Getting Started",
    "content": ". | Review the 47B course page and the 61B course policies (“General Background Information”, “Resources”, “Collaboration and Academic Misconduct” sections). | Check your email for a bCourses invitation to 61B. This will give you access to our course forum Ed and Gradescope. Reach out to cs47b@berkeley.edu if you run into issues or have not received an invite. | Start setting up your computer with the instructions in Lab 1. By the end of this lab, you should have your Github repository, Beacon account, and development environment. | Fill out the Spring 2025 CS 47B introductory survey. | Get started on coursework. Everything is linked from the course website. All CS 47B students should start with Lab 1 “Setting Up Your Computer” and work your way down the labs column until you’ve completed Lab 3. HWs and projects will be released later in the semester. | . ",
    "url": "/policies/47b/#getting-started",
    
    "relUrl": "/policies/47b/#getting-started"
  },"472": {
    "doc": "CS 47B",
    "title": "CS 47B",
    "content": "CS 47B is a self-paced course where you will complete a subset of the CS 61B curriculum. Assignments are released at the same time as the 61B content schedule. ",
    "url": "/policies/47b/",
    
    "relUrl": "/policies/47b/"
  },"473": {
    "doc": "Linux/Unix",
    "title": "A. Setup",
    "content": "Setting up Linux for 61B is super easy, all you have to do is use your package manager (apt, yum, etc) to install the Java JDK, git and curl. To install and configure the Java JDK, git and curl on Ubuntu: . sudo apt install openjdk-17-jdk git curl . If you’re able to successfully install Java, you can skip the step later on in the lab to download it through IntelliJ (Installing Java). You can also install IntelliJ using: . sudo snap install intellij-idea-community --classic . If IntelliJ installs successfully without errors using this command, skip over the installing IntelliJ section in the main lab page. ",
    "url": "/labs/lab01/linux/#a-setup",
    
    "relUrl": "/labs/lab01/linux/#a-setup"
  },"474": {
    "doc": "Linux/Unix",
    "title": "Linux/Unix",
    "content": " ",
    "url": "/labs/lab01/linux/",
    
    "relUrl": "/labs/lab01/linux/"
  },"475": {
    "doc": "Mac OS",
    "title": "A. Setup",
    "content": ". | Install the Xcode Command Line Tools through your terminal by running this command (it should already be available on macOS - try using the search feature/Finder to find it): . xcode-select --install . This might take a while. If you are on an older system, you may have to update your software. If you run into any error regarding not enough free space, please double check how much free storage you have left (a rough estimate of what is needed is at least 40GB of free space). You may need to also restart your laptop. There is also a StackOverflow post that you can reference here if it’s a similar issue. If you are having trouble though, please come find a staff member to help you! . | At this point, verify that git is installed with . git --version . You have successfully installed git if this command returns a valid version number and does not fail. If the installation is good, skip the rest of the guide and return to the lab. | . ",
    "url": "/labs/lab01/mac/#a-setup",
    
    "relUrl": "/labs/lab01/mac/#a-setup"
  },"476": {
    "doc": "Mac OS",
    "title": "B. Git Install Issues",
    "content": "If you had installation issues with Git try the instructions “Installing on macOS” at this link. Contact your TA if you are still having issues. ",
    "url": "/labs/lab01/mac/#b-git-install-issues",
    
    "relUrl": "/labs/lab01/mac/#b-git-install-issues"
  },"477": {
    "doc": "Mac OS",
    "title": "Mac OS",
    "content": " ",
    "url": "/labs/lab01/mac/",
    
    "relUrl": "/labs/lab01/mac/"
  },"478": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "greeting57",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#greeting57",
    
    "relUrl": "/homeworks/hw2/outputs/#greeting57"
  },"479": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "heart25",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#heart25",
    
    "relUrl": "/homeworks/hw2/outputs/#heart25"
  },"480": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input10-no",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input10-no",
    
    "relUrl": "/homeworks/hw2/outputs/#input10-no"
  },"481": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input10",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input10",
    
    "relUrl": "/homeworks/hw2/outputs/#input10"
  },"482": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input1-no",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input1-no",
    
    "relUrl": "/homeworks/hw2/outputs/#input1-no"
  },"483": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input1",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input1",
    
    "relUrl": "/homeworks/hw2/outputs/#input1"
  },"484": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input20",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input20",
    
    "relUrl": "/homeworks/hw2/outputs/#input20"
  },"485": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input2-no",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input2-no",
    
    "relUrl": "/homeworks/hw2/outputs/#input2-no"
  },"486": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input2",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input2",
    
    "relUrl": "/homeworks/hw2/outputs/#input2"
  },"487": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input3",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input3",
    
    "relUrl": "/homeworks/hw2/outputs/#input3"
  },"488": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input4",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input4",
    
    "relUrl": "/homeworks/hw2/outputs/#input4"
  },"489": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input50",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input50",
    
    "relUrl": "/homeworks/hw2/outputs/#input50"
  },"490": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input5",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input5",
    
    "relUrl": "/homeworks/hw2/outputs/#input5"
  },"491": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input6",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input6",
    
    "relUrl": "/homeworks/hw2/outputs/#input6"
  },"492": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input7",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input7",
    
    "relUrl": "/homeworks/hw2/outputs/#input7"
  },"493": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input8-dups",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input8-dups",
    
    "relUrl": "/homeworks/hw2/outputs/#input8-dups"
  },"494": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input8-no",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input8-no",
    
    "relUrl": "/homeworks/hw2/outputs/#input8-no"
  },"495": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "input8",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#input8",
    
    "relUrl": "/homeworks/hw2/outputs/#input8"
  },"496": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "jerry47",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#jerry47",
    
    "relUrl": "/homeworks/hw2/outputs/#jerry47"
  },"497": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "sedgewick60",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#sedgewick60",
    
    "relUrl": "/homeworks/hw2/outputs/#sedgewick60"
  },"498": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "snake101",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#snake101",
    
    "relUrl": "/homeworks/hw2/outputs/#snake101"
  },"499": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "snake13",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#snake13",
    
    "relUrl": "/homeworks/hw2/outputs/#snake13"
  },"500": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "wayne98",
    "content": ". ",
    "url": "/homeworks/hw2/outputs/#wayne98",
    
    "relUrl": "/homeworks/hw2/outputs/#wayne98"
  },"501": {
    "doc": "\"Expected Outputs - HW 2: Percolation\"",
    "title": "\"Expected Outputs - HW 2: Percolation\"",
    "content": " ",
    "url": "/homeworks/hw2/outputs/",
    
    "relUrl": "/homeworks/hw2/outputs/"
  },"502": {
    "doc": "Partnerships",
    "title": "Deadlines",
    "content": "Warning: There are 3 deadlines for this project, and some deadlines require you to submit multiple deliverables. Please double-check that you submitted everything! | Assignment | Tasks | Deliverable | Points | Due Date | . | Team Formation | - Task 0: Partnerships | Pre-Project Google Form | 2.5 | Wed, Apr 911:59pm PT | . | Project 3A | - Task 1: Setup- Task 2: Design Document- Task 3: World Generation | World Screenshots on Gradescope | 10 | Fri, Apr 1811:59pm PT | . | Design Document | 7.5 | . | Mid-Project Google Form | 2.5 | . | Project 3B | - Task 4: Main Menu- Task 5: Interactivity- Task 6: HUD- Task 7: Saving and Loading- Task 8: Ambition Features | Code on Gradescope(0 pts, but required for checkoff) | 0 | Tue, Apr 2911:59pm PT | . | Live Checkoff with TA(Checkoffs will happen 4/28 – 5/2) | 100 | . | Post-Project Google Form | 2.5 | . To request extensions on Project 3, both partners need to submit separate extension requests on Beacon. ",
    "url": "/projects/proj3/partnerships/#deadlines",
    
    "relUrl": "/projects/proj3/partnerships/#deadlines"
  },"503": {
    "doc": "Partnerships",
    "title": "Task 0: Pre-Project Partnership Form",
    "content": "Submit the Project 3 Pre-Project Partnership Form. You will receive an email receipt to confirm that you’ve submitted it. We also recommend checking out the Project 3 Partnership Guide. Once we create your partnership, you cannot change it later. If you believe an error occurred in your partnership formation, or you would like to request to dissolve your partnership, please fill out the Project 3 Partnership Adjustment Form. ",
    "url": "/projects/proj3/partnerships/#task-0-pre-project-partnership-form",
    
    "relUrl": "/projects/proj3/partnerships/#task-0-pre-project-partnership-form"
  },"504": {
    "doc": "Partnerships",
    "title": "Partnerships",
    "content": " ",
    "url": "/projects/proj3/partnerships/",
    
    "relUrl": "/projects/proj3/partnerships/"
  },"505": {
    "doc": "3A: World Generation",
    "title": "Deadlines",
    "content": "Warning: There are 3 deadlines for this project, and some deadlines require you to submit multiple deliverables. Please double-check that you submitted everything! | Assignment | Tasks | Deliverable | Points | Due Date | . | Team Formation | - Task 0: Partnerships | Pre-Project Google Form | 2.5 | Wed, Apr 911:59pm PT | . | Project 3A | - Task 1: Setup- Task 2: Design Document- Task 3: World Generation | World Screenshots on Gradescope | 10 | Fri, Apr 1811:59pm PT | . | Design Document | 7.5 | . | Mid-Project Google Form | 2.5 | . | Project 3B | - Task 4: Main Menu- Task 5: Interactivity- Task 6: HUD- Task 7: Saving and Loading- Task 8: Ambition Features | Code on Gradescope(0 pts, but required for checkoff) | 0 | Tue, Apr 2911:59pm PT | . | Live Checkoff with TA(Checkoffs will happen 4/28 – 5/2) | 100 | . | Post-Project Google Form | 2.5 | . To request extensions on Project 3, both partners need to submit separate extension requests on Beacon. ",
    "url": "/projects/proj3/proj3a/#deadlines",
    
    "relUrl": "/projects/proj3/proj3a/#deadlines"
  },"506": {
    "doc": "3A: World Generation",
    "title": "Code Overview",
    "content": "Lab 9 . Before you start this project, we highly recommend that you complete at least the first 3 tasks in lab 9. These tasks will introduce you to: . | The Project 3 tile engine. | The StdDraw library. | Creating a simple user interface and a real time “game loop”. | Saving and loading the state of a simulation (task 4). | . Skeleton Code . A walkthrough of the new skeleton code is available here. This is from a past semester, so some terms may be outdated (e.g. “Phase 1” is now “Project 3A” and the “AutograderBuddy” is now deprecated). In the TileEngine package, you’ll find the following useful files: . | TERenderer.java contains rendering-related methods. | TETile.java represents a tile. | Tileset.java has some pre-made tile designs that you can use. | . In the Utils package, you’ll find the following useful file: . | RandomUtils.java has methods for generating randomness for your world. | . In the Core package, you’ll write code for your game. We recommend putting all your code in this package (though this is not required). | Main.java is how your user starts the entire system. | World.java represents your world! | You can add other classes of your own, too! | . This project makes heavy use of StdDraw, which is a package that has basic graphics rendering capabilities. Additionally, it supports user interaction with keyboard and mouse clicks. You will likely need to consult the API specification for StdDraw at some points in the project. See here for the API specification. Imports . Your project should only use standard Java libraries or any libraries we provided with your repo and library-sp25. Here is a non-comprehensive list of allowed imports: . | java.util.List, java.util.ArrayList, java.util.Collections, java.awt.*, java.io.*, or anything else starting with java. is fine. | javax.sound, javax.imageio, javax.swing.JOptionPane, or anything else starting with javax. is fine. | edu.princeton.cs.algs4.StdDraw, edu.princeton.cs.algs4.StdAudio, or anything else starting with edu.princeton.cs.algs4. is fine, because this is in library-sp25. | tileengine.TETile, utils.RandomUtils, or anything else starting with tileengine. or utils. is fine, because these are the starter code. | . ",
    "url": "/projects/proj3/proj3a/#code-overview",
    
    "relUrl": "/projects/proj3/proj3a/#code-overview"
  },"507": {
    "doc": "3A: World Generation",
    "title": "Conceptual Overview",
    "content": "Creating a Tile Array . At a high level, your goal is to create a 2D array of TETile objects, and fill in the array with different tiles, to create a nice-looking world. Then, you can call one of our library functions to display this world to the user. Important notes on orientation: . | world[0][0] corresponds to the bottom-left tile of the world. | The first coordinate is the x-coordinate. For example, world[8][0] is 8 spaces to the right of the bottom-left tile. | The second coordinate is the y-coordinate. For example, world[0][3] is 3 spaces above the bottom-left tile. | . If you’re unsure of the tile layout, you should complete lab 9 in which you’ll write some short sample programs that draw sample grids to deepen your understanding. If you confuse x/y or up/down, you’re going to be incredibly confused when debugging. Each entry of the 2D array can be filled in with a tile from our default library of tiles in Tileset.java. Here’s a snippet of code that creates a world with width 5 and height 3, and fills in a few squares: . private static final int WIDTH = 5; private static final int HEIGHT = 3; // Create grid of tiles (all null to begin with). TETile[][] world = new TETile[WIDTH][HEIGHT]; // Fill grid with NOTHING tiles. for (int x = 0; x &lt; WIDTH; x++) { for (int y = 0; y &lt; HEIGHT; y++) { world[x][y] = Tileset.NOTHING; } } // Add some tiles to the grid. world[0][1] = Tileset.WALL; // The # sign. world[3][0] = Tileset.FLOWER; // The pink flower. world[2][2] = Tileset.MOUNTAIN; // The gray triangle. The resulting world would look like this when it’s rendered: . Notice that we had to explicitly assign unused squares to Tileset.NOTHING, the pure black tile. If you don’t initialize unused squares, you’ll get a NullPointerException when you try to draw the world. Rendering Tiles . Once you have your 2D world array, it’s time to show it to the user! . Here’s a snippet of code that takes in a 2D world array, and displays it to the user: . // Initialize the tile rendering engine with a window of size WIDTH x HEIGHT. Call this only once. TERenderer ter = new TERenderer(); ter.initialize(WIDTH, HEIGHT); // Create and fill grid of tiles (all null to begin with). // Omitted: Code to fill the grid with tiles. TETile[][] world = new TETile[WIDTH][HEIGHT]; ... // Draw the 2D grid to the screen. Call this every time you re-draw the world. ter.renderFrame(world); . Note: Later in the project, you’ll be animating the game (displaying different worlds as the user moves around). Be sure to call initialize only once, to set up the window. Then, you can call render as many times as you want. The rendering engine calls all the necessary StdDraw methods for you. We recommend against using StdDraw commands like setXScale or setYScale unless you really know what you’re doing, as you may considerably alter or damage the a e s t h e t i c of the system otherwise. Pseudo-Randomness . To generate random numbers in Java, we can use create a Random object, which represents a random number generator: . Random r = new Random(); // Totally random. Don't do this in Project 3. System.out.println(r.nextInt()); System.out.println(r.nextInt()); System.out.println(r.nextInt()); . Every time you run this program, you’ll get 3 totally random integers. What if we want to control the output of the random number generator (e.g. for debugging purposes)? In that case, we can provide a seed to the constructor: . Random r = new Random(1000); // Pseudorandom. Do this in Project 3. System.out.println(r.nextInt()); System.out.println(r.nextInt()); System.out.println(r.nextInt()); . r is now a pseudorandom number generator, because it generates a deterministic sequence of random-looking numbers based on the seed you provide. If you provide the same seed, you will get the same sequence of values. For example, every time you run this program, you will get the same 3 integers. Here’s another example: . Random r = new Random(82731); System.out.println(r.nextInt()); r = new Random(82731); System.out.println(r.nextInt()); . This code snippet will always print out the same number twice. If you run this program multiple times, you’ll still get the same number twice. In Project 3, you should always seed your Random objects, so that your worlds look random, but you can re-create them consistently for debugging and grading purposes. The RandomUtils class provides some useful methods for getting other types of randomness out of a Random object, examples include: . | int uniform(Random random, int a, int b): Returns an integer from the range [a, b) | T randomChoice(Random random, List&lt;T&gt; items): Returns a random item from items. | void shuffle(Random random, Object[] a): Shuffles the given array. | double gaussian(Random random, double mu, double sigma): Gives a sample from a Gaussian distribution. | . Note: Most students won’t use any of the fancy stuff from RandomUtils. ",
    "url": "/projects/proj3/proj3a/#conceptual-overview",
    
    "relUrl": "/projects/proj3/proj3a/#conceptual-overview"
  },"508": {
    "doc": "3A: World Generation",
    "title": "World Requirements",
    "content": "Your goal in Project 3A is to write a world generator that can create pseudorandom worlds with hallways and floors. Here are some examples of valid worlds, where # is wall, dot/quote is floor, and the empty square is the empty space (outside the world). Valid . Requirements for a valid world: . | The world must include distinct rooms and hallways. For any floor square, it should be obvious whether that square belongs to a room or a hallway. It’s okay if you occasionally generate some worlds where a few squares are ambiguous, but the vast majority (&gt;90%) of floor squares should be clearly identifiable as a room or a hallway. Overlapping rooms are fine, as long as it’s clear that the squares belong to rooms, not hallways. (click to expand) Examples of invalid worlds, because we can't tell where rooms and hallways are. | At least some rooms should be rectangular. You can optionally support rooms of other shapes as well. | Hallways should be width-1 or width-2. However, hallways must be visually distinct from rooms. The vast majority of students use width-1 hallways. (click to expand) Examples of hallway widths. Below is a width 1 hallway (most/all hallways should look like this): Below is a width 2 hallway: | Your world generator must be capable of generating hallways that include turns (or equivalently, straight hallways that intersect). Random worlds should generate a turning hallway with high frequency, in that a majority of worlds should have a turning hallway. | The world should not have any dead-end hallways. Hallways should always lead into rooms. (click to expand) Example of an invalid world, because it has a dead-end hallway. | Walls, floors, and empty spaces should all be visually distinct. The easiest way to do this is to use three different tile types: one for walls, one for floors, and one for empty spaces. (click to expand) Example of an invalid world, because we can't distinguish between walls and floors. | Walls in the corners of rooms and hallways are optional. (click to expand) As an example, all these rooms and hallways are valid. As an example, the left room has walls in the corners, but the right room does not. Either one is fine. (Note: This world itself would be invalid because the two rooms are disconnected.) As an example, the top-left corner of this hallway has a wall tile, but the top-right corner of this hallway does not have a wall tile. Either one is fine. (Note: This world itself would be invalid because there are no rooms.) | All floor tiles (rooms and hallways) should be reachable from each other. Note: As part of the ambition features you may end up with worlds that are only conditionally reachable, e.g. using teleporters, locked doors, destructable walls, etc. In other words, it should be possible to trace a path of floor tiles between any pair of floor tiles. | All the space “inside” the walls should be floor tiles, and all the space “outside” the walls should be empty space tiles. In other words, a floor tile should only be bordered by floor tiles or wall tiles. | Rooms cannot clip off the edge of the world. In other words, there should be no floor tiles on the edge of the world. (click to expand) Example of an invalid world, because it clips off the world. | The world must not have excess unused space. There’s no strict requirement, but try to consistently fill at least 50% of the world with rooms and hallways. (click to expand) Example of an invalid world, because there are too few rooms. | . Pseudorandom . Requirements for a pseudorandom world: . | The world must be pseudorandom. If the user chooses the same seed twice, the resulting world must be identical. If the user chooses two different seeds, the resulting worlds should be different. | Different worlds should different numbers of rooms and hallways. It’s okay if your numbers always fall in a fixed range. For example, it’s okay if all worlds have between 8 and 12 rooms, as long as different worlds have different numbers of rooms. 8 to 12 is just an example here; feel free to have more or fewer rooms. | Different worlds should have rooms and hallways in different locations. For example, if every world you generate has a room in the exact same place, that’s not sufficiently random. | Different rooms should have different widths and heights. | Different hallways should have different lengths. | The world should be substantially different each time, i.e. you should not have the same basic layout with easily predictable features. | You can pick any window size you want, as long as the window size is reasonable (e.g. not something tiny like 3×3), and the entire window is visible on your computer. For example, a fixed, non-random window size is fine. | . Clarifications . Note on grading: We know that some of these requirements are subjective, and we’ll try to be generous as long as your worlds follow the spirit of the requirements. Staff cannot answer questions like “is my world valid” or “is my world good enough” on Ed or in office hours. In Project 3A, you’ll turn in some worlds for us to grade, and if they aren’t valid, we’ll give you a second chance to fix any problems for full credit. Miscellaneous edge case FAQ: . | Two adjacent rooms can be separated by either one wall or two walls. Either is fine. Similarly, if a room and hallway are adjacent, or if two hallways are adjacent, they can be separated by either one wall or two walls. Either is fine. (click to expand) Example of rooms being separated by one or two walls. Note that regardless of which option you choose (one wall or two walls), the two rooms must still be connected, i.e. there must be some way to get from one room to the other. The worlds below are not valid because the rooms are not connected. Two rooms separated by a single wall: Two rooms separated by a double wall: | Walls should not appear inside a room, because this makes it hard to tell which squares belong to a room and which squares belong to a hallway. It’s okay if something like this happens occasionally, but it should not happen often. (click to expand) Example of a wall inside a room. This is invalid if it happens often. | . ",
    "url": "/projects/proj3/proj3a/#world-requirements",
    
    "relUrl": "/projects/proj3/proj3a/#world-requirements"
  },"509": {
    "doc": "3A: World Generation",
    "title": "Task 2: Design Document",
    "content": "Before you begin writing any code, you will need to write a design document! This lets you plan out the overall design of your codebase, so that you can organize your code into smaller pieces and tackle one thing at a time. Write a design document for Project 3. Your design document should be at least 1 - 2 pages long. The design document will be mainly graded on effort, thought, and completion. This document is required to request staff help. If you request help on Ed or in office hours, we will need to see your design document before we can start helping you. In your design document, you can identify what data structures you’ll be using in your implementation. You can also write pseudocode or a general English overview of the algorithms you plan to use. You can format your document however you like. Here’s a template for Project 3 that you can use or borrow some inspiration from. Here are some example sections you could have in your document: . | Classes and Data Structures: List out all the classes you’re using. For each class, list the instance variables (if any). Include a brief description of each variable and its purpose in the class. | Algorithms: This is where you describe how your code works. For each class, include a high-level description of the methods in that class. That is, do not include a line-by-line breakdown of your code, but something you would write in a javadoc comment above a method, including any edge cases you are accounting for. Try to keep your explanations clear and short. Include all the components your program interacts with - classes, specific methods, and files you may create. | . You can also have separate sections for each of the different tasks: World Generation (Task 3), Main Menu (Task 4), Interactivity (Task 5), HUD (Task 6), Saving &amp; Loading (Task 7), and Ambition Features (Task 8). ",
    "url": "/projects/proj3/proj3a/#task-2-design-document",
    
    "relUrl": "/projects/proj3/proj3a/#task-2-design-document"
  },"510": {
    "doc": "3A: World Generation",
    "title": "Task 3: World Generation",
    "content": "With your design document completed, it’s time to generate some worlds! . Implement code that takes in a seed, generates a pseudo-random 2D world array, and displays that world back to the user. For Project 3A, when the user runs the main method in Main.java, they should see a world pop up. For now, you can hard-code the seed in the main method (and change the code to see the output of different seeds). Besides the Main.main requirement, your world generation code can live anywhere in the repo (we suggest making your own files in the Core package). ",
    "url": "/projects/proj3/proj3a/#task-3-world-generation",
    
    "relUrl": "/projects/proj3/proj3a/#task-3-world-generation"
  },"511": {
    "doc": "3A: World Generation",
    "title": "Deliverables",
    "content": "Design Doc . Please submit your design document to the assignment on Gradescope as a group, where one partner submits it and adds the other partner to the submission. It should be formatted as a PDF. Don’t worry if you decide to change your design document after. You are free to do so! We want you to think about the implementation before coding therefore we require you to submit your design as the part of the project. World Screenshots . | Go to this Java Visualizer link to generate 5 seeds. Remember to replace 1270 with your group ID. | Use your code to generate the 5 worlds corresponding to these seeds. You may need to add an “L” after the seed so that Java recognizes it as a long number, e.g. 6578897764558030256L. | Take screenshots of each world. Your screenshots should look like the other world screenshots throughout this spec. | Upload these 5 screenshots to Gradescope. You should submit one screenshot per question. | In your terminal, navigate to your group repo, and type git show --summary. Make sure that the latest commit you see corresponds to the code you used to generate these worlds: . | Take a screenshot of the git show --summary output and upload it to Gradescope. Warning: All 5 of your worlds should be generated with the same code. You shouldn’t submit 3 worlds from one algorithm, and 2 worlds from another one. We will use your commit log to check this. | Make sure that only one partner submits, and then tags the other partner on Gradescope. Each group should only have one submission. | . Warning: Don’t hard-code worlds in your code. Your world generation code should be able to generate pseudo-random worlds for any seed we provide, not just the 5 seeds. Again, we will use your commit log to check this. Grading: . We will grade your worlds after the Project 3A deadline, but before the Project 3B deadline. It can take up to a week to grade your world (especially if you have an extension), so please be patient. If your worlds do not receive full credit, you can submit a regrade request on Gradescope. In your regrade request, please include: . | A screenshot of git show --summary with the commit of the new code you used to generate your fixed worlds. | The 5 worlds you generated with your fixed code. Use the same seeds as you did originally. | . It can take up to a week to respond to your regrade request, so please be patient. Mid-Project Partnership Form . Submit the Project 3 Mid-Project Partnership Form. You will receive an email receipt to confirm that you’ve submitted it. Your form response is confidential between you and staff. The response will not be shared with your partner. Warning: Don’t forget the form! Students every semester forget this form and they are sad. Style . Note: Since there are no autograders in Project 3, we will not be enforcing the 61B style guide on this project. However, we still highly recommend following the style guide, so that your code is readable by your partner! . ",
    "url": "/projects/proj3/proj3a/#deliverables",
    
    "relUrl": "/projects/proj3/proj3a/#deliverables"
  },"512": {
    "doc": "3A: World Generation",
    "title": "3A: World Generation",
    "content": " ",
    "url": "/projects/proj3/proj3a/",
    
    "relUrl": "/projects/proj3/proj3a/"
  },"513": {
    "doc": "3B: Gameplay",
    "title": "Deadlines",
    "content": "Warning: There are 3 deadlines for this project, and some deadlines require you to submit multiple deliverables. Please double-check that you submitted everything! | Assignment | Tasks | Deliverable | Points | Due Date | . | Team Formation | - Task 0: Partnerships | Pre-Project Google Form | 2.5 | Wed, Apr 911:59pm PT | . | Project 3A | - Task 1: Setup- Task 2: Design Document- Task 3: World Generation | World Screenshots on Gradescope | 10 | Fri, Apr 1811:59pm PT | . | Design Document | 7.5 | . | Mid-Project Google Form | 2.5 | . | Project 3B | - Task 4: Main Menu- Task 5: Interactivity- Task 6: HUD- Task 7: Saving and Loading- Task 8: Ambition Features | Code on Gradescope(0 pts, but required for checkoff) | 0 | Tue, Apr 2911:59pm PT | . | Live Checkoff with TA(Checkoffs will happen 4/28 – 5/2) | 100 | . | Post-Project Google Form | 2.5 | . To request extensions on Project 3, both partners need to submit separate extension requests on Beacon. ",
    "url": "/projects/proj3/proj3b/#deadlines",
    
    "relUrl": "/projects/proj3/proj3b/#deadlines"
  },"514": {
    "doc": "3B: Gameplay",
    "title": "Task 4: Main Menu",
    "content": "In Project 3A, when a user ran the main method in Main.java, they saw a world pop up. We’ll now change this to give the user a nice menu. Implement a Main Menu that follows the requirements detailed below. Now, when a user runs Main.main, they should see some Main Menu text pop up, like this: . The menu should give the user these options: . | Pressing N or n on the main menu creates a new game. | Pressing L or l on the main menu loads a saved game from the save file. | Pressing Q or q on the main menu closes the window. To close the window, run System.exit(0). | . The user should be able to press the corresponding keys on the keyboard to select an option. Notice that the key presses are not case-sensitive. The user should be able to press either N or n, and the behavior should be the same (new game created). Besides the requirements above, you can customize the appearance of this menu however you like. If the user presses N or n, they should see a new screen that allows them to enter a seed, like this: . The screen should show the user the value that the user has entered so far. In other words, every time the user types a digit, that digit should immediately appear on screen (next to all the other digits typed). After the user is done typing their seed, the user should be able to press S or s to start the game. You should display a world generated from the user’s seed. Again, besides the requirements above, you can customize the appearance of this menu however you like. Here are some features you don’t need to support (unless you want to). The behavior of these cases is undefined, which means that your code can do anything in these cases (e.g. crash, or display an error, or anything else). | The user entering seeds outside of the range [0, 9223372036854775807] is undefined. These are the values representable by the long primitive data type in Java. | The user typing disallowed characters on the seed screen (i.e. anything except 0123456789sS) is undefined. For example, the user pressing Backspace, or typing a comma, or typing Q, or typing other alphabetical characters on the seed screen, is undefined. | . ",
    "url": "/projects/proj3/proj3b/#task-4-main-menu",
    
    "relUrl": "/projects/proj3/proj3b/#task-4-main-menu"
  },"515": {
    "doc": "3B: Gameplay",
    "title": "Task 5: Interactivity",
    "content": "Next, let’s give the user the ability to move an avatar around the world. Implement an Avatar that follows the requirements detailed below. When the user starts the game, the world you generated should additionally include a single avatar tile representing the user. In the example below, the @ tile is the avatar. Your avatar can look different, as long as there is a clear single avatar. The avatar can start on any floor square. The starting square doesn’t need to be randomly-chosen, e.g. it can always be the bottommost-leftmost floor square. However, the starting square does need to be deterministic, e.g. entering the same seed twice should result in the avatar in the same square. See the section below for more details on determinism. The user should be able to move the avatar around the world as follows: . | W or w should move the avatar up one square. | A or a should move the avatar left one square. | S or s should move the avatar down one square. | D or d should move the avatar right one square. | . If the user attempts to move into a wall, the avatar should stay in the same place, and the program should not crash. For example, in the sample world above, pressing W or w once should move the avatar up, and then pressing W or w again should not move the avatar. You don’t need to support pressing and holding down a key. It’s fine if holding down a key results in undefined behavior. Later in the project, you can add additional gameplay features if you’d like. For example, a power-up could allow the user to move through walls or move multiple squares at once. Or, the user could use an additional key P to push items around. Additional features are fine, as long as you follow the basic spirit of interactivity outlined here, where users can move around, but are limited by walls. Overview: Animating the Game . To animate your game, you need to continuously re-render updates to your game state. These updates will vary depending on the specific scene you are in. You can conceptualize this process as a “game loop.” Your world movement scene might be characterized by the following game loop: . | Initialize the game window and the world state. | Update the movements of the avatar based on the player’s input. | Render the updated game state in the game window. | Repeat steps 2 and 3 until the player quits. | . Check out GameLoopDemo.java, located in the demo folder of your Project 3 repo, for an example of what this might look like. Note: lab 9, task 3A involves implementing a game loop, and is strongly recommended before tackling a game loop for your project 3. In general, good coding practice is to first build small procedures with explicit purposes and then compose more complex methods using the basic ones. It will give you a clear path forward in development and will be easier to break down your logic for unit testing. Overview: Determinism . Your game should be deterministic. This means that if two users press the exact same keys in the exact same sequence, the resulting state of their game should be exactly the same. For example, the 2D tile grid should be exactly the same, and any other features you add (e.g. points, health bar, etc.) should also be exactly the same. Recall that we already used pseudorandomness to make the new-game process deterministic. If two users type in the same seed, they’ll get the exact same world. As you start to add more features from now on, make sure that your game is still deterministic. You can still use pseudorandomness to help you ensure determinism. Note on real-time gameplay: . The easiest way to produce deterministic behavior is for your game to not depend on real-time. Some examples of non-real-time behavior: . | If the user presses the same sequence of keys very quickly, or very slowly, the resulting behavior should be exactly the same. | If you have features like a countdown timer, the timer should be measured by number of moves (e.g. decrement each time the user moves), as opposed to real-time like number of seconds. | If you have features like enemy character spawning, you can spawn an enemy every 5 moves, as opposed to something real-time like every 5 seconds. | . If you do intend to implement real-time behavior, that’s fine, as long as anybody can easily produce deterministic behavior by pressing the same keys in the same sequence. For example, asking the user to press a key within a 10-second timer is fine and reproducible, but asking the user to press 20 keys within a 0.1-second timer is too hard to reproduce reliably. ",
    "url": "/projects/proj3/proj3b/#task-5-interactivity",
    
    "relUrl": "/projects/proj3/proj3b/#task-5-interactivity"
  },"516": {
    "doc": "3B: Gameplay",
    "title": "Task 6: HUD",
    "content": "Add a “Heads up Display” (HUD) that provides additional information that maybe useful to the user. Implement the HUD feature that follows the requirements detailed below. At the bare minimum, this should include Text that describes the tile currently under the mouse pointer. Ideally, your HUD should not flicker as the mouse moves. The HUD must update as you move the mouse cursor, i.e. you must update even if the user is only moving the mouse and isn’t pressing any keys. Note: lab 9, task 3B involves adding a HUD, and is strongly recommended before adding a HUD to your project 3. As an example of the bare minimum, the simple interface below displays a grid of tiles and a HUD that displays the description of the tile under the mouse pointer (click image for higher resolution). Here, the mouse cursor (not shown) is over the g, and the text is there to tell the user that the green g represents a goblin. You may include additional features to your HUD if you choose. In the example below from Fall 2022 students Shannon Jay and Angelique, we a see a more complex HUD. As with the previous example, the mouse cursor is currently over a floor tile, so the HUD displays the text “floor” in the top right. However, this HUD also provides the user with 5 hearts representing the avatar’s “health”, as well as a description about a special key that can be pressed to turn a lamp on or off. Click image below for high resolution. ",
    "url": "/projects/proj3/proj3b/#task-6-hud",
    
    "relUrl": "/projects/proj3/proj3b/#task-6-hud"
  },"517": {
    "doc": "3B: Gameplay",
    "title": "Task 7: Saving and Loading",
    "content": "Suppose the user is playing your game, but needs to take a break. (Maybe they need to attend a CS 61B lecture?) Let’s give users a way to save their progress and load back a game later. Implement the Saving and Loading feature that follows the requirements detailed below. Here’s a video demo of the saving and loading process: . When the user is in “World mode” (looking at a 2D world, not the main menu), they should be able to press :q or :Q to immediately save the game and quit the program. To quit the program, run System.exit(0). When the user quits your program, all Java variables will be lost. Therefore, you will need to save the user’s progress in a file, like save.txt. What you put in save.txt is up to you, but it should contain enough information to perfectly reconstruct the user’s game later. Some notes on the keypresses: . | :Q is two characters pressed separately. The user first presses colon only, and then they press Q only. | :Q or :q in “World mode” should immediately save and quit, with no further key-presses needed to complete. For example, don’t ask the user if they are sure before quitting. | In “Menu mode” (looking at the main menu), pressing Q alone should quit the program, without saving anything. | In “World mode” (looking at a 2D world), pressing Q alone should do nothing, and pressing :Q should save the game and quit the program. | In “World mode,” pressing colon, followed by any other letter, should not do anything. | . If the user presses L or l on the main menu, you should load the most-recently-saved world from the save.txt file. We do not test if your world loads when your world has not been previously saved. The loaded world should be in the exact same state before the user quit the game. For example, these two scenarios should result in identical worlds: . | The user types N999SDDDWWW (New Game, seed 999, Start, move right 3 times, move up 3 times). | The user types N999SDDD:Q (New Game, seed 999, Start, move right 3 times, save). Then, the user re-starts the program and types LWWW (Load, move up 3 times). | . The loaded world should be identical, including the state of the random number generator! . Here are some cases of undefined behavior. Remember, undefined behavior means your code can crash, display an error, or do anything else you want. We won’t test these cases. | If there is no previous save, and the user presses L or l on the main menu, the behavior is undefined. | If the user quits the program some other way (e.g. quits IntelliJ, or unplugs their computer), the behavior is undefined. You don’t need to save anything in this case. | . ",
    "url": "/projects/proj3/proj3b/#task-7-saving-and-loading",
    
    "relUrl": "/projects/proj3/proj3b/#task-7-saving-and-loading"
  },"518": {
    "doc": "3B: Gameplay",
    "title": "Task 8: Ambition Features",
    "content": "Now that you have a basic game working, in the last part of the project, you’ll get a chance to add creative features of your own choosing! . // This method was written by Gemini 2.5. public void someMethod() { // ... } . Implement at least one primary Ambition Feature and one secondary Ambition Feature either from the list below or of your choosing. You are more than welcome to implement more than the minimum requirement, such as two primary Ambition Features, etc. If you’d like to implement your own feature(s), please ask on the Feature Request Ed thread and ask early so we can let you know if your feature is approved! . For a list of pre-approved ambition features, see our ambition features list. Note that your game should retain the same functionality from previous tasks (e.g. Main Menu, Interactivity, Saving and Loading). In other words, you should be implementing your ambition features on top of your existing code. Clarifications . Note: Ambition features are graded separately from the previous tasks. Specifically, for Saving and Loading, we do not require you to save and load any additional state of the world that is affected by an ambition feature. For example, if you’re implementing the Line of Sight feature, you can load your world with either the line of sight toggled on or off, regardless of the state it was saved in. However, you’ll still want to make sure that your Ambition Feature doesn’t break your Saving and Loading functionality. ",
    "url": "/projects/proj3/proj3b/#task-8-ambition-features",
    
    "relUrl": "/projects/proj3/proj3b/#task-8-ambition-features"
  },"519": {
    "doc": "3B: Gameplay",
    "title": "Deliverables",
    "content": "Gradescope . Submit the code of the game you want us to grade to Gradescope. There is no autograder, but we need a submission in order to assign you a grade during your live checkoff (see below). The code you present during your live checkoff needs to be the same as the code you submitted to Gradescope. Live Checkoff . Project 3B will be graded in a live checkoff with a TA. These checkoffs typically happen during the last week of class, before RRR week. Checkoffs are held in-person, though we will have a very limited number of remote checkoffs for documented reasons (e.g. sickness). Exact details, including how to sign up for a checkoff slot, will be posted on Ed closer to the start of checkoffs. For a full run-down of how the checkoff will work, see the checkoff script. Post-Project Partnership Form . Submit the Project 3 Post-Project Partnership Form. You will receive an email receipt to confirm that you’ve submitted it. Your form response is confidential between you and staff. The response will not be shared with your partner. Warning: Don’t forget the form! Students every semester forget this form and they are sad. Style . Note: Since there are no autograders in Project 3, we will not be enforcing the 61B style guide on this project. However, we still highly recommend following the style guide, so that your code is readable by your partner! . ",
    "url": "/projects/proj3/proj3b/#deliverables",
    
    "relUrl": "/projects/proj3/proj3b/#deliverables"
  },"520": {
    "doc": "3B: Gameplay",
    "title": "3B: Gameplay",
    "content": " ",
    "url": "/projects/proj3/proj3b/",
    
    "relUrl": "/projects/proj3/proj3b/"
  },"521": {
    "doc": "Setup",
    "title": "Deadlines",
    "content": "Warning: There are 3 deadlines for this project, and some deadlines require you to submit multiple deliverables. Please double-check that you submitted everything! | Assignment | Tasks | Deliverable | Points | Due Date | . | Team Formation | - Task 0: Partnerships | Pre-Project Google Form | 2.5 | Wed, Apr 911:59pm PT | . | Project 3A | - Task 1: Setup- Task 2: Design Document- Task 3: World Generation | World Screenshots on Gradescope | 10 | Fri, Apr 1811:59pm PT | . | Design Document | 7.5 | . | Mid-Project Google Form | 2.5 | . | Project 3B | - Task 4: Main Menu- Task 5: Interactivity- Task 6: HUD- Task 7: Saving and Loading- Task 8: Ambition Features | Code on Gradescope(0 pts, but required for checkoff) | 0 | Tue, Apr 2911:59pm PT | . | Live Checkoff with TA(Checkoffs will happen 4/28 – 5/2) | 100 | . | Post-Project Google Form | 2.5 | . To request extensions on Project 3, both partners need to submit separate extension requests on Beacon. ",
    "url": "/projects/proj3/setup/#deadlines",
    
    "relUrl": "/projects/proj3/setup/#deadlines"
  },"522": {
    "doc": "Setup",
    "title": "Task 1: Setup",
    "content": "The setup for this project is different from all other assignments so far. Read this carefully and do not skip any steps! . You need to accept your Github repo invite within a week of it being sent, or else it will expire, and you will not be able to work on the project. If this happens to you, please make a private Ed post under Question &gt; Projects &gt; Proj 3 &gt; Logistics (Private). You should see an autogenerated template appear. | Go to your email and accept the Github repo invite. | Log in to Beacon, and click on the “Groups” tab. You should have a group listed here. | Click the “View Repository on GitHub” link. | Click “SSH” and copy the link that appears. It should look like this, with *** replaced with some group number: . git@github.com:Berkeley-CS61B-Student/sp25-proj3-g***.git . | Open a new terminal window in your local computer. | Use cd to navigate to your CS 61B folder. Most students have a folder called cs61b. Warning: Do not navigate to your personal sp25-s*** repo! You should not be cloning your group repo inside your personal one. | Type pwd in your terminal. This will output the current directory you are in. Make sure you do not see sp25-s*** in the output! If you do, go back to Step 6. | In your terminal, clone your repo, replacing the URL with the one you copied earlier: . git clone git@github.com:Berkeley-CS61B-Student/sp25-proj3-g***.git . | Navigate into the repo you just cloned: . cd sp25-proj3-g*** . | Tell Github where to find the skeleton repo: . git remote add skeleton https://github.com/Berkeley-CS61B/proj3-skeleton-sp25.git . | Pull the skeleton code: . git pull skeleton main --allow-unrelated-histories . | . Once you’ve completed the above steps, you should see your new group repo called sp25-proj3-g*** in your local files, and if you open this repo, you’ll see the proj3 skeleton folder. From here, you and your partner can proceed as normal, by adding, committing, pushing, and pulling from this repo as you would otherwise. ",
    "url": "/projects/proj3/setup/#task-1-setup",
    
    "relUrl": "/projects/proj3/setup/#task-1-setup"
  },"523": {
    "doc": "Setup",
    "title": "Setup",
    "content": " ",
    "url": "/projects/proj3/setup/",
    
    "relUrl": "/projects/proj3/setup/"
  },"524": {
    "doc": "Git Pull Skeleton Merge Guide",
    "title": "Git Pull Skeleton Merge Guide",
    "content": "If you’re pulling the latest skeleton code, this will often result in a “merge”, as described in the more advanced sections of the Git Guide. A text editor will automatically open asking you to provide a message on why you are merging. On the top line of your text editor, enter a message like “i was just trying to pull new skeleton code” or whatever you’d like. The text you’ll enter will go right above: . # Please enter the commit message for your changes. Lines starting # with '#' will be ignored, and an empty message aborts the commit. After entering your message at the very top of the file, save and close the text window and the merge will be done. Depending on how you installed Git, you may find youself in a command line text editor like nano or vim. If this happens and you’ve never used a command line text editor, don’t panic! Nano is relatively straightforward to use. Simply type your message, and press “ctrl-o” to save, then “ctrl-x” to exit. If you followed the directions for Lab 1 Setup properly, you should not be in vim. However, if you are nonetheless in vim, please see this helpful tutorial in youtube or this stack overflow post about what to do next. And if you’re still stuck, post on Ed and someone will be able to help you. Once you’ve successfully merged, you should see a proj0 directory appear with files that match the skeleton repository. If you somehow end up with a message saying there was a merge conflict, consult the Git WTFS guide. If you get some sort of error, STOP and either figure it out by carefully reading the git guide or seek help at OH or with Ed. You’ll potentially save yourself a lot of trouble vs. guess-and-check with git commands. If you find posts on Google that suggest using git push -f, don’t. This can cause some serious headaches with git. ",
    "url": "/resources/guides/git/skeleton-merge-guide/",
    
    "relUrl": "/resources/guides/git/skeleton-merge-guide/"
  },"525": {
    "doc": "How to Use the Terminal",
    "title": "Terminal Guide",
    "content": "Here are the most important commands that you’ll need to know for CS61B: . cd: change your working directory . cd hw . This command will change your directory to hw. pwd: print working directory . pwd . This command will tell you the full absolute path for the current directory you are in if you are not sure where you are. Shorthand Commands . | ~: shorthand for your home directory . | .: shorthand for your current directory . cd . This command will change your directory to the current directory (aka. do nothing). | ..: shorthand for one parent directory above your current directory . cd .. This command will change your directory to its parent. If you are in /workspace/day1/, the command will place you in /workspace/. | . ls: list files/folders in a directory . ls . This command will list all the files and folders in your current directory. You can also use ls &lt;directory&gt; to list the contents of a different directory – try ls ..! . mkdir: make a directory . mkdir [dirname] . This command will make a new directory within the current directory called dirname. You can think of a directory as creating another folder on your local computer. touch: create a new file . touch [filename] . This command will create a file within the current directory called filename. To create a text file, you would run the command touch filename.txt. rm: remove (delete) a file . rm [file] . This command will remove file from the current directory. It will not work if file does not exist. rm -r [dir] . This command will remove the dir directory recursively. In other words, it will delete all the files and directories in dir in addition to dir itself. Be careful with this command! . cat: display the contents of a file . cat [file] . This command is useful for inspecting the contents of files in the terminal without having to open them in a program. It is not as useful for large files (which can clutter the terminal) or non-text files (which will likely output gibberish). cp: copy a file . cp lab1/original lab2/duplicate . This command will copy the original file in the lab1 directory and create a duplicate file in the lab2 directory. mv: move or rename a file . mv lab1/original lab2/original . This command moves original from lab1 to lab2. Unlike cp, mv does not leave original in the lab1 directory. mv lab1/original lab1/newname . This command does not move the file but rather renames it from original to newname. Here are some other useful tricks when working in a terminal. | Your shell can complete file names and directory names for you with tab completion. When you have an incomplete name (for something that already exists), try pressing the tab key for autocomplete or a list of possible names. | You can copy-paste into the terminal. This is straightforward on Mac, but on Windows, right-click to copy and paste highlighted text. | If you want to run the same command used recently, press the up arrow key on your keyboard until you see the correct instruction. If you go too far, use the down key to go back. This saves typing time if you are doing repetitive instructions. | You can have multiple terminals open at a time - this might help speed up your workflow if you’re running separate tasks that require the terminal. | . ",
    "url": "/labs/lab01/terminal/#terminal-guide",
    
    "relUrl": "/labs/lab01/terminal/#terminal-guide"
  },"526": {
    "doc": "How to Use the Terminal",
    "title": "How to Use the Terminal",
    "content": " ",
    "url": "/labs/lab01/terminal/",
    
    "relUrl": "/labs/lab01/terminal/"
  },"527": {
    "doc": "How to Use the Terminal",
    "title": "Terminal Guide",
    "content": "Here are the most important commands that you’ll need to know for CS61B: . cd: change your working directory . cd hw . This command will change your directory to hw. pwd: print working directory . pwd . This command will tell you the full absolute path for the current directory you are in if you are not sure where you are. Shorthand Commands . | ~: shorthand for your home directory . | .: shorthand for your current directory . cd . This command will change your directory to the current directory (aka. do nothing). | ..: shorthand for one parent directory above your current directory . cd .. This command will change your directory to its parent. If you are in /workspace/day1/, the command will place you in /workspace/. | . ls: list files/folders in a directory . ls . This command will list all the files and folders in your current directory. You can also use ls &lt;directory&gt; to list the contents of a different directory – try ls ..! . mkdir: make a directory . mkdir [dirname] . This command will make a new directory within the current directory called dirname. You can think of a directory as creating another folder on your local computer. touch: create a new file . touch [filename] . This command will create a file within the current directory called filename. To create a text file, you would run the command touch filename.txt. rm: remove (delete) a file . rm [file] . This command will remove file from the current directory. It will not work if file does not exist. rm -r [dir] . This command will remove the dir directory recursively. In other words, it will delete all the files and directories in dir in addition to dir itself. Be careful with this command! . cat: display the contents of a file . cat [file] . This command is useful for inspecting the contents of files in the terminal without having to open them in a program. It is not as useful for large files (which can clutter the terminal) or non-text files (which will likely output gibberish). cp: copy a file . cp lab1/original lab2/duplicate . This command will copy the original file in the lab1 directory and create a duplicate file in the lab2 directory. mv: move or rename a file . mv lab1/original lab2/original . This command moves original from lab1 to lab2. Unlike cp, mv does not leave original in the lab1 directory. mv lab1/original lab1/newname . This command does not move the file but rather renames it from original to newname. Here are some other useful tricks when working in a terminal. | Your shell can complete file names and directory names for you with tab completion. When you have an incomplete name (for something that already exists), try pressing the tab key for autocomplete or a list of possible names. | You can copy-paste into the terminal. This is straightforward on Mac, but on Windows, right-click to copy and paste highlighted text. | If you want to run the same command used recently, press the up arrow key on your keyboard until you see the correct instruction. If you go too far, use the down key to go back. This saves typing time if you are doing repetitive instructions. | You can have multiple terminals open at a time - this might help speed up your workflow if you’re running separate tasks that require the terminal. | . ",
    "url": "/labs/lab04/terminal/#terminal-guide",
    
    "relUrl": "/labs/lab04/terminal/#terminal-guide"
  },"528": {
    "doc": "How to Use the Terminal",
    "title": "How to Use the Terminal",
    "content": " ",
    "url": "/labs/lab04/terminal/",
    
    "relUrl": "/labs/lab04/terminal/"
  },"529": {
    "doc": "Topical Exam Resources",
    "title": "Topical Exam Resources",
    "content": "Topic: All Topics 2048 ADTs Abstraction Arrays Asymptotics B-Trees BSTs Bits Comparators Comparison Sorts DMS Deques Disjoint Sets Equals Game Trees Git Graph Representations Graph Traversals Hashing Heaps / PQs Inheritance Iteration Iterators Java K-D Trees Linked Lists Lists MSTs Percolation Radix Sorts Recursion Red-Black Trees Reductions Regex SPTs Sorting Testing Topological Sort Tree Traversals Tries Difficulty: All Difficulties easy hard moderate Type: All Types Algorithm Design Coding Conceptual Debugging Diagram PNH Potpourri Testing WWJD Filter . Java &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: WWJD &nbsp;Question: q2 | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3 | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q4a | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q4b | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q4c | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q7 | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q2a | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q2b | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q2c | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: WWJD &nbsp;Question: q4 | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Testing &nbsp;Question: q6a | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q6b | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Testing &nbsp;Question: q6c | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6d | fa22-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q1a | fa22-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: WWJD &nbsp;Question: q1b | fa22-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q2a | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1 | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4c | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q5a | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q5b | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q3c | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3d | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: PNH &nbsp;Question: q4 | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q11a | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q11b | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q11c | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q11d | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: PNH &nbsp;Question: q6 | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q1a | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q1b | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Debugging &nbsp;Question: q2 | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: PNH &nbsp;Question: q3 | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Debugging &nbsp;Question: q4a | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q4b | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q7 | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: PNH &nbsp;Question: q5 | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q1b | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q1c | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q2 | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Debugging &nbsp;Question: q6 | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Testing &nbsp;Question: q6c | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q1 | sp23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: WWJD &nbsp;Question: q1 | sp23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q2 | sp23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: WWJD &nbsp;Question: q3 | sp23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q6 | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q1.a | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: WWJD &nbsp;Question: q1.b | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q2.a | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q2.b | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6.a | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6.b | . Git &#9656; . | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3 | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q4 | . Testing &#9656; . | fa22-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q4 | . Lists &#9656; . | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5 | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Testing &nbsp;Question: q6a | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q6b | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Testing &nbsp;Question: q6c | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6d | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q4a | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q4b | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4c | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Debugging &nbsp;Question: q4a | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q4b | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1d | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5 | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Testing &nbsp;Question: q6c | . Linked Lists &#9656; . | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7.3-q7.4 | fa22-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q2a | fa22-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q3 | fa22-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q6 | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q8a | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q8b | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q8c | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q3a | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q3b | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Potpourri &nbsp;Question: q5 | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q5 | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q6a | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6b | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q4 | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Testing &nbsp;Question: q4a | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q7 | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q10 | sp23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5 | sp23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q7 | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6.a | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6.b | . Arrays &#9656; . | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5 | fa22-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q5a | fa22-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5b | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q5a | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q5b | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q11b | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q10bi | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q10bii | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q10biii | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10biv | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q1a | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q1b | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q1c | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1d | sp23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q4 | sp23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5 | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q2.b | . Deques &#9656; . | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5 | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q7a | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q7b | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q7c | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q7d | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q7e | . Abstraction &#9656; . | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Testing &nbsp;Question: q6a | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q6b | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Testing &nbsp;Question: q6c | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6d | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q7b | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q7c | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q7d | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q7e | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q1b | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q1c | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5 | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6a | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6c | . Inheritance &#9656; . | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: WWJD &nbsp;Question: q4 | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Testing &nbsp;Question: q6a | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q6b | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Testing &nbsp;Question: q6c | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6d | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7a | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7b | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: WWJD &nbsp;Question: q7c | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q7d | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7e | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q2 | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5 | . DMS &#9656; . | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q3a | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q3b | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3c | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: WWJD &nbsp;Question: q4 | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7a | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7b | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: WWJD &nbsp;Question: q7c | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q7d | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7e | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q2 | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q3 | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q1 | sp23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q8 | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q1c | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q1.a | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: WWJD &nbsp;Question: q1.b | . Iterators &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q4a | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q4b | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q9 | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q2 | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q3a | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3b | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q3b | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q3c | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q7b | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q9a | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q9b | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6 | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q2b | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q2.a | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q2.b | . Comparators &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q4c | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q2b | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q2c | fa20-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q2d | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q9 | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q4d | sp19-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q8 | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4.a | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q4.b | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q4.c | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Testing &nbsp;Question: q4.d | . Equals &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q7 | fa23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4c | . Asymptotics &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3.1 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3.2 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3.3 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3.4 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3.5 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7.1-q7.2 | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6 | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7a | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7b | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7e | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1a | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1b | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1d | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1f | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1j | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6a | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6b | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6c | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6d | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6e | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q6f | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8a | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8b | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q9 | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q11d | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8a | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q8b | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q8c | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8d | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9ai | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10d | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2d | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2e | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10a | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q10bii | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10biv | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4a | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7 | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5d | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5e | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5f | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6a | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6b | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6c | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q6d | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q6e | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q6f | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4a | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4b | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q4c | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q4d | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q4e | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4f | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q4g | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4h | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4i | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4j | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q8 | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6a | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6b | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6d | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6e | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6g | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6h | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7d | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.g | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.h | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.i | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7.c | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8.c | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5.a | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q5.b | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5.c | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5.d | . Disjoint Sets &#9656; . | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.3 | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1 | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1c | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q3 | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q7a | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q7b | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Diagram &nbsp;Question: q6 | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6 | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3 | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.g | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.h | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.i | . ADTs &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q4b | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q8a | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q8b | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q8c | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Potpourri &nbsp;Question: q1l, q1m, q1n | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4 | sp23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q2 | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1a | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q1b | . BSTs &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8a | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8b | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q8c | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.1 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q4 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7.5 | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5a | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5b | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5c | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5d | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5e | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10 | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q4a | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q4b | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Potpourri &nbsp;Question: q5 | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1a | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q1b | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q11 | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5a | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8a | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q8b | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q8c | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5f | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q2d | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2a | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q2b | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q5 | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q8a | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q8b | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3.b | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q6.b | . B-Trees &#9656; . | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q4a | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1e | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1j | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q2a | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2d | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q5b | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q8a | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q8c | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4 | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9a | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q9b | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q9c | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9d | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q9e | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5.a | . Red-Black Trees &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8a | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8b | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q8c | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7.5 | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q4a | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4b | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4c | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4d | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q4e | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1g | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2b | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q2c | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q4a | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4b | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q4c | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4a | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q5b | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q8b | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q8c | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4 | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q9c | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9d | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q9e | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q9f | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5.a | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5.c | . Hashing &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q7 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.1 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7.1-q7.2 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7.3-q7.4 | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q3a | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Diagram &nbsp;Question: q3b | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1f | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1h | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1i | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1k | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5 | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Potpourri &nbsp;Question: q5 | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q10a | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10b | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10c | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10d | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2a | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2b | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2c | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2d | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2e | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4 | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5a | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5e | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: WWJD &nbsp;Question: q3a | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q3b | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q3c | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: WWJD &nbsp;Question: q3d | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3e | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3f | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q3g | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6.1 | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q6.2 | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6a | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6b | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q6c | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6d | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6e | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6f | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6g | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6h | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Diagram &nbsp;Question: q2.a | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q2.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q2.c | . Heaps / PQs &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q4c | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q8 | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5a | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5b | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5c | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5d | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5e | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q4.1 | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q4.2, q4.3 | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7c | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10 | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1ai | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1aii | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Potpourri &nbsp;Question: q5 | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q9a | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Diagram &nbsp;Question: q9b | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q11 | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2 | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5d | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q6b | sp23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7 | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3a | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3b | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3c | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q8.a | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8.c | . Tree Traversals &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3 | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q8c | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5b | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5c | fa22-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5d | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Potpourri &nbsp;Question: q1d | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5 | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Coding &nbsp;Question: q12a | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q12b | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q12c | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q12a | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q12b | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q12c | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q12d | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q12e | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q8a | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Diagram &nbsp;Question: q8b | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Diagram &nbsp;Question: q8c | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q8d | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2 | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q8a | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3.a | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q3.c | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q3.4 | su23-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3.a | . Graph Traversals &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q9 | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10a | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q5.4 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Diagram &nbsp;Question: q5.5 | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q1a | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q1b | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6a | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q13 | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Diagram &nbsp;Question: q11a | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Diagram &nbsp;Question: q11b | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q11c | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1 | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Algorithm Design &nbsp;Question: q4 | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5a | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q2a | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1.d | . SPTs &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q9 | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10a | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q10b | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q5.1-q5.2 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q5.3 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5.6-q5.9 | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6a | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6b | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q9 | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q3b | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3e | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Potpourri &nbsp;Question: q5 | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q7a | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7b | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q7c | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q7d | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1a | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5b | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q2b | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q2c | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7a | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7b | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7c | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7d | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6.a | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q6.c | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Algorithm Design &nbsp;Question: q9 | . MSTs &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q10 | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q1c | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1d | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Diagram &nbsp;Question: q1e | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Diagram &nbsp;Question: q1f | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6a | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7b | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q3a | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q3b | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q3c | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3d | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Diagram &nbsp;Question: q7d | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1b | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1c | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5b | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2a | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q8a | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Algorithm Design &nbsp;Question: q8a | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7e | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7f | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7g | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7h | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7i | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7j | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6.a | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q6.c | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Algorithm Design &nbsp;Question: q9 | . Tries &#9656; . | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q6 | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5f | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5a | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5b | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5c | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q5d | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q10a | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10b | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q10c | . Sorting &#9656; . | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: WWJD &nbsp;Question: q2 | fa20-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q1.2 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1.4 | fa22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: WWJD &nbsp;Question: q2 | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q2a | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2b | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2c | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2d | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q2e | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7a | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8a | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8b | sp18-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q10 | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1b | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1c | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1d | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1e | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1f | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1g | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2a | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2b | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2c | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2d | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Potpourri &nbsp;Question: q5 | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9a | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9b | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9c | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9d | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9e | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9f | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1.a | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q1.c | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.e | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q1.f | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q7.a | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7.b | su23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7.c | . 2048 &#9656; . | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q7 | . Percolation &#9656; . | fa23-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q3 | . K-D Trees &#9656; . | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Potpourri &nbsp;Question: q5 | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3a | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3b | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3c | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3d | sp19-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3e | . Reductions &#9656; . | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9ai | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q9aii | sp19-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q9aiii | . Graph Representations &#9656; . | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2b | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2c | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q2d | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q2e | . Comparison Sorts &#9656; . | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q6b | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6c | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q6d | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7.1a | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7.1b | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7.1c | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q7.2ai | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7.2aii | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7.2bi | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q7.2bii | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7.3a | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7.3b | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7.3c | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3a | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q3b | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3c | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4a | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Conceptual &nbsp;Question: q4b | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q4c | . Topological Sort &#9656; . | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q3c | . Radix Sorts &#9656; . | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q6c | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q6d | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7.3a | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7.3b | sp23-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: easy &nbsp;Type: Conceptual &nbsp;Question: q7.3c | su22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q4d | . Regex &#9656; . | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q2 | . Bits &#9656; . | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q3 | . Game Trees &#9656; . | sp22-final &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q5c | . Iteration &#9656; . | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5 | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q7 | . Recursion &#9656; . | sp21-mt1 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q5 | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Conceptual &nbsp;Question: q8a | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: hard &nbsp;Type: Coding &nbsp;Question: q8b | sp21-mt2 &nbsp;Exam &nbsp;Solution &nbsp;Walkthrough &nbsp;Difficulty: moderate &nbsp;Type: Coding &nbsp;Question: q8c | . ",
    "url": "/resources/exams/topical_exam_resources/",
    
    "relUrl": "/resources/exams/topical_exam_resources/"
  },"530": {
    "doc": "Windows",
    "title": "A. Install Git",
    "content": ". | Install git. Head to http://git-scm.com/download/ and download the Git for Windows installer. | Run the installer. You’ll be faced with many options. We’ll only be selecting different options on: . | The Select Components page, where we add a Git bash profile to the windows terminal. | The Configuring Experimental Options page, where we add support for native console programs. | . | All the other options should be left as is. The entire install process is shown in the gif below: . | . ",
    "url": "/labs/lab01/windows/#a-install-git",
    
    "relUrl": "/labs/lab01/windows/#a-install-git"
  },"531": {
    "doc": "Windows",
    "title": "B. Install Windows Terminal",
    "content": "All recent versions of Windows 10 and 11 come with the Terminal app pre-installed. If you can find the app by searching for terminal in the start menu, you should be good to go for this section and can skip onto the next step: . Note: We’re looking for the terminal app selected in the screenshot and not the command prompt. If not, we recommend that you install the terminal app from the Microsoft Store, which does not require a login or payment. Alternate installation instructions are here. ",
    "url": "/labs/lab01/windows/#b-install-windows-terminal",
    
    "relUrl": "/labs/lab01/windows/#b-install-windows-terminal"
  },"532": {
    "doc": "Windows",
    "title": "C. Configure Windows Terminal",
    "content": "When you start up windows terminal, you’ll see a powershell terminal prompt. We don’t want to use “PowerShell”, which is based on Windows. Instead, we want to use a “bash shell” (specifically, Git bash), which is based on Linux. To set this up: . | Click on the drop-down arrow next to the plus “+” sign at the top and open the settings page. | Set the default profile to Git bash, default terminal application to windows terminal and hit save. | If you completed the previous steps correctly, when you click on the plus sign, you should see a Git Bash shell window open. At this point, you’re all done! You can now move on with the rest of Lab 1. | . ",
    "url": "/labs/lab01/windows/#c-configure-windows-terminal",
    
    "relUrl": "/labs/lab01/windows/#c-configure-windows-terminal"
  },"533": {
    "doc": "Windows",
    "title": "D. Note on WSL2 (experimental)",
    "content": "The Summer 2020 update of Windows contains a Linux kernel called WSL2. We will not be officially supporting WSL2 for this term. If you’re pretty computer savvy, you’re welcome to try it out though! One word of warning: You will need to install javac, java, and git inside WSL2 again, following the Linux instructions for your chosen distribution. ",
    "url": "/labs/lab01/windows/#d-note-on-wsl2-experimental",
    
    "relUrl": "/labs/lab01/windows/#d-note-on-wsl2-experimental"
  },"534": {
    "doc": "Windows",
    "title": "Windows",
    "content": " ",
    "url": "/labs/lab01/windows/",
    
    "relUrl": "/labs/lab01/windows/"
  },"535": {
    "doc": "Git WTFS",
    "title": "Git WTFS",
    "content": "This page has been moved. Redirecting… . ",
    "url": "/resources/guides/git/wtfs/",
    
    "relUrl": "/resources/guides/git/wtfs/"
  }
}
